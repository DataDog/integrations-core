sudo: required
services:
  - docker
language: python
python:
  - '2.7.15'
addons:
  apt:
    packages:
      - tdsodbc
cache:
  directories:
    - "$HOME/.cache/pip"
    - /opt/mqm
git:
  depth: 3
branches:
  only:
    - master
env:
  global:
    - SKIP_CLEANUP=true
    - PIP_CACHE=$HOME/.cache/pip
    # if the c include path doesn't have the proper path pymqi will not compile
    - C_INCLUDE_PATH="/opt/mqm/inc:$C_INCLUDE_PATH"
    - LD_LIBRARY_PATH="/opt/mqm/lib64:/opt/mqm/lib:$LD_LIBRARY_PATH"

stages:
  - name: test_changed
    if: ((type = pull_request) AND (NOT commit_message =~ /ci run all/))
  - name: test
    if: ((branch = master) AND (type != pull_request)) OR ((commit_message =~ /ci run all/) AND (type = pull_request))

script:
  - travis_retry ddev test --cov ${CHECK}
  - ddev test ${CHECK} --bench || true

# Conditional jobs are currently buggy and verbose.
#
# https://github.com/travis-ci/beta-features/issues/28
# https://github.com/travis-ci/beta-features/issues/40
# https://github.com/travis-ci/travis-ci/issues/8295
# https://github.com/travis-ci/travis-conditions/pull/1
# https://github.com/travis-ci/travis-ci/issues/6652
jobs:
  fast_finish: true
  include:
    - stage: test_changed
      script:
        - ddev validate dep
        - ddev validate manifest --include-extras
        - ddev validate metadata
        - ddev validate service-checks
        - ddev validate agent-reqs
        - ddev test --cov
        - ddev test --bench || true
    - stage: test
      env: CHECK=datadog_checks_base PYTHON3=true
      script:
        - ddev validate dep
        - ddev validate manifest --include-extras
        - ddev validate metadata
        - ddev validate service-checks
        - ddev validate agent-reqs
        - travis_retry ddev test --cov ${CHECK}
        - ddev test ${CHECK} --bench || true
    - stage: test
      env: CHECK=datadog_checks_dev PYTHON3=true
    - stage: test
      env: CHECK=active_directory
    - stage: test
      env: CHECK=activemq_xml PYTHON3=true
    - stage: test
      env: CHECK=agent_metrics
    - stage: test
      env: CHECK=apache PYTHON3=true
    - stage: test
      env: CHECK=aspdotnet
    - stage: test
      env: CHECK=btrfs PYTHON3=true
    - stage: test
      env: CHECK=cacti PYTHON3=true
    - stage: test
      env: CHECK=cassandra_nodetool PYTHON3=true
    - stage: test
      env: CHECK=ceph
    - stage: test
      env: CHECK=cisco_aci
    - stage: test
      env: CHECK=cockroachdb PYTHON3=true
    - stage: test
      env: CHECK=consul PYTHON3=true
    - stage: test
      env: CHECK=coredns PYTHON3=true
    - stage: test
      env: CHECK=couch PYTHON3=true
    - stage: test
      env: CHECK=couchbase
    - stage: test
      env: CHECK=crio PYTHON3=true
    - stage: test
      env: CHECK=directory PYTHON3=true
    - stage: test
      env: CHECK=disk PYTHON3=true
    - stage: test
      env: CHECK=dns_check
    - stage: test
      env: CHECK=dotnetclr
    - stage: test
      env: CHECK=ecs_fargate
    - stage: test
      env: CHECK=elastic PYTHON3=true
    - stage: test
      env: CHECK=envoy PYTHON3=true
    - stage: test
      env: CHECK=etcd PYTHON3=true
    - stage: test
      env: CHECK=exchange_server
    - stage: test
      env: CHECK=fluentd PYTHON3=true
    - stage: test
      env: CHECK=gearmand PYTHON3=true
    - stage: test
      env: CHECK=gitlab
    - stage: test
      env: CHECK=go_expvar
    - stage: test
      env: CHECK=gunicorn PYTHON3=true
    - stage: test
      env: CHECK=haproxy
    - stage: test
      env: CHECK=hdfs_datanode
    - stage: test
      env: CHECK=hdfs_namenode
    - stage: test
      env: CHECK=http_check PYTHON3=true
    - stage: test
      env: CHECK=ibm_mq
    - stage: test
      env: CHECK=iis
    - stage: test
      env: CHECK=istio
    - stage: test
      env: CHECK=kafka_consumer PYTHON3=true
    - stage: test
      env: CHECK=kong
    - stage: test
      env: CHECK=kube_dns
    - stage: test
      env: CHECK=kube_proxy
    - stage: test
      env: CHECK=kubelet
    - stage: test
      env: CHECK=kubernetes_state
    - stage: test
      env: CHECK=kyototycoon
    - stage: test
      env: CHECK=lighttpd
    - stage: test
      env: CHECK=linkerd
    - stage: test
      env: CHECK=linux_proc_extras
    - stage: test
      env: CHECK=mapreduce
    - stage: test
      env: CHECK=marathon
    - stage: test
      env: CHECK=mcache
    - stage: test
      env: CHECK=mesos_slave
    - stage: test
      env: CHECK=mesos_master
    - stage: test
      env: CHECK=mongo PYTHON3=true
    - stage: test
      env: CHECK=mysql PYTHON3=true
    - stage: test
      env: CHECK=nagios
    - stage: test
      env: CHECK=network
    - stage: test
      env: CHECK=nfsstat
    - stage: test
      env: CHECK=nginx PYTHON3=true
    - stage: test
      env: CHECK=ntp
    - stage: test
      env: CHECK=openldap
    - stage: test
      env: CHECK=openstack
    - stage: test
      env: CHECK=openstack_controller PYTHON3=true
    - stage: test
      env: CHECK=oracle
    - stage: test
      env: CHECK=pdh_check
    - stage: test
      env: CHECK=pgbouncer
    - stage: test
      env: CHECK=php_fpm PYTHON3=true
    - stage: test
      env: CHECK=postgres PYTHON3=true
    - stage: test
      env: CHECK=postfix
    - stage: test
      env: CHECK=powerdns_recursor
    - stage: test
      env: CHECK=process
    - stage: test
      env: CHECK=prometheus
    - stage: test
      env: CHECK=rabbitmq
    - stage: test
      env: CHECK=redisdb PYTHON3=true
    - stage: test
      env: CHECK=riak
    - stage: test
      env: CHECK=riakcs
    - stage: test
      env: CHECK=snmp
    - stage: test
      env: CHECK=spark
    - stage: test
      env: CHECK=sqlserver
    - stage: test
      env: CHECK=ssh_check
    - stage: test
      env: CHECK=statsd
    - stage: test
      env: CHECK=supervisord
    - stage: test
      env: CHECK=squid
    - stage: test
      env: CHECK=system_core
    - stage: test
      env: CHECK=system_swap
    - stage: test
      env: CHECK=tcp_check
    - stage: test
      env: CHECK=teamcity
    - stage: test
      env: CHECK=tokumx
    - stage: test
      env: CHECK=twemproxy
    - stage: test
      env: CHECK=varnish
    - stage: test
      env: CHECK=vault PYTHON3=true
    - stage: test
      env: CHECK=vsphere
    - stage: test
      env: CHECK=yarn
    - stage: test
      env: CHECK=zk
before_install:
  - bash .travis/prepare.sh
  - PATH="$PATH:$(pyenv root)/versions/3.6/bin"
install:
  - pip install -U pip setuptools codecov
  - pip install ./datadog_checks_dev[cli]
  - ddev config set core .
  # since on PRs it only runs test_changed we have to do this globally
  - bash .travis/install_ibm_mq.sh
# we should clean generated files before we save the cache
# We don't want to save .pyc files, so we'll use find and -delete
before_cache:
  - find $HOME/.cache/pip -name *.pyc -delete
after_script:
  - if [[ $(docker ps -a -q) ]]; then docker stop $(docker ps -a -q); fi
