init_config:
    ## @param global_custom_queries - list - optional
    ## See `custom_queries` defined below.
    ##
    ## Global custom queries can be applied to all instances using the
    ## `use_global_custom_queries` setting at the instance level.
    #
    # global_custom_queries:
    #   - metric_prefix: ibm_db2
    #     query: <QUERY>
    #     columns: <COLUMNS>
    #     tags: <TAGS>

instances:

    ## @param server - string - required
    ## The hostname used to connect to the system.
    #
  - server: <SERVER>

    ## @param port - integer - required - default: 39015
    ## The port used to connect to the system.
    #
    port: 39015

    ## @param username - string - required
    ## The database user to authenticate as.
    #
    username: <USERNAME>

    ## @param password - string - required
    ## The password of `username`.
    #
    password: <PASSWORD>

    ## @param use_hana_hostnames - boolean - optional - default: false
    ## Whether or not to use the hostnames contained in HANA's monitoring
    ## views instead of the Agent hostname.
    #
    # use_hana_hostnames: false

    ## @param batch_size - integer - optional - default: 1000
    ## The number of rows to return with each query result.
    #
    # batch_size: 1000

    ## @param timeout - integer - optional - default: 10
    ## The timeout for connecting to `server`.
    #
    # timeout: 10

    ## @param tags - list of key:value strings - optional
    ## List of tags to attach to every metric and service check emitted by this instance.
    ##
    ## Learn more about tagging at https://docs.datadoghq.com/tagging
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param use_global_custom_queries - string - optional - default: true
    ## How `global_custom_queries` should be used for this instance. There are 3 options:
    ##
    ## 1. true - `global_custom_queries` will override `custom_queries`
    ## 2. false - `custom_queries` will override `global_custom_queries`
    ## 2. extend - `global_custom_queries` will be used in addition to any `custom_queries`
    #
    # use_global_custom_queries: true

    ## @param custom_queries - list - optional
    ## Each query must have 2 fields:
    ##
    ## 1. query - This is the SQL to execute. It can be a simple statement or a multi-line script.
    ## 2. columns - This is a list representing each column, ordered sequentially from left to right.
    ##              The number of columns must equal the number of columns returned in the query.
    ##              There are 2 required pieces of data:
    ##                a. name - This is the suffix to append to `sap_hana.` in order to form
    ##                          the full metric name. If `type` is `tag`, this column will
    ##                          instead be considered a tag and will be applied to every
    ##                          metric collected by this particular query.
    ##                b. type - This is the submission method (gauge, monotonic_count, etc.).
    ##                          This can also be set to `tag` to tag each metric in the row
    ##                          with the name and value of the item in this column. You can
    ##                          use the `count` type to perform aggregation for queries that
    ##                          return multiple rows with the same or no tags.
    ## 3. tags (optional) - A list of tags to apply to each metric.
    #
    # custom_queries:
    #   - query: |  # Use the pipe if you require a multi-line script.
    #       SELECT DATABASE_NAME,
    #              COUNT(*)
    #       FROM SYS_DATABASES.M_DATA_VOLUMES
    #       GROUP BY DATABASE_NAME
    #     columns:
    #       # Columns without a name are ignored, put this for any column you wish to skip:
    #       # - {}
    #       - name: db
    #         type: tag
    #       - name: data_volume.total
    #         type: gauge
    #     tags:
    #       - test:sap_hana
