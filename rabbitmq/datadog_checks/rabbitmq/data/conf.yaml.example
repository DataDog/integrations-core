init_config:

instances:
  # for every instance a 'rabbitmq_api_url' must be provided, pointing to the api
  # url of the RabbitMQ Managment Plugin (http://www.rabbitmq.com/management.html)
  # optional: 'rabbitmq_user' (default: guest), 'rabbitmq_pass' (default: guest),
  # and 'tag_families' (default: false) to tag queue "families" based off of regex
  # matching.
  - rabbitmq_api_url: http://localhost:15672/api/
    rabbitmq_user: guest
    rabbitmq_pass: guest
    # The (optional) ssl_verify can be used to tell the check
    # to skip the verification of the SSL certificate of the
    # RabbitMQ management web endpoint.
    # This is mostly useful when checking SSL connections signed with
    # certificates that are not themselves signed by a public authority.
    # When false, the check logs a warning in collector.log
    # Defaults to true; set to false if you want to disable
    # SSL certificate verification.
    #
    # ssl_verify: false

    # If ssl_verify is turned on and the SSL cert is invalid, it can be very noisy. This will reduce the noise in the logs.
    #
    #  ignore_ssl_warning: false

    # The (optional) skip_proxy parameter would bypass any proxy settings enabled
    # and attempt to reach the the URL directly.
    # If no proxy is defined at any level, this flag bears no effect.
    # Defaults to False.
    #
    # skip_proxy: false

    # tag_families: true
    # Use the `nodes` or `nodes_regexes` parameters to specify the nodes you'd like to
    # collect metrics on (up to 100 nodes).
    # If you have less than 100 nodes, you don't have to set this parameter,
    # the metrics will be collected on all the nodes by default.
    #
    # nodes:
    #   - rabbit@localhost
    #   - rabbit2@domain
    # nodes_regexes:
    #   - bla.*

    # Use the `queues` or `queues_regexes` parameters to specify the queues you'd like to
    # collect metrics on (up to 200 queues).
    # If you have less than 200 queues, you don't have to set this parameter,
    # the metrics will be collected on all the queues by default.
    # If you have set up vhosts, set the queue names as `vhost_name/queue_name`.
    # If you have `tag_families` enabled, the first captured group in the regex
    # will be used as the queue_family tag
    #
    # queues:
    #   - queue1
    #   - queue2
    # queues_regexes:
    #   - thisqueue-.*
    #   - another_\d+queue
    #   - (lepidorae)-\d+   # to tag queues in the lepidorae queue_family
    
    # Use the `exchanges` or `exchanges_regexes` parameters to specify the exchanges you'd like to
    # collect metrics on (up to 50 exchanges).
    # If you have less than 50 exchanges, you don't have to set this parameter,
    # the metrics will be collected on all the exchanges by default.
    #
    # exchanges:
    #   - exchange1
    #   - exchange2
    # exchanges_regexes:
    #   - thisexchange-.*

    # Service checks and `rabbitmq.connections` metric:
    # By default a list of all vhosts is fetched and each one will be checked
    # using the aliveness API and the metric `rabbitmq.connections` will be collected.
    # If you prefer only certain vhosts to be monitored with service checks
    # and the number of `connections` then you can list the vhosts you care about.
    #
    # vhosts:
    #   - vhost1
    #   - vhost2

    # Optional tags to be applied to every emitted metric, service checks and events.
    # tags:
    #   - "key:value"
    #   - "instance:production"

## Log Section (Available for Agent >=6.0)
#logs:

    # - type : (mandatory) type of log input source (tcp / udp / file / docker)
    #   port / path : (mandatory) Set port if type is tcp or udp. Set path if type is file
    #   service : (mandatory) name of the service owning the log
    #   source : (mandatory) attribute that defines which integration is sending the logs
    #   sourcecategory : (optional) Multiple value attribute. Can be used to refine the source attribute
    #   tags: (optional) add tags to each logs collected

   # - type: file
   #   path: /var/log/rabbit/*.log
   #   source: rabbitmq
   #   service: myservice
   #   log_processing_rules:
   #     - type: multi_line
   #       name: logs_starts_with_equal_sign
   #       pattern: "="
