name: RabbitMQ
files:
- name: rabbitmq.yaml
  options:
  - template: init_config
    options:
    - template: init_config/http
    - template: init_config/default
  - template: instances
    description: |
      There are two versions of RabbitMQ (Prometheus plugin and Management plugin).
      Please do not edit sections pertaining to the version of RabbitMQ that you are not using.
    multiple_instances_defined: true
    options:
    - name: OpenMetrics
      description: RabbitMQ Prometheus Plugin Example
      options:
      - name: prometheus_plugin
        description: |
          Settings for talking to the Prometheus plugin of RabbitMQ.
          Specify this section to trigger metric collection from the Prometheus plugin endpoints.
        enabled: true
        options:
          - name: url
            enabled: true
            required: true
            description: |
              Base URL for OpenMetrics endpoints.
            value:
              type: string
              example: 'http://localhost:15692'
          - name: include_aggregated_endpoint
            description: |
              Whether or not to include metrics from the aggregated endpoint (/metrics).

              You can learn more about this endpoint here:
              https://www.rabbitmq.com/prometheus.html#default-endpoint

              Note: You must set this option to true if you do not specify the 'unaggregated_endpoint' option.
            value:
              type: boolean
              example: true
          - name: unaggregated_endpoint
            description: |
              Specify an endpoint without aggregation to collect more detailed metrics.

              For example, you can collect metrics tagged by queue or by exchange.
              These metrics are served from the /metrics/detailed endpoint.
              You can learn more about it here:
              https://www.rabbitmq.com/prometheus.html#detailed-endpoint

              For brevity, you only need to specify "detailed" to start using this endpoint.
              You can also provide a query exactly as if you were making an HTTP request
              to this endpoint. For example, `detailed?family=queue_consumer_count&family=node_metrics&vhost=myvhost`.

              You can specify both this and the aggregated endpoint.
              If you specify both endpoints, metrics from the unaggregated endpoint are prioritized
              over metrics from the aggregated endpoint in case of name clashes.
            value:
              type: string
              example: "detailed"
      - template: instances/openmetrics
        overrides:
          openmetrics_endpoint.required: false
          openmetrics_endpoint.hidden: true
    - name: RabbitMQ Management Plugin
      description: RabbitMQ Management Plugin Example
      options:
      - name: rabbitmq_api_url
        description: |
          For every instance a 'rabbitmq_api_url' must be provided, pointing to the api
          url of the RabbitMQ Management Plugin (http://www.rabbitmq.com/management.html).
        value:
          type: string
          example: http://localhost:15672/api/
      - name: tag_families
        description: To tag queue "families" based off of regex matching.
        value:
          type: boolean
          example: false
      - name: collect_node_metrics
        description: Node metrics are collected by default. Setting this parameter to false skips node metric collection.
        value:
          type: boolean
          example: true
      - name: nodes
        description: |
          Use the `nodes` parameters to specify the nodes you'd like to collect metrics on (up to 100 nodes).
        value:
          type: array
          items:
            type: string
          example:
            - <NODE_NAME_1>
            - <NODE_NAME_2>
      - name: nodes_regexes
        description: |
          Use the `nodes_regexes` parameters to specify which nodes you would like to
          collect using one or multiple Python regular expressions. The same limit applies as
          for the `nodes` field.
          For any named groups in your pattern the names of the groups are added as tag keys
          paired with the matched contents of the groups as tag values.
        value:
          type: array
          items:
            type: string
          example:
            - <REGEX>
      - name: queues
        description: |
          Use the `queues` parameters to specify the queues you'd like to collect metrics on (up to 200 queues).
        value:
          type: array
          items:
            type: string
          example:
            - <QUEUE_NAME_1>
            - <QUEUE_NAME_2>
      - name: queues_regexes
        description: |
          Use the `queues_regexes` parameters to specify which queues you would like to
          collect using one or multiple Python regular expressions. The same limit applies
          as for the `queues` field.
          If you have `tag_families` enabled, the first captured group in the pattern is used
          as the `queue_family` tag.
          Named groups in your pattern behave like in `nodes_regexes`.
          Your pattern is compared to queue names and queue names prefixed by vhost.
          For example, if you have a vhost named "myvhost" and a queue named "myqueue", your
          pattern is compared to:
            - myqueue
            - myvhost/myqueue
          If you have no vhost defined in this example, your pattern is compared to "/myqueue".
        value:
          type: array
          items:
            type: string
          example:
            - <REGEX>
      - name: exchanges
        description: |
          Use the `exchanges` parameters to specify the exchanges you'd like to collect metrics on (up to 50 exchanges).
        value:
          type: array
          items:
            type: string
          example:
            - <EXCHANGE_1>
            - <EXCHANGE_2>
      - name: exchanges_regexes
        description: |
          Use the `exchanges_regexes` parameters to specify which exchanges you would like to
          collect using one or multiple Python regular expressions. The same limit applies
          as for the `exchanges` field.
          If you have `tag_families` enabled, the first captured group in the pattern is used
          as the `exchange_family` tag.
          Named groups in your pattern behave like in `nodes_regexes`.
          Your pattern is compared to exchange names and exchange names prefixed by vhost.
          For example, if you have a vhost named "myvhost" and a exchange named "myexchange", your
          pattern is compared to:
            - myexchange
            - myvhost/myexchange
          If you have no vhost defined in this example, your pattern is compared to "/myexchange".
        value:
          type: array
          items:
            type: string
          example:
            - <REGEX>
      - name: vhosts
        description: |
          Service checks and `rabbitmq.connections` metric:
          By default a list of all vhosts is fetched and each one is checked using the aliveness
          API and the metric `rabbitmq.connections` is collected.
          If you prefer only certain vhosts to be monitored with service checks
          and the number of `connections` then you can list the vhosts you care about in this parameter.
        value:
          type: array
          items:
            type: string
          example:
            - <VHOST_NAME_1>
            - <VHOST_NAME_2>
  - template: logs
    example:
    - type: file
      path: /var/log/rabbitmq/*.log
      source: rabbitmq
      log_processing_rules:
        - type: multi_line
          name: logs_starts_with_equal_sign
          pattern: "="

- name: auto_conf.yaml
  options:
  - template: ad_identifiers
    overrides:
      value.example:
        - rabbitmq
  - template: init_config
    options: []
  - template: instances
    multiple_instances_defined: true
    options:
    - name: OpenMetrics
      description: RabbitMQ Prometheus Plugin Example
      options:
        - name: prometheus_plugin
          description: |
            Settings for talking to the Prometheus plugin of RabbitMQ.
            Specify this section to trigger metric collection from the Prometheus plugin endpoints.
          enabled: true
          options:
            - name: url
              enabled: true
              required: true
              description: |
                Base URL for OpenMetrics endpoints.
              value:
                type: string
                example: 'http://%%host%%:15692'
            - name: include_aggregated_endpoint
              description: |
                Whether or not to include metrics from the aggregated endpoint (/metrics).

                Note: This option must be set to true when 'unaggregated_endpoint' is unspecified.
              value:
                type: boolean
                example: true
            - name: unaggregated_endpoint
              description: |
                Which  unaggregated endpoint to use.
                The choices are:
                  - If the field is left unspecified, no endpoint is used.
                  - "detailed" means the /metrics/detailed endpoint is used.
                    You can also provide a query for this option, exactly as if you were making an HTTP request
                    to this endpoint. For example, `detailed?family=queue_consumer_count`.
                    You can specify this and the aggregated endpoint. In that case any duplicate metrics will
                    be taken from this endpoint and the corresponding aggregated ones dropped.
              value:
                type: string
                example: "detailed"
