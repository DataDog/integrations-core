init_config:

 ## @param custom_metrics - custom object - optional
 ## Collect custom metrics and send them to Datadog based on 
 ## your SQL server counters.
 ##
 ## See https://docs.datadoghq.com/integrations/guide/collect-sql-server-custom-metrics/
 #
 # custom_metrics:
 #   - name: sqlserver.clr.execution
 #     counter_name: CLR Execution


instances:
   
## Note: All '%' characters must be escaped as '%%'.

## @param host - string - required
## Host and port of your SQL server.
#
  - host: <HOST>,<PORT>

  ## @param apache_user - string - required
  ## Username for the Datadog-SQL server check user 
  #
    username: datadog

  ## @param apache_password - string - required
  ## Password for the Datadog-SQL server check user 
  #
    password: <PASSWORD>
  
  ## @param database - string - optional - default: master
  ## Database name to query
  # 
  #  database: master

  ## @param adoprovider - string - optional - default: SQLOLEDB
  ## Choose the ADO provider.  Note that the (default) provider
  ## SQLOLEDB is being deprecated.  To use the newer MSOLEDBSQL
  ## provider, set the adoprovider to "MSOLEDBSQL" below. You will also need
  ## to download the new provider from
  ## https://docs.microsoft.com/en-us/sql/connect/oledb/oledb-driver-for-sql-server?view=sql-server-2017
  #
  #  adoprovider: SQLOLEDB

  ## @param connector - string - optional - default: adodbapi  
  ## Change the connection method from adodbapi (the default) to
  ## odbc (valid connector names are 'odbc' and 'adodbapi')
  ## Note: 'adodbapi` is only available on Windows
  #
  #  connector: adodbapi

  ## @param adoprovider - string - optional - default: SQL Server
  ## If using odbc, use the named driver.
  # 
  #  driver: SQL Server

  ## @param dsn - string - optional
  ## If using odbc, configure a connection using a DSN.
  # 
  #  dsn: <DSN_NAME>
    
  ## @param connection_string - string - optional
  ## Specify a custom connection string to be used
  ## Ex: "ApplicationIntent=ReadWrite" or "MultiSubnetFailover=True"
  #
  #  connection_string: "<CONNECTION_STRING>"

  ## @param command_timeout - integer - optional - default: 30
  ## Timeout in seconds for the connection and each command run
  # 
  #  command_timeout: 30

  ## @param stored_procedure - string - optional
  ## Get metrics from custom proc in MyDB but only if the database is writable 
  ## (i.e. it's the master in an availability group) Note: Custom proc must be defined in its own instance 
  ## See https://docs.datadoghq.com/integrations/guide/collect-sql-server-custom-metrics/
  #
  #  stored_procedure: <PROCEDURE_NAME>

  ## @param proc_only_if - string - optional
  ## Run this SQL before each call to `stored_procedure`. Only if it returns 1 then call the proc.
  # 
  #  proc_only_if: <SQL_QUERY>

  ## @param proc_only_if_database - string - optional - default: master
  ## The database to run the `proc_only_if` SQL in.
  #
  #  proc_only_if_database: master

  ## @param ignore_missing_database - boolean - optional - default: false
  ## If the DB specified doesn't exist on the server then don't do the check
  #
  #  ignore_missing_database: false

  ## @param tags  - list of key:value elements - optional
  ## List of tags to attach to every metric, event and service check emitted by this integration.
  ##
  ## Learn more about tagging: https://docs.datadoghq.com/tagging/
  #
  #  tags:
  #    - <KEY_1>:<VALUE_1>
  #    - <KEY_2>:<VALUE_2>