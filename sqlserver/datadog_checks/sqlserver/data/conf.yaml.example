init_config:
  #
  # By default, we only capture *some* of the metrics available in the
  # `sys.dm_os_performance_counters` table. You can easily add additional
  # metrics by following the custom_metrics structure shown below.
  #
  # In order to connect to SQL Server either enable SQL Authentication and
  # specify a username or password below. If you do not specify a username
  # or password then we will connect using integrated authentication.
  #
  # custom_metrics:

    # This is a basic custom metric. There is not instance associated with
    # this counter.
    #
    # - name: sqlserver.clr.execution
    #   counter_name: CLR Execution

    # The counter_name field uses the counter name of SQL server database objects
    # https://docs.microsoft.com/en-us/sql/relational-databases/performance-monitor/sql-server-databases-object

    # This counter has multiple instances associated with it and we're
    # choosing to only fetch the 'Cumulative execution time (ms) per second' instance.
    #
    # - name: sqlserver.exec.in_progress
    #   counter_name: OLEDB calls
    #   instance_name: Cumulative execution time (ms) per second

    # This counter has multiple instances associated with it and we want
    # every instance available. We'll use the special case ALL instance
    # which *requires* a value for "tag_by". In this case, we'll get metrics
    # tagged as "db:mydb1", "db:mydb2".
    #
    # - name: sqlserver.db.commit_table_entries
    #   counter_name: Commit table entries
    #   instance_name: ALL
    #   tag_by: db

    # the default table from which counters are drawn is the sys.dm_os_performance_counters
    # table.  This integration also supports 
    #  sys.dm_os_wait_stats
    #  sys.dm_os_memory_clerks
    #  sys.dm_io_virtual_file_stats

    # to report a metric drawn from one of the additional tables, specify the table in
    # the counter definition, as well as the counter columns to be reported
    
    # - name: sqlserver.LCK_M_S
    #   table: sys.dm_os_wait_stats
    #   counter_name: LCK_M_S
    #   columns:
    #     - max_wait_time_ms
    #     - signal_wait_time_ms
    #
    # will report two metrics, sqlserver.LCK_M_S.max_wait_time.ms and sqlserver.LCK_M_S.signal_wait_time_ms

    # sys.dm_io_virtual_file_stats and sys.dm_os_memory_clerks are not associated with a counter_name
    # only the columns need to be specified

    # - name: sqlserver.io_file_stats
    #   table: sys.dm_io_virtual_file_stats
    #   columns:
    #   - num_of_reads
    #   - num_of_writes
    # will report two metrics, sqlserver.io_file_stats.num_of_reads and sqlserver.io_file_stats.num_of_writes
    # each will be tagged with the database id and file id.

    # As well as capturing from the DMV you can also capture from a custom proc
    # Please note this feature will produce a number of custom metrics that might affect your billing
    # This feature is also only available when using the adodbapi driver (set by default)
    # To use this feature, specify in your instance the procedure to execute : 
    # stored_procedure: ProcedureToExecute
    #
    # The proc should return this table
    # CREATE TABLE #Datadog
    # (
    # 	[metric] varchar(255) not null,
    # 	[type] varchar(50) not null,
    # 	[value] float not null,
    # 	[tags] varchar(255)
    # )
    #
    # NOTE: SET NOCOUNT to ON inside proc to avoid extra resultsets that prevent valid query results
    # 
    # You can also specify:
    # ignore_missing_database : if DB doesn't exist on the server then don't do the check. Default False
    # proc_only_if : run this SQL before each call to stored_procedure. Only if it returns 1 then call the proc
    # proc_only_if_database : the database to run the proc_only_if SQL in. Optional. 
    #                         Defaults to database attribute
    #
    # The proc_only_if guard condition is useful for HA scenarios where a database can move between servers.

instances:
   # All '%' characters must be escaped as '%%'.

  - host: HOST,PORT

    # Optional. Choose the ADO provider.  Note that the (default) provider 
    # SQLOLEDB is being deprecated.  To use the newer MSOLEDBSQL
    # provider, set the adoprovider to "MSOLEDBSQL" below.  You will also need 
    # to download the new provider from
    # https://docs.microsoft.com/en-us/sql/connect/oledb/oledb-driver-for-sql-server?view=sql-server-2017

    # adoprovider: MSOLEDBSQL

    # Optional, change the connection method from adodbapi (the default) to
    # odbc (valid connector names are 'odbc' and 'adodbapi')
    # odbc is only available on Windows
    # connector: odbc

    # Optional, if using odbc, use the named driver.  If none is specified,
    # the 'SQL Server' driver will be used
    # driver: SQL Server

    # Optional, if using odbc, configure a connection using a DSN
    # dsn: DSN_NAME
    username: my_username
    password: my_password

    # Optional, specify a custom connection string to be used
    # Ex: "ApplicationIntent=ReadWrite" or "MultiSubnetFailover=True"
    # connection_string: "my_connection_string"
    
    # Optional, timeout in seconds for the connection and each command run
    # command_timeout: 30
    # database: my_database # Optional, defaults to "master"
    tags:
      - optional_tag

  # Get metrics from custom proc in MyDB but only if the database is writeable (i.e. it's the master in an availability group)
  # Note: Custom proc must be defined in its own instance

  # - host: HOST,PORT
  #   database: MyDB
  #   username: my_username
  #   password: my_password
  #   stored_procedure: GetDatadogMetrics
  #   proc_only_if: SELECT CASE CONVERT(sysname,DatabasePropertyEx('MyDB','Updateability')) WHEN 'READ_WRITE' THEN 1 ELSE 0 END
  #   proc_only_if_database: master
  #   ignore_missing_database: True 
