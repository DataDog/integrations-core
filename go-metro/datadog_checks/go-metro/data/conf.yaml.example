## NOTE: for go metro to run unprivileged, you will have to set CAP_NET_RAW capabilities on the binary:
##        (debian based) $ sudo apt-get install libcap
##        (debian based - alternatively) $ sudo apt-get install libcap2-bin
##        (redhat based) $ sudo yum install libcap
##        (redhat based - alternatively) $ sudo yum install compat-libcap1
##        $ sudo setcap cap_net_raw+ep /opt/datadog-agent/bin/go-metro
##
##        Because of different package names for different distros, if the instructions above
##        don't work for you, please issue an `apt-cache search libcap` or `yum search libcap` and you
##        should get a shortlist of packages that might provide the binary. Feel free to reach out
##        should you require assistance.
##
##        Also, please note that go-metro logs to its own file - found in /var/log/datadog/go-metro.log.
##        Additionally, go-mtro runs standalone so it will *NOT* currently appear on the agent's info page.
##
##        Finally, because the go-metro binary is only bundled with the 64-bit RPM and DEB distributions of the
##        datadog-agent, it is only available in those packaged versions (ie. go-metro is currently
##        unavailable with the source install or the 32-bit packages).

init_config:

  ## @param snaplen - integer - required
  ## should be >=104 (to accomodate for the largest possible TCP header)
  #
  snaplen: 512
  
  ## @param idle_ttl - integer - required
  ## Time after which an idle flow (no traffic received) is flushed.
  #
  idle_ttl: 300
    
  ## @param exp_ttl - integer - required
  ## Time after which a finished flow is flushed.
  #
  exp_ttl: 60
    
  ## @param statsd_ip - string - required
  ## StatsD IP.
  #
  statsd_ip: 127.0.0.1
  
  ## @param statsd_port - integer - required
  ## StatsD Port.
  #
  statsd_port: 8125
    
  ## @param log_to_file - boolean - required
  ## Whether or not this check should log in the Agent log file.
  #
  log_to_file: true
  
  ## @param log_level - string - required
  ## Minimum level of logs logged by this check.
  ## available levels: trace, debug, info, warning, error, critical
  #
  log_level: info

instances:

  ## @param interface - string - required
  ## Name of the interface to sniff from.
  #
  - interface: eth0

  ## @param ips - list of strings - required
  ## Whitelist by IP - The check performs name lookup and tag with hostname if available.
  ## Which avoid having go-metro inspect every incoming/outgoing packet through the interface.
  # 
    ips: 
      - <IP>

  ## @param hosts - list of strings - required
  ## Whitelist by hostname - The check performs ip lookup and filter by hosts ip's
  ## Which avoid having go-metro inspect every incoming/outgoing packet through the interface. 
  #
    hosts:
      - <HOSTNAME>

  ## @param tags  - list of key:value string - optional
  ## List of tags to attach to every metric and service check emitted by this integration.
  ##
  ## Learn more about tagging at https://docs.datadoghq.com/tagging
  #
  #  tags:
  #    - <KEY_1>:<VALUE_1>
  #    - <KEY_2>:<VALUE_2>
