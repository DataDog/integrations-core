## All options defined here are available to all instances.
#
init_config:

    ## @param global_custom_queries - list of mappings - optional
    ## See `custom_queries` defined below.
    ##
    ## Global custom queries can be applied to all instances using the
    ## `use_global_custom_queries` setting at the instance level.
    #
    # global_custom_queries:
    #   - metric_prefix: mysql
    #     query: <QUERY>
    #     columns: <COLUMNS>
    #     tags: <TAGS>

    ## @param service - string - optional
    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.
    ##
    ## Additionally, this sets the default `service` for every log source.
    #
    # service: <SERVICE>

## Every instance is scheduled independent of the others.
#
instances:

    ## @param host - string - optional
    ## MySQL host to connect to.
    ## NOTE: Even if the host is "localhost", the agent connects to MySQL using TCP/IP, unless you also
    ## provide a value for the sock key (below).
    #
  - host: localhost

    ## @param user - string - optional
    ## Username used to connect to MySQL.
    #
    user: datadog

    ## @param pass - string - optional
    ## Password associated to the MySQL user.
    #
    pass: <PASS>

    ## @param port - number - optional - default: 3306
    ## Port to use when connecting to MySQL.
    #
    port: 3306

    ## @param sock - string - optional
    ## Path to a Unix Domain Socket to use when connecting to MySQL (instead of a TCP socket).
    ## If you specify a socket you dont need to specify a host.
    #
    # sock: <SOCK>

    ## @param charset - string - optional
    ## Charset you want to use.
    #
    # charset: utf8

    ## @param defaults_file - string - optional
    ## Path to an alternative configuration mechanism file.
    ## If providing this then there is no need to specify host, port, user, pass or socket.
    #
    # defaults_file: <DEFAULTS_FILE>

    ## @param connect_timeout - number - optional - default: 10
    ## Maximum number of seconds to wait before timing out when connecting to MySQL.
    #
    # connect_timeout: 10

    ## @param ssl - mapping - optional
    ## Use this section to configure a TLS connection between the Agent and MySQL.
    ##
    ## The following fields are supported:
    ##
    ## key: Path to a key file.
    ## cert: Path to a cert file.
    ## ca: Path to a CA bundle file.
    #
    # ssl:
    #   key: <KEY_FILE_PATH>
    #   cert: <CERT_FILE_PATH>
    #   ca: <CA_PATH_FILE>

    ## @param use_global_custom_queries - string - optional - default: true
    ## How `global_custom_queries` should be used for this instance. There are 3 options:
    ##
    ## 1. true - `global_custom_queries` override `custom_queries`.
    ## 2. false - `custom_queries` override `global_custom_queries`.
    ## 3. extend - `global_custom_queries` are used in addition to any `custom_queries`.
    #
    # use_global_custom_queries: 'true'

    ## @param custom_queries - list of mappings - optional
    ## Each query must have 2 fields, and can have a third optional field:
    ##
    ## 1. query - The SQL to execute. It can be a simple statement or a multi-line script.
    ##            Use the pipe `|` if you require a multi-line script.
    ## 2. columns - The list representing each column, ordered sequentially from left to right.
    ##              The number of columns must equal the number of columns returned in the query.
    ##              There are 2 required pieces of data:
    ##                a. name - The suffix to append to `<INTEGRATION>.` to form
    ##                          the full metric name. If `type` is `tag`, this column is
    ##                          considered a tag and applied to every
    ##                          metric collected by this particular query.
    ##                b. type - The submission method (gauge, monotonic_count, etc.).
    ##                          This can also be set to `tag` to tag each metric in the row
    ##                          with the name and value of the item in this column. You can
    ##                          use the `count` type to perform aggregation for queries that
    ##                          return multiple rows with the same or no tags.
    ##              Columns without a name are ignored. To skip a column, enter:
    ##                - {}
    ## 3. tags (optional) - A list of tags to apply to each metric.
    #
    # custom_queries:
    #   - query: SELECT foo, COUNT(*) FROM table.events GROUP BY foo
    #     columns:
    #     - name: foo
    #       type: tag
    #     - name: event.total
    #       type: gauge
    #     tags:
    #     - test:mysql

    ## @param max_custom_queries - integer - optional - default: 20
    ## Set the maximum number of custom queries to execute with this integration.
    ##
    ## WARNING: This only applies to the deprecated `queries` option.
    #
    # max_custom_queries: 20

    ## @param queries - list of mappings - optional
    ## Define custom queries to collect custom metrics from your MySQL database.
    ##
    ## See https://docs.datadoghq.com/integrations/faq/how-to-collect-metrics-from-custom-mysql-queries to learn more.
    ##
    ## WARNING: This option is deprecated and will be removed in a future release.
    ## Use the `custom_queries` option instead.
    #
    # queries:
    #   - query: <QUERY>
    #     metric: <METRIC_NAME>
    #     tags:
    #     - <METRIC_TAG_KEY>:<METRIC_TAG_VALUE>
    #     type: <METRIC_TYPE>
    #     field: <FIELD_NAME>

    ## Enable options to collect extra metrics from your MySQL integration.
    #
    options:

        ## @param replication - boolean - optional - default: false
        ## Set to `true` to collect replication metrics.
        #
        # replication: false

        ## @param replication_channel - string - optional
        ## If using multiple sources, set the channel name to monitor.
        #
        # replication_channel: <REPLICATION_CHANNEL>

        ## @param replication_non_blocking_status - boolean - optional - default: false
        ## Set to `true` to grab slave count in a non-blocking manner (requires `performance_schema`);
        #
        # replication_non_blocking_status: false

        ## @param galera_cluster - boolean - optional - default: false
        ## Set to `true` to collect Galera cluster metrics.
        #
        # galera_cluster: false

        ## @param extra_status_metrics - boolean - optional - default: false
        ## Set to `true` to enable extra status metrics.
        ##
        ## See also the MySQL metrics listing: https://docs.datadoghq.com/integrations/mysql/#metrics
        #
        # extra_status_metrics: false

        ## @param extra_innodb_metrics - boolean - optional - default: false
        ## Set to `true` to enable extra InnoDB metrics.
        ##
        ## See also the MySQL metrics listing: https://docs.datadoghq.com/integrations/mysql/#metrics
        #
        # extra_innodb_metrics: false

        ## @param disable_innodb_metrics - boolean - optional - default: false
        ## Set to `true` only if experiencing issues with older (unsupported) versions of MySQL
        ## that do not run or have InnoDB engine support.
        ##
        ## If this flag is enabled, you will only receive a small subset of metrics.
        ##
        ## see also the MySQL metrics listing: https://docs.datadoghq.com/integrations/mysql/#metrics
        #
        # disable_innodb_metrics: false

        ## @param schema_size_metrics - boolean - optional - default: false
        ## Set to `true` to collect schema size metrics.
        ##
        ## Note that this runs a heavy query against your database to compute the relevant metrics
        ## for all your existing schemas. Due to the nature of these calls, if you have a
        ## high number of tables and schemas, this may have a negative impact on your database performance.
        ##
        ## See also the MySQL metrics listing: https://docs.datadoghq.com/integrations/mysql/#metrics
        #
        # schema_size_metrics: false

        ## @param extra_performance_metrics - boolean - optional - default: false
        ## These metrics are reported if `performance_schema` is enabled in the MySQL instance
        ## and if the version for that instance is >= 5.6.0.
        ##
        ## Note that this runs a heavy query against your database to compute the relevant metrics
        ## for all your existing schemas. Due to the nature of these calls, if you have a
        ## high number of tables and schemas, this may have a negative impact on your database performance.
        ##
        ## Metrics provided by the options:
        ##   - mysql.info.schema.size (per schema)
        ##   - mysql.performance.query_run_time.avg (per schema)
        ##   - mysql.performance.digest_95th_percentile.avg_us
        ##
        ## Note that some of these require the `user` defined for this instance
        ## to have PROCESS and SELECT privileges. Take a look at the
        ## MySQL integration tile in the Datadog Web UI for further instructions.
        #
        # extra_performance_metrics: false

    ## @param deep_database_monitoring - boolean - optional - default: false
    ## Set to `true` to enable the ALPHA features for Deep Database Monitoring.
    ##
    ## If you would like to hear more about Deep Database Monitoring, please reach out to your customer
    ## success manager or Datadog support.
    #
    # deep_database_monitoring: false

    ## @param tags - list of strings - optional
    ## A list of tags to attach to every metric and service check emitted by this instance.
    ##
    ## Learn more about tagging at https://docs.datadoghq.com/tagging
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param service - string - optional
    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.
    ##
    ## Overrides any `service` defined in the `init_config` section.
    #
    # service: <SERVICE>

    ## @param min_collection_interval - number - optional - default: 15
    ## This changes the collection interval of the check. For more information, see:
    ## https://docs.datadoghq.com/developers/write_agent_check/#collection-interval
    #
    # min_collection_interval: 15

    ## @param empty_default_hostname - boolean - optional - default: false
    ## This forces the check to send metrics with no hostname.
    ##
    ## This is useful for cluster-level checks.
    #
    # empty_default_hostname: false

## Log Section
##
## type - required - Type of log input source (tcp / udp / file / windows_event)
## port / path / channel_path - required - Set port if type is tcp or udp.
##                                         Set path if type is file.
##                                         Set channel_path if type is windows_event.
## source  - required - Attribute that defines which Integration sent the logs.
## encoding - optional - For file specifies the file encoding, default is utf-8, other
##                       possible values are utf-16-le and utf-16-be.
## service - optional - The name of the service that generates the log.
##                      Overrides any `service` defined in the `init_config` section.
## tags - optional - Add tags to the collected logs.
##
## Discover Datadog log collection: https://docs.datadoghq.com/logs/log_collection/
#
# logs:
#   - type: file
#     path: <GENERAL_LOG_FILE_PATH>
#     source: mysql
#     log_processing_rules:
#     - type: multi_line
#       name: new_log_start_with_date
#       pattern: \d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])
#     - type: multi_line
#       name: new_logs_do_not_always_start_with_timestamp
#       pattern: \t\t\s*\d+\s+|\d{6}\s+\d{,2}:\d{2}:\d{2}\t\s*\d+\s+
#   - type: file
#     path: <ERROR_LOG_FILE_PATH>
#     source: mysql
#   - type: file
#     path: <SLOW_QUERY_LOG_FILE_PATH>
#     source: mysql
#     log_processing_rules:
#     - type: multi_line
#       name: new_slow_query_log_entry
#       pattern: '# Time:'
#     - type: multi_line
#       name: mysqld_log_short_format_new_slow_query_log_entry
#       pattern: '# Query_time:'
