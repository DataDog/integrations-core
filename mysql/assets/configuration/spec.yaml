name: MySQL
files:
  - name: mysql.yaml
    options:
      - template: init_config
        options:
          - name: propagate_agent_tags
            description: |
              Set to `true` to propagate the tags from `datadog.yaml` to the check.
              When set to `true`, the tags from `datadog.yaml` are added to the check's tags for all instances.
            value:
              example: false
              type: boolean
          - template: init_config/db
            overrides:
              global_custom_queries.value.example:
                - query: <QUERY>
                  columns: <COLUMNS>
                  tags: <TAGS>
          - template: init_config/default

      - template: instances
        options:
          - name: host
            description: |
              MySQL host to connect to.
              NOTE: Even if the host is "localhost", the agent connects to MySQL using TCP/IP, unless you also
              provide a value for the sock key (below).
            enabled: true
            value:
              type: string
              example: localhost
              display_default: null

          - name: username
            description: |
              Username used to connect to MySQL.
            enabled: true
            value:
              type: string
              example: datadog
              display_default: null

          - name: password
            description: |
              Password associated to the MySQL user.
            enabled: true
            value:
              type: string

          - name: port
            description: |
              Port to use when connecting to MySQL.
            enabled: true
            value:
              type: number
              example: 3306

          - name: propagate_agent_tags
            description: |
              Set to `true` to propagate the tags from `datadog.yaml` to the check.
              When set to `true`, the tags from `datadog.yaml` are added to the check's tags for all instances.
            value:
              example: false
              type: boolean

          - name: reported_hostname
            description: |
              Set the reported hostname for this instance. This value overrides the hostname detected by the Agent
              and can be useful to set a custom hostname when connecting to a remote database through a proxy.
            value:
              type: string

          - name: sock
            description: |
              Path to a Unix Domain Socket to use when connecting to MySQL (instead of a TCP socket).
              If you specify a socket you dont need to specify a host.
            value:
              type: string
          - name: charset
            description: Charset you want to use.
            value:
              type: string
              example: utf8
              display_default: null
          - name: defaults_file
            description: |
              Path to an alternative configuration mechanism file.
              If providing this then there is no need to specify host, port, user, pass or socket.
            value:
              type: string

          - name: connect_timeout
            description: |
              Maximum number of seconds to wait before timing out when connecting to MySQL.
              The default connection timeout is 10 seconds.
            value:
              type: number
              example: 10

          - name: read_timeout
            description: |
              The timeout for reading from the connection in seconds.
              By default, no read timeout is set.
            value:
              type: number
              example: 10
              display_default: null

          - name: ssl
            description: |
              Use this section to configure a TLS connection between the Agent and MySQL.

              The following fields are supported:

              key: Path to a key file.
              cert: Path to a cert file.
              ca: Path to a CA bundle file.
              check_hostname: Set to false to ignore the strict relationship between the certificate and the hostname.
            value:
              type: object
              properties:
                - name: key
                  type: string
                - name: cert
                  type: string
                - name: ca
                  type: string
                - name: check_hostname
                  type: boolean
              example:
                key: <KEY_FILE_PATH>
                cert: <CERT_FILE_PATH>
                ca: <CA_PATH_FILE>
                check_hostname: true
          - template: instances/db
            overrides:
              custom_queries.value.example:
                - query: "SELECT foo, COUNT(*) FROM table.events GROUP BY foo"
                  columns:
                    - name: foo
                      type: tag
                    - name: event.total
                      type: gauge
                  tags:
                    - test:mysql
                  metric_prefix: mysql
          - name: additional_status
            description: |
              Set this parameter to collect additional MySQL status variables as metrics
              from "SHOW GLOBAL STATUS"
              See MySQL documentation for available variables: https://dev.mysql.com/doc/refman/8.0/en/show-status.html

              The following fields are supported:

              name : MySQL status name on "SHOW GLOBAL STATUS"
              metric_name : metric name
              type : gauge | rate | count | ...
            value:
              type: array
              items:
                type: object
              example:
                - name: innodb_rows_read
                  metric_name: mysql.innodb.rows_read
                  type: rate

          - name: additional_variable
            description: |
              Set this parameter to collect additional MySQL variables as metrics
              from "SHOW GLOBAL VARIABLES"
              See MySQL documentation for available variables: https://dev.mysql.com/doc/refman/8.0/en/show-variables.html

              The following fields are supported:

              name : MySQL variable name on "SHOW GLOBAL VARIABLES"
              metric_name : metric name
              type : gauge | rate | count | ...
            value:
              type: array
              items:
                type: object
              example:
                - name: long_query_time
                  metric_name: mysql.performance.long_query_time
                  type: gauge

          - name: max_custom_queries
            description: |
              Set the maximum number of custom queries to execute with this integration.

              WARNING: This only applies to the deprecated `queries` option.
            value:
              type: integer
              example: 20

          - name: queries
            description: |
              Define custom queries to collect custom metrics from your MySQL database.

              See https://docs.datadoghq.com/integrations/guide/mysql-custom-queries to learn more.

              WARNING: This option is deprecated and will be removed in a future release.
              Use the `custom_queries` option instead.
            value:
              type: array
              items:
                type: object
              example:
                - query: <QUERY>
                  metric: <METRIC_NAME>
                  tags:
                    - <METRIC_TAG_KEY>:<METRIC_TAG_VALUE>
                  type: <METRIC_TYPE>
                  field: <FIELD_NAME>

          - name: options
            description: |
              Enable options to collect extra metrics from your MySQL integration.

            options:
              - name: replication
                description: |
                  Set to `true` to collect replication metrics or group replication metrics.
                  These metrics are only collected from the specified `host`. If you want to collect replication metrics
                  from the source or primary node and the replica or secondary nodes you need to set separate check
                  instances to collect them.
                  Defaults to `true` when `dbm` is enabled.

                value:
                  type: boolean
                  example: false
                  display_default: null

              - name: replication_channel
                description: |
                  If using multiple sources, set the channel name to monitor.
                value:
                  type: string

              - name: replication_non_blocking_status
                description: |
                  Set to `true` to grab slave count in a non-blocking manner (requires `performance_schema`);
                value:
                  type: boolean
                  example: false

              - name: galera_cluster
                description: |
                  Set to `true` to collect Galera cluster metrics.
                value:
                  type: boolean
                  example: false

              - name: extra_status_metrics
                description: |
                  Set to `true` to enable extra status metrics.
                  Defaults to `true` when `dbm` is enabled.

                  See also the MySQL metrics listing: https://docs.datadoghq.com/integrations/mysql/#metrics
                value:
                  type: boolean
                  example: false
                  display_default: null

              - name: extra_innodb_metrics
                description: |
                  Set to `true` to enable extra InnoDB metrics.

                  See also the MySQL metrics listing: https://docs.datadoghq.com/integrations/mysql/#metrics
                value:
                  type: boolean
                  example: false

              - name: disable_innodb_metrics
                description: |
                  Set to `true` only if experiencing issues with older (unsupported) versions of MySQL
                  that do not run or have InnoDB engine support.

                  If this flag is enabled, you will only receive a small subset of metrics.

                  see also the MySQL metrics listing: https://docs.datadoghq.com/integrations/mysql/#metrics
                value:
                  type: boolean
                  example: false

              - name: schema_size_metrics
                description: |
                  Set to `true` to collect schema size metrics.

                  Note that this runs a heavy query against your database to compute the relevant metrics
                  for all your existing schemas. Due to the nature of these calls, if you have a
                  high number of tables and schemas, this may have a negative impact on your database performance.
                  Only tables and schemas for which the user has been granted SELECT privileges are collected.

                  See also the MySQL metrics listing: https://docs.datadoghq.com/integrations/mysql/#metrics
                value:
                  type: boolean
                  example: false

              - name: table_size_metrics
                description: |
                  Set to `true` to collect data table size metrics.
                  Note that only tables and schemas for which the user has been granted SELECT privileges are collected.
                  This runs a heavy query against your database to compute the relevant metrics
                  for all your existing tables. Due to the nature of these calls, if you have a
                  high number of tables and schemas, this may have a negative impact on your database performance.
                  See also the MySQL metrics listing: https://docs.datadoghq.com/integrations/mysql/#metrics
                value:
                  type: boolean
                  example: false

              - name: system_table_size_metrics
                description: |
                  Set to `true` to collect system table size metrics from performance_schema, information_schema and mysql.
                  Note that only tables and schemas for which the user has been granted SELECT privileges are collected.
                  This runs a heavy query against your database to compute the relevant metrics
                  for all your existing tables. Due to the nature of these calls, if you have a
                  high number of tables and schemas, this may have a negative impact on your database performance.
                  See also the MySQL metrics listing: https://docs.datadoghq.com/integrations/mysql/#metrics
                value:
                  type: boolean
                  example: false

              - name: table_rows_stats_metrics
                description: |
                  These metrics are reported if you have a Percona MySQL instance with `userstat` enabled
                  Set to `true` to collect table stats metrics.
                  Metrics provided by the options:
                    - mysql.info.table.rows.read (total per table)
                    - mysql.info.table.rows.changed (total per table)
                  Note that this runs a heavy query against your database to compute the relevant metrics
                  for all your existing tables. Due to the nature of these calls, if you have a
                  high number of tables and schemas, this may have a negative impact on your database performance.
                  See also the MySQL metrics listing: https://docs.datadoghq.com/integrations/mysql/#metrics
                value:
                  type: boolean
                  example: false

              - name: extra_performance_metrics
                description: |
                  These metrics are reported if `performance_schema` is enabled in the MySQL instance
                  and if the version for that instance is >= 5.6.0.

                  Note that this runs a heavy query against your database to compute the relevant metrics
                  for all your existing schemas. Due to the nature of these calls, if you have a
                  high number of tables and schemas, this may have a negative impact on your database performance.

                  Metrics provided by the options:
                    - mysql.info.schema.size (per schema)
                    - mysql.performance.query_run_time.avg (per schema)
                    - mysql.performance.digest_95th_percentile.avg_us

                  Note that some of these require the `user` defined for this instance
                  to have PROCESS and SELECT privileges. Take a look at the
                  MySQL integration tile in the Datadog Web UI for further instructions.
                value:
                  type: boolean
                  example: false

          - name: dbm
            description: |
              Set to `true` enable Database Monitoring.
            enabled: false
            value:
              type: boolean
              example: false
              display_default: false
          - name: collect_settings
            description: Configure collection of performance_schema.global_variables.
            options:
              - name: enabled
                description: |
                  Enable collection of performance_schema.global_variables. Requires `dbm: true`.
                value:
                  type: boolean
                  example: false
              - name: collection_interval
                description: |
                  Set the database settings collection interval (in seconds). Each collection involves a single query to
                  `performance_schema.global_variables`.
                value:
                  type: number
                  example: 600
          - name: schemas_collection 
            hidden: true
            description: |
              Configure collection of schemas (databases).
            options:
              - name: enabled
                description: |
                  Enable schema collection. Requires `dbm: true`. Defaults to false.
                value:
                  type: boolean
                  example: false
              - name: collection_interval
                description: |
                  Set the database schema collection interval (in seconds). Defaults to 600 seconds.
                value:
                  type: number
                  example: 600
              - name: max_execution_time
                description: |
                  Set the maximum time for schema collection (in seconds). Defaults to 60 seconds. 
                  Capped by `schemas_collection.collection_interval`
                value:
                  type: number
                  example: 60
          - name: query_metrics
            description: Configure collection of query metrics
            options:
              - name: enabled
                description: |
                  Enable collection of query metrics. Requires `dbm: true`.
                value:
                  type: boolean
                  example: true
              - name: collection_interval
                description: |
                  Set the query metric collection interval (in seconds). Each collection involves a single query to
                  `pg_stat_statements`. If a non-default value is chosen then that exact same value must be used for *every*
                  check instance. Running different instances with different collection intervals is not supported.
                value:
                  type: number
                  example: 10
          - name: query_samples
            description: Configure collection of query samples
            options:
              - name: enabled
                description: |
                  Enables collection of query samples. Requires `dbm: true`.
                value:
                  type: boolean
                  example: true
              - name: collection_interval
                description: |
                  Sets the query sample collection interval (in seconds). Each collection involves a single query to one
                  of the `performance_schema.events_statements_*` tables, followed by at most one `EXPLAIN` query per
                  unique statement seen.
                value:
                  type: number
                  example: 1
              - name: explained_queries_per_hour_per_query
                description: |
                  Sets the rate limit for how many execution plans will be collected per hour per normalized query.
                value:
                  type: integer
                  example: 60
              - name: samples_per_hour_per_query
                description: |
                  Sets the rate limit for how many statement sample events will be ingested per hour per normalized
                  execution plan.
                value:
                  type: integer
                  example: 15
              - name: explained_queries_cache_maxsize
                description: |
                  Sets the max size of the cache used for the explained_queries_per_hour_per_query rate limit. This
                  should be increased for databases with a very large number of unique normalized queries which exceed the
                  cache's limit.
                value:
                  type: integer
                  example: 5000
              - name: seen_samples_cache_maxsize
                description: |
                  Sets the max size of the cache used for the samples_per_hour_per_query rate limit. This should be
                  increased for databases with a very large number of unique normalized execution plans which exceed the
                  cache's limit.
                value:
                  type: integer
                  example: 10000
              - name: events_statements_row_limit
                description: |
                  Sets the maximum number of rows to read out from a `performance_schema.events_statements_*` table during
                  a single collection.
                value:
                  type: integer
                  example: 5000
              - name: explain_procedure
                description: |
                  Overrides the default procedure used for collecting execution plans. The agent will use this
                  procedure in each schema where it exists: `{schema}.explain_statement({statement})`.
                value:
                  type: string
                  example: explain_statement
              - name: fully_qualified_explain_procedure
                description: |
                  Overrides the default fully qualified explain procedure used for collecting execution plans for
                  statements sent from connections that do not have a default schema configured.
                value:
                  type: string
                  example: datadog.explain_statement
              - name: events_statements_enable_procedure
                description: |
                  Overrides the default procedure used for enabling events statements consumers.
                value:
                  type: string
                  example: datadog.enable_events_statements_consumers
              - name: events_statements_temp_table_name
                description: |
                  Overrides the default fully qualified name for the temp table the agent creates while collecting
                  samples.
                value:
                  type: string
                  example: datadog.temp_events
              - name: collection_strategy_cache_maxsize
                description: |
                  Sets the max size of the cache used for caching collection strategies. This value should be increased
                  to be at least as many as the number of unique schemas that are being monitored.
                value:
                  type: integer
                  example: 1000
              - name: collection_strategy_cache_ttl
                description: |
                  Sets how long to cache collection strategies. This should only be decreased if the set of enabled
                  `events_statements_*` tables changes frequently enough to cause stale strategies to return empty
                  results for an extended period of time.
                value:
                  type: integer
                  example: 300
          - name: query_activity
            description: Configure collection of active sessions monitoring
            options:
              - name: enabled
                description: |
                  Enable collection of active sessions. Requires `dbm: true`.
                value:
                  type: boolean
                  example: true
              - name: collection_interval
                description: |
                  Set the activity collection interval (in seconds).
                value:
                  type: number
                  example: 10
          - name: aws
            description: |
              This block defines the configuration for AWS RDS and Aurora instances.

              Complete this section if you have installed the Datadog AWS Integration
              (https://docs.datadoghq.com/integrations/amazon_web_services) to enrich instances
              with MySQL integration telemetry.

              These values are only applied when `dbm: true` option is set.
            options:
              - name: instance_endpoint
                description: |
                  Equal to the Endpoint.Address of the instance the agent is connecting to.
                  This value is optional if the value of `host` is already configured to the instance endpoint.

                  For more information on instance endpoints,
                  see the AWS docs https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Endpoint.html
                value:
                  type: string
                  example: mydb.cfxgae8cilcf.us-east-1.rds.amazonaws.com

          - name: gcp
            description: |
              This block defines the configuration for Google Cloud SQL instances.

              Complete this section if you have installed the Datadog GCP Integration
              (https://docs.datadoghq.com/integrations/google_cloud_platform) to enrich instances
              with MySQL integration telemetry.

              These values are only applied when `dbm: true` option is set.
            options:
              - name: project_id
                description: |
                  Equal to the GCP resource's project ID.

                  For more information on project IDs,
                  See the GCP docs https://cloud.google.com/resource-manager/docs/creating-managing-projects
                value:
                  type: string
                  example: foo-project
              - name: instance_id
                description: |
                  Equal to the GCP resource's instance ID.

                  For more information on instance IDs,
                  See the GCP docs https://cloud.google.com/sql/docs/mysql/instance-settings#instance-id-2ndgen
                value:
                  type: string
                  example: foo-database

          - name: azure
            description: |
              This block defines the configuration for Azure Database for MySQL.

              Complete this section if you have installed the Datadog Azure Integration
              (https://docs.datadoghq.com/integrations/azure) to enrich instances
              with MySQL integration telemetry.

              These values are only applied when `dbm: true` option is set.
            options:
              - name: deployment_type
                description: |
                  Equal to the deployment type for the managed database.

                  Acceptable values are:
                    - `flexible_server`
                    - `single_server`
                    - `virtual_machine`

                  For more information on deployment types,
                  see the Azure docs https://docs.microsoft.com/en-us/azure/mysql/select-right-deployment-type
                value:
                  type: string
                  example: flexible_server
              - name: fully_qualified_domain_name
                description: |
                  Equal to the full qualified domain name of the Azure MySQL database.

                  This value is optional if the value of `host` is already configured to the fully qualified domain name.
                value:
                  type: string
                  example: mysql-database.database.windows.net

          - name: obfuscator_options
            description: |
              Configure how the SQL obfuscator behaves.
              Note: This option only applies when `dbm` is enabled.
            options:
              - name: obfuscation_mode
                description: |
                  Set the obfuscation mode. The obfuscation mode determines how the SQL obfuscator will obfuscate your SQL
                  statements. The following modes are supported:
                  - `obfuscate_only`: Obfuscate the SQL statement without normalizing the statement.
                  - `obfuscate_and_normalize`: Obfuscate the SQL statement and normalize the statement.
                value:
                  type: string
                  example: obfuscate_and_normalize
                  display_default: obfuscate_and_normalize
              - name: replace_digits
                description: |
                  Set to `true` to replace digits in identifiers and table names with question marks in your SQL statements.
                  Note: This option also applies to extracted tables using `collect_tables`.
                value:
                  type: boolean
                  example: false
              - name: collect_metadata
                description: |
                  Set to `false` to disable the collection of metadata in your SQL statements.
                  Metadata includes things such as tables, commands, and comments.
                value:
                  type: boolean
                  example: true
              - name: collect_tables
                description: |
                  Set to `false` to disable the collection of tables in your SQL statements.
                  Requires `collect_metadata: true`.
                value:
                  type: boolean
                  example: true
              - name: collect_commands
                description: |
                  Set to `false` to disable the collection of commands in your SQL statements.
                  Requires `collect_metadata: true`.

                  Examples: SELECT, UPDATE, DELETE, etc.
                value:
                  type: boolean
                  example: true
              - name: collect_comments
                description: |
                  Set to `false` to disable the collection of comments in your SQL statements.
                  Requires `collect_metadata: true`.
                value:
                  type: boolean
                  example: true
              - name: keep_sql_alias
                description: |
                  Set to `true` to keep sql aliases in obfuscated SQL statements. Examples of aliases are
                  `with select 1 as alias`, `select column as other_name`, or `select * from table t`.
                  When `true` these aliases will not be removed.
                value:
                  type: boolean
                  example: true
                  display_default: true
              - name: remove_space_between_parentheses
                description: |
                  Set to `true` to remove spaces between parentheses in your normalized SQL statements.
                value:
                  type: boolean
                  example: false
                  display_default: false
              - name: keep_null
                description: |
                  Set to `true` to keep the keyword `NULL` in your obfuscated SQL statements.
                value:
                  type: boolean
                  example: false
                  display_default: false
              - name: keep_boolean
                description: |
                  Set to `true` to keep the keywords `TRUE` and `FALSE` in your obfuscated SQL statements.
                value:
                  type: boolean
                  example: false
                  display_default: false
              - name: keep_positional_parameter
                description: |
                  Set to `true` to keep positional parameters (e.g. `$1`) in your obfuscated SQL statements.
                value:
                  type: boolean
                  example: false
                  display_default: false
              - name: keep_trailing_semicolon
                description: |
                  Set to `true` to keep trailing semicolons in your normalized SQL statements.
                value:
                  type: boolean
                  example: false
                  display_default: false
              - name: keep_identifier_quotation
                description: |
                  Set to `true` to keep identifier quotations (e.g. `"my_table"`) in your normalized SQL statements.
                value:
                  type: boolean
                  example: false
                  display_default: false
          - name: log_unobfuscated_queries
            hidden: true
            description: |
              Set to `true` to enable logging of original unobfuscated SQL queries when obfuscation errors occur.
              For security purposes, it is recommended to use this option for debugging only when requested by Datadog Support.
              Note: This option only applies when `dbm` is enabled.
            value:
              type: boolean
              example: false
              display_default: false
          - name: log_unobfuscated_plans
            hidden: true
            description: |
              Set to `true` to enable logging of original unobfuscated SQL plans when obfuscation errors occur.
              For security purposes, it is recommended to use this option for debugging only when requested by Datadog Support.
              Note: This option only applies when `dbm` is enabled.
            value:
              type: boolean
              example: false
              display_default: false
          - name: database_instance_collection_interval
            hidden: true
            description: |
              Set the database instance collection interval (in seconds). The database instance collection sends
              basic information about the database instance along with a signal that it still exists.
              This collection does not involve any additional queries to the database.
            value:
              type: number
              example: 1800
              display_default: false
          - template: instances/default
            overrides:
              disable_generic_tags.hidden: false
              disable_generic_tags.enabled: true
              disable_generic_tags.description: |
                  Replaces generic tag such as `server` with `mysql_server` to avoid getting it mixed with
                  other integrations tags.

      - template: logs
        example:
          - type: file
            path: "<GENERAL_LOG_FILE_PATH>"
            source: mysql
            log_processing_rules:
              - type: multi_line
                name: new_log_start_with_date
                pattern: \d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])
              # Useful when timestamp is only logged every second (not every log) and format is yymmdd. (This comment won't be present in the output.)
              - type: multi_line
                name: new_logs_do_not_always_start_with_timestamp
                pattern: \t\t\s*\d+\s+|\d{6}\s+\d{,2}:\d{2}:\d{2}\t\s*\d+\s+

          - type: file
            path: "<ERROR_LOG_FILE_PATH>"
            source: mysql

          - type: file
            path: "<SLOW_QUERY_LOG_FILE_PATH>"
            source: mysql
            log_processing_rules:
              - type: multi_line
                name: new_slow_query_log_entry
                pattern: "# Time:"
              # If the user runs mysqld with `--log-short-format` enabled. (This comment won't be present in the output.)
              - type: multi_line
                name: mysqld_log_short_format_new_slow_query_log_entry
                pattern: "# Query_time:"
