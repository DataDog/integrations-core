variables:
  REMINDER_IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/integrations-core:reminder
  TAGGER_IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/integrations-core:tagger
  VALIDATE_LOG_INTGS: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/integrations-core:validate_log_intgs
  VALIDATE_AGENT_BUILD: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/integrations-core:validate_agent_build
  NOTIFIER_IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/slack-notifier:latest
  TAGGER_EMAIL: packages@datadoghq.com
  TAGGER_NAME: ci.integrations-core
  NOTIFICATIONS_SLACK_CHANNEL: agent-integrations

# Uncomment when/if we modify script to use Jira
#
# release-reminder:
#   image: $REMINDER_IMAGE
#   only:
#     - master
#   script:
#     - ./.gitlab/reminder/release-reminder.sh 2>&1
#   tags: [ "runner:main" ]

stages:
  - build
  - trigger
  - release
  - validate
  - notify

cache: &slack-cache
  key: integrations-core-slack-cache
  paths:
    - .slack-cache
  policy: pull-push

validate-log-integrations:
  stage: validate
  image: $VALIDATE_LOG_INTGS
  only:
  - schedules
  variables:
    INTEGRATIONS_CORE_ROOT: $CI_PROJECT_DIR
  script:
    - cd /app
    - export WEBUI_INTGS_FILE=$(aws ssm get-parameter --region us-east-1 --name ci.integrations-core.webui_intgs_file --with-decryption --query "Parameter.Value" --out text)
    - export LOGS_BACKEND_INTGS_ROOT=$(aws ssm get-parameter --region us-east-1 --name ci.integrations-core.logs_backend_intgs_root --with-decryption --query "Parameter.Value" --out text)
    - git clone -b prod https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/Datadog/web-ui.git --depth 1
    - ts-node parse_ts.ts > logs_integrations.json
    - git clone -b prod https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/Datadog/logs-backend.git --depth 1
    - python3 validate_log_intgs.py logs_integrations.json 2> $CI_PROJECT_DIR/errors.txt
  artifacts:
    paths:
    - $CI_PROJECT_DIR/errors.txt
    expire_in: 1 day
    when: always
  tags: [ "runner:main" ]

trigger-agent-build:
  stage: trigger
  image: $VALIDATE_AGENT_BUILD
  # Exclude release branches without dependency change
  rules:
    - if: ($CI_COMMIT_BRANCH =~ /^7.[0-9]{2}.x/)
      changes:
        - datadog_checks_base/datadog_checks/base/data/agent_requirements.in
      when: always
    - if: ($CI_COMMIT_BRANCH !~ /^7.[0-9]{2}.x/)
      when: always
  cache:
    <<: *slack-cache
  script:
    - export SLACK_CACHE_DIR="${PWD}/.slack-cache"
    - DATADOG_AGENT_PIPELINE_URL=$(aws ssm get-parameter --region us-east-1 --name ci.integrations-core.datadog-agent-pipeline-url --with-decryption --query "Parameter.Value" --out text)
    - export AGENT_REQUIREMENTS_CHANGED="false"
    - git fetch origin master
    - BASE_REF=$(git merge-base HEAD FETCH_HEAD)
    - git --no-pager diff --exit-code --name-only HEAD $BASE_REF -- datadog_checks_base/datadog_checks/base/data/agent_requirements.in || export AGENT_REQUIREMENTS_CHANGED="true" || true
    - |
      if [[ "$AGENT_REQUIREMENTS_CHANGED" = "true" ]]; then
          export RELEASE_BRANCH=$(git tag -l '7\.*' --points-at $BASE_REF | cat | sed 's/\..-.*/\.x/')
          echo "File agent_requirements.in has been modified, triggering an agent build pipeline."
          DATADOG_AGENT_PIPELINE_URL=$DATADOG_AGENT_PIPELINE_URL RELEASE_BRANCH=$RELEASE_BRANCH python -u /trigger_agent_build.py --output-file pipeline_id.txt

          # Get slack user
          if [[ $GITLAB_USER_LOGIN = "gitsync" ]]; then EMAIL=$(git show -s --format="%ae" "$CI_COMMIT_SHA"); else EMAIL=$GITLAB_USER_EMAIL; fi
          SLACK_AUTHOR=$(echo $EMAIL | email2slackid)
          if [ -z "$SLACK_AUTHOR" ]; then echo "${EMAIL} cannot be translated into a Slack user, defaulting to ${NOTIFICATIONS_SLACK_CHANNEL}"; SLACK_AUTHOR=$NOTIFICATIONS_SLACK_CHANNEL; fi

          MESSAGE="Starting a build of the agent, watch ${CI_PIPELINE_URL}."
          postmessage "$SLACK_AUTHOR" "$MESSAGE"
      else
          echo "Nothing to run, skipping job."
      fi
  artifacts:
    paths:
    - pipeline_id.txt
    expire_in: 1 day
    when: always
  tags: [ "runner:main" ]


validate-agent-build:
  stage: validate
  image: $VALIDATE_AGENT_BUILD
  timeout: 2 hours
  cache:
    <<: *slack-cache
  script:
    - export SLACK_CACHE_DIR="${PWD}/.slack-cache"
    - |
      if [[ -s ./pipeline_id.txt ]]; then
          # Fetch secrets from SCM
          GITLAB_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.integrations-core.temp_gitlab_token --with-decryption --query "Parameter.Value" --out text)
          DATADOG_AGENT_PIPELINE_URL=$(aws ssm get-parameter --region us-east-1 --name ci.integrations-core.datadog-agent-pipeline-url --with-decryption --query "Parameter.Value" --out text)
          PIPELINE_ID=$(cat pipeline_id.txt)

          # Get slack user
          if [[ $GITLAB_USER_LOGIN = "gitsync" ]]; then EMAIL=$(git show -s --format="%ae" "$CI_COMMIT_SHA"); else EMAIL=$GITLAB_USER_EMAIL; fi
          SLACK_AUTHOR=$(echo $EMAIL | email2slackid)
          if [ -z "$SLACK_AUTHOR" ]; then echo "${EMAIL} cannot be translated into a Slack user, defaulting to ${NOTIFICATIONS_SLACK_CHANNEL}"; SLACK_AUTHOR=$NOTIFICATIONS_SLACK_CHANNEL; fi

          # Wait for the agent build to complete
          export BUILD_SUCCESS="true"
          GITLAB_TOKEN=$GITLAB_TOKEN DATADOG_AGENT_PIPELINE_URL=$DATADOG_AGENT_PIPELINE_URL python -u /validate_agent_build.py --pipeline-id $(cat pipeline_id.txt) || export BUILD_SUCCESS="false" || true
          echo $BUILD_SUCCESS
          if [[ "$BUILD_SUCCESS" = "true" ]]; then
              echo "Agent build was successful!"
              postmessage "$SLACK_AUTHOR" "Build was successful, you can merge your PR!" success
          else
              echo "Agent build failed."
              postmessage "$SLACK_AUTHOR" "The build failed, you might want to retry this job: ${CI_JOB_URL}" alert
              exit 1
          fi
      else
        echo "A pipeline was not triggered, skipping this job."
      fi

  tags: [ "runner:main" ]

notify-slack:
  stage: notify
  image: $NOTIFIER_IMAGE
  only:
  - schedules
  cache:
    <<: *slack-cache
  script:
    - export SLACK_CACHE_DIR="${PWD}/.slack-cache"
    - |
      if [[ -s $CI_PROJECT_DIR/errors.txt ]]; then
          cat $CI_PROJECT_DIR/errors.txt
          MESSAGE="Logs pipelines don't pass validation steps, please investigate $CI_JOB_URL for errors."
          postmessage "$NOTIFICATIONS_SLACK_CHANNEL" "$MESSAGE" alert
      else
          MESSAGE="Logs pipelines passed validation steps, good job :+1:"
          postmessage "$NOTIFICATIONS_SLACK_CHANNEL" "$MESSAGE" success
      fi
  tags: [ "runner:main" ]


notify-failed-pipeline:
  stage: notify
  image: $NOTIFIER_IMAGE
  only:
  - master
  when: on_failure
  cache:
    <<: *slack-cache
  script:
    - export SLACK_CACHE_DIR="${PWD}/.slack-cache"
    - |
      MESSAGE="The pipeline uncountered an unexpected error."
      postmessage "$NOTIFICATIONS_SLACK_CHANNEL" "$MESSAGE" alert
  tags: [ "runner:main" ]


release-auto:
  stage: release
  image: $TAGGER_IMAGE
  only:
    - master
  except:
    - schedules
  script:
    - ddev --version
    - ddev config set core .
    # Prefix every line with a timestamp
    - ./.gitlab/tagger/tag-release.sh 2>&1 | ts "[%H:%M:%S %Z]  "
  tags: [ "runner:main" ]

release-manual:
  stage: release
  image: $TAGGER_IMAGE
  only:
    # Integration release tags e.g. any_check-X.Y.Z-rc.N
    - /.*-\d+\.\d+\.\d+(-(rc|pre|alpha|beta)\.\d+)?$/
  except:
  - schedules
  script:
    # Get tagger info
    - tagger=$(git for-each-ref refs/tags/$CI_COMMIT_TAG  --format='%(taggername) %(taggeremail)')
    # The automatic release builder will trigger this job as a side-effect of
    # tagging releases. To prevent multiple redundant builds we don't trigger
    # the pipeline unless the tag was applied manually.
    - |
      if [[ "$tagger" =~ "$TAGGER_NAME <$TAGGER_EMAIL>" ]]; then
          echo "Skipping, packages have already been built"
      else
          ./.gitlab/tagger/build-packages.sh
      fi
  tags: [ "runner:main" ]

reminder-image-builder:
  stage: build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  only:
    changes:
      - .gitlab/reminder/**
    refs:
      - master
  script:
    - docker build --tag $REMINDER_IMAGE ./.gitlab/reminder/
    - docker images $REMINDER_IMAGE
    - docker push $REMINDER_IMAGE
  except: [ tags, schedules ]
  tags: [ "runner:docker" ]

tagger-image-builder:
  stage: build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  only:
    changes:
      - .gitlab/tagger/**
      - datadog_checks_dev/**
    refs:
      - master
  script:
    - docker build --tag $TAGGER_IMAGE -f .gitlab/tagger/Dockerfile ./datadog_checks_dev/
    - docker images $TAGGER_IMAGE
    - docker push $TAGGER_IMAGE
  except: [ tags, schedules ]
  tags: [ "runner:docker" ]

validate-log-intgs-builder:
  stage: build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  only:
    changes:
      - .gitlab/validate-logs-intgs/**
    refs:
      - master
  script:
    - cd .gitlab/validate-logs-intgs/
    - docker build --tag $VALIDATE_LOG_INTGS .
    - docker images $VALIDATE_LOG_INTGS
    - docker push $VALIDATE_LOG_INTGS
  tags: [ "runner:docker" ]

validate-agent-build-builder:
  stage: build
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:18.03.1
  only:
    changes:
      - .gitlab/validate-agent-build/**
    refs:
      - master
  script:
    - cd .gitlab/validate-agent-build/
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ddbuild.io/Datadog/devtools.git --depth 1
    - docker build --tag $VALIDATE_AGENT_BUILD .
    - docker images $VALIDATE_AGENT_BUILD
    - docker push $VALIDATE_AGENT_BUILD
  tags: [ "runner:docker" ]
