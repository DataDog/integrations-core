# (C) Datadog, Inc. 2022-present
# All rights reserved
# Licensed under a 3-clause BSD style license (see LICENSE)

# This file is autogenerated.
# To change this file you should edit assets/configuration/spec.yaml and then run the following commands:
#     ddev -x validate config -s <INTEGRATION_NAME>
#     ddev -x validate models -s <INTEGRATION_NAME>

from __future__ import annotations

from typing import Any, Mapping, Optional, Sequence, Union

from pydantic import BaseModel, root_validator, validator

from datadog_checks.base.utils.functions import identity
from datadog_checks.base.utils.models import validation

from . import defaults, validators


class TargetMetric(BaseModel):
    class Config:
        allow_mutation = False

    label_to_match: Optional[str]
    labels_to_get: Optional[Sequence[str]]


class LabelJoins(BaseModel):
    class Config:
        allow_mutation = False

    target_metric: Optional[TargetMetric]


class InstanceConfig(BaseModel):
    class Config:
        allow_mutation = False

    exclude_labels: Optional[Sequence[str]]
    health_service_check: Optional[bool]
    label_joins: Optional[LabelJoins]
    label_to_hostname: Optional[str]
    labels_mapper: Optional[Mapping[str, Any]]
    max_returned_metrics: Optional[int]
    metrics: Sequence[Union[Mapping[str, str], str]]
    namespace: str
    prometheus_metrics_prefix: Optional[str]
    prometheus_timeout: Optional[int]
    prometheus_url: str
    send_histograms_buckets: Optional[bool]
    send_monotonic_counter: Optional[bool]
    ssl_ca_cert: Optional[str]
    ssl_cert: Optional[str]
    ssl_private_key: Optional[str]
    type_overrides: Optional[Mapping[str, Any]]

    @root_validator(pre=True)
    def _initial_validation(cls, values):
        return validation.core.initialize_config(getattr(validators, 'initialize_instance', identity)(values))

    @validator('*', pre=True, always=True)
    def _ensure_defaults(cls, v, field):
        if v is not None or field.required:
            return v

        return getattr(defaults, f'instance_{field.name}')(field, v)

    @validator('*')
    def _run_validations(cls, v, field):
        if not v:
            return v

        return getattr(validators, f'instance_{field.name}', identity)(v, field=field)

    @root_validator(pre=False)
    def _final_validation(cls, values):
        return validation.core.finalize_config(getattr(validators, 'finalize_instance', identity)(values))
