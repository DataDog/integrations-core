name: Postgres
files:
- name: postgres.yaml
  options:
  - template: init_config
    options:
    - template: init_config/default
  - template: instances
    options:
    - name: host
      required: true
      description: |
        The hostname to connect to.
        NOTE: Even if the server name is `localhost`, the Agent connects to PostgreSQL using TCP/IP unless you also
        provide a value for the sock key.
      value:
        example: "localhost"
        type: string
    - name: port
      description: The port to use when connecting to PostgreSQL.
      value:
        type: integer
        example: 5432
    - name: username
      description: The Datadog username created to connect to PostgreSQL.
      required: true
      value:
        type: string
        example: datadog
    - name: password
      description: The password associated with the Datadog user.
      value:
        type: string
    - name: dbname
      description: |
        The name of the PostgresSQL database to monitor.
        Note: If omitted, the default system Postgres database is queried.
      value:
        type: string
        display_default: postgres
    - name: reported_hostname
      description: |
        Set the reported hostname for this instance. This value overrides the hostname detected by the Agent
        and can be useful to set a custom hostname when connecting to a remote database through a proxy.
      value:
        type: string
    - name: dbstrict
      description: |
        Whether to restrict the scope of the check to just the database in question.
        Set to `true` if you only want to gather metrics from the database provided in the dbname parameter.
      value:
        type: boolean
        display_default: false
        example: false
    - name: ignore_databases
      description: |
        A list of database to ignore. No metrics or statement samples will be collected for these databases.
        Each value can be a plain string or a Postgres pattern.
        For more information on how patterns work, see https://www.postgresql.org/docs/12/functions-matching.html
      value:
        type: array
        items:
          type: string
        example:
          - 'template%'
          - rdsadmin
          - azure_maintenance
          - cloudsqladmin
        default:
          - 'template%'
          - rdsadmin
          - azure_maintenance
          - cloudsqladmin
    - name: ssl
      description: |
        This option determines whether or not and with what priority a secure SSL TCP/IP connection
        is negotiated with the server. There are six modes:
        - `disable`: Only tries a non-SSL connection.
        - `allow`: First tries a non-SSL connection; if if fails, tries an SSL connection.
        - `prefer`: First tries an SSL connection; if it fails, tries a non-SSL connection.
        - `require`: Only tries an SSL connection. If a root CA file is present, verifies the certificate in
                     the same way as if verify-ca was specified.
        - `verify-ca`: Only tries an SSL connection, and verifies that the server certificate is issued by a
                       trusted certificate authority (CA).
        - `verify-full`: Only tries an SSL connection and verifies that the server certificate is issued by a
                         trusted CA and that the requested server host name matches the one in the certificate.

        For a detailed description of how these options work see https://www.postgresql.org/docs/current/libpq-ssl.html
      value:
        type: string
        example: 'allow'
        default: 'allow'
    - name: ssl_root_cert
      description: |
        The path to the ssl root certificate.

        For a detailed description of how this option works see https://www.postgresql.org/docs/current/libpq-ssl.html
      value:
        type: string
    - name: ssl_cert
      description: |
        The path to the ssl certificate.

        For a detailed description of how this option works see https://www.postgresql.org/docs/current/libpq-ssl.html
      value:
        type: string
    - name: ssl_key
      description: |
        The path to the ssl client key.

        For a detailed description of how this option works see https://www.postgresql.org/docs/current/libpq-ssl.html
      value:
        type: string
    - name: ssl_password
      description: |
        The password for the secret key specified in ssl_key, allowing client certificate private keys to be stored
        in encrypted form on disk.

        For a detailed description of how this option works see https://www.postgresql.org/docs/current/libpq-ssl.html
      value:
        type: string
    - name: query_timeout
      description: |
        Adds a statement_timeout https://www.postgresql.org/docs/current/runtime-config-client.html#GUC-STATEMENT-TIMEOUT
        to all metric collection queries. Aborts any statement that takes more than the specified number of milliseconds,
        starting from the time the command arrives at the server from the client. A value of zero turns this off.
        Cancelled queries won't log any metrics.
      value:
        type: integer
        example: 5000
    - name: idle_connection_timeout
      description: |
        Sets the timeout (in ms) a connection used in the connection pool will be idle until it is closed by the pooler.
        This value should be configured to a lower value if you are observing connection buildup on the Postgres server,
        or a higher value if connections are getting prematurely closed.
      hidden: true
      value:
        type: integer
        example: 60000
    - name: max_connections
      hidden: true
      description: |
        Sets the upper bound limit on the number of concurrent connections the Agent can have on the database server.
        The Agent needs to open additional connections to collect explain plans across databases.
        Idle connections are cached, but pruned over time to balance the performance impact of opening connections and the cost of having many open connections.
        Raising the default value should only be needed on workloads with >50 databases.
        Lowering the default value can reduce the number of explain plans collected and is not recommended in most cases.
      value:
        type: integer
        example: 30
        display_default: 30
    - name: relations
      description: |
        The list of relations/tables must be specified here to track per-relation (table, index , view, etc.) metrics.
        If enabled, `dbname` should be specified to collect database-specific relations metrics.
        You can either specify a single relation by its exact name in 'relation_name' or use a regex to track metrics
        from all matching relations (useful in cases where relation names are dynamically generated, e.g. TimescaleDB).
        Each relation generates many metrics (10 + 10 per index).

        By default all schemas are included. To track relations from specific schemas only,
        you can specify the `schemas` attribute and provide a list of schemas to use for filtering.

        Size metrics are collected only for ordinary tables. Index metrics are collected only for user indexes. Lock
        metrics are collected for all relation types (table, index , view, etc.). The rest of the metrics are
        collected only for user tables.
        To track lock metrics for relations of a specific kind only, specify the `relkind` attribute
        as a list of the options:
        * r = ordinary table
        * i = index
        * S = sequence
        * t = TOAST table
        * m = materialized view
        * c = composite type
        * f = foreign table
        * p = partitioned table

        Note: For compatibility reasons you can also use the following syntax to track relations metrics by specifying
        the list of table names. All schemas are included and regex are not supported.
        relations:
      value:
        type: array
        items:
          anyOf:
          - type: string
          - type: object
            properties:
              - name: relation_name
                type: string
              - name: relation_schema
                type: string
              - name: schemas
                type: array
                items:
                  type: string
              - name: relation_regex
                type: string
              - name: relkind
                type: array
                items:
                    type: string
        example:
          - relation_name: <TABLE_NAME>
            schemas:
              - <SCHEMA_NAME1>
          - relation_regex: <TABLE_PATTERN>
            relkind:
              - r
              - p
    - name: max_relations
      description: Determines the maximum number of relations to fetch.
      value:
        type: integer
        example: 300
    - name: collect_function_metrics
      description: |
        If set to true, collects metrics regarding PL/pgSQL functions from pg_stat_user_functions.
      value:
        type: boolean
        example: false
    - name: collect_count_metrics
      description: Collect count of user tables from pg_class.
      value:
        type: boolean
        example: true
    - name: collect_activity_metrics
      description: |
        Collect metrics regarding transactions from pg_stat_activity. Please make sure the user
        has sufficient privileges to read from pg_stat_activity before enabling this option.
      value:
        type: boolean
        example: false
    - name: activity_metrics_excluded_aggregations
      description: |
        A list of columns to remove from the pg_stat_activity aggregation.
        By default, datname, usename and application_name will be used.
        If applications with different application_name are creating a lot of short-lived queries,
        removing application_name from the aggregation can help generate more stable metrics.
        Note that datname is a required aggregation on activity metrics and can't be excluded.
      value:
        type: array
        items:
          type: string
        example:
          - application_name
        default: []
    - name: collect_database_size_metrics
      description: Collect database size metrics.
      value:
        type: boolean
        example: true
    - name: collect_default_database
      description: Include statistics from the default database 'postgres' in the check metrics.
      value:
        type: boolean
        example: true
    - name: collect_bloat_metrics
      description: Collect metrics about table bloat. Only available when `relation` metrics are enabled.
      enabled: true
      value:
        type: boolean
        example: false
    - name: collect_wal_metrics
      description: |
        Collect metrics about WAL file age.
        NOTE: 
        For Postgres 9.6 and below, you must run the check local to your database if you want to enable this option.
        Starting Postgres 10, WAL file metrics are enabled by default using `pg_ls_waldir` and don't need local access.
      value:
        type: boolean
        example: false
    - name: data_directory
      description: |
        The data directory of your postgres installation
        Required when collecting WAL metrics.
      value:
        type: string
        example: /usr/local/pgsql/data
    - name: tag_replication_role
      description: Tag metrics and checks with `replication_role:<master|standby>`.
      value:
        type: boolean
        example: false
    - name: table_count_limit
      description: The maximum number of tables to collect metrics from.
      value:
        type: integer
        display_default: 200
        example: 200
    - name: custom_queries
      description: |
        Define custom queries to collect custom metrics from your PostgreSQL
        See Datadog FAQ article for a guide on collecting custom metrics from PostgreSQL:
        https://docs.datadoghq.com/integrations/faq/postgres-custom-metric-collection-explained/
      value:
        type: array
        items:
          type: object
          properties: []
        example:
            - metric_prefix: postgresql
              query: <QUERY>
              columns:
                - name: <COLUNMS_1_NAME>
                  type: <COLUMNS_1_TYPE>
                - name: <COLUNMS_2_NAME>
                  type: <COLUMNS_2_TYPE>
              tags:
                - <TAG_KEY>:<TAG_VALUE>
    - name: database_autodiscovery
      description: |
        Define the configuration for database autodiscovery.
        Complete this section if you want to auto-discover databases on this host
        instead of specifying each using dbname.
      options:
        - name: enabled
          description: Enable database autodiscovery.
          value:
            type: boolean
            example: false
            display_default: false
        - name: max_databases
          description: The maximum number of databases this host should monitor.
          value:
            type: integer
            example: 100
            display_default: 100
        - name: include
          description: |
            Regular expression for database names to include as part of
            database autodiscovery.
            Will report metrics for databases that are found in this instance,
            ignores databases listed but not found.
            Character casing is ignored. The regular expressions start matching from
            the beginning, so to match anywhere, prepend `.*`. For exact matches append `$`.
            Defaults to `.*` to include everything.
          value:
            type: array
            items:
              type: string
            example:
              - "master$"
              - "AdventureWorks.*"
            display_default:
              - ".*"
        - name: exclude
          description: |
            Regular expression for database names to exclude as part of `database_autodiscovery`.
            Character casing is ignored. The regular expressions start matching from the beginning,
            so to match anywhere, prepend `.*`. For exact matches append `$`.
            In case of conflicts, database exclusion via `exclude` takes precedence over
            those found via `include`
          value:
            type: array
            items:
              type: string
            example:
              - "model"
              - "msdb"
              - "cloudsqladmin"
              - "rdsadmin"
            display_default:
              - "cloudsqladmin"
        - name: refresh
          description: Frequency in seconds of scans for new databases. Defaults to 10 minutes.
          value:
            type: integer
            example: 600
            display_default: 600
    - name: application_name
      description: |
        The application_name can be any string of less than NAMEDATALEN characters (64 characters in a standard build).
        It is typically set by an application upon connection to the server.
        The name is displayed in the pg_stat_activity view and included in CSV log entries.
      value:
        type: string
        example: "datadog-agent"
    - name: dbm
      description: |
        Set to `true` to enable Database Monitoring.
      value:
        type: boolean
        example: false
        display_default: false
    - name: pg_stat_statements_view
      description: |
        Set this value if you want to define a custom view or function to allow the datadog user to query the
        `pg_stat_statements` table, which is useful for restricting the permissions given to the datadog agent.
        Please note this is an ALPHA feature and is subject to change or deprecation without notice.
      value:
        type: string
        example: show_pg_stat_statements()
    - name: query_metrics
      description: Configure collection of query metrics
      options:
        - name: enabled
          description: |
            Enable collection of query metrics. Requires `dbm: true`.
          value:
            type: boolean
            example: true
        - name: collection_interval
          description: |
            Set the query metric collection interval (in seconds). Each collection involves a single query to
            `pg_stat_statements`. If a non-default value is chosen then that exact same value must be used for *every*
            check instance. Running different instances with different collection intervals is not supported.
          value:
            type: number
            example: 10
        - name: pg_stat_statements_max_warning_threshold
          hidden: true
          description: |
            Set the threshold for a safe value of `pg_stat_statements.max`. If the database is configured with a value
            higher than this threshold, a warning is emitted to recommend lowering the setting value.
          value:
            type: number
            example: 10000
    - name: query_samples
      description: Configure collection of query samples
      options:
        - name: enabled
          description: |
            Enable collection of query samples. Requires `dbm: true`.
          value:
            type: boolean
            example: true
        - name: collection_interval
          description: |
            Set the query sample collection interval (in seconds). Each collection involves a single query to
            `pg_stat_activity` followed by at most one `EXPLAIN` query per unique normalized query seen.
          value:
            type: number
            example: 1
        - name: explain_function
          description: |
            Override the default function used to collect execution plans for queries.
          value:
            type: string
            example: datadog.explain_statement
        - name: explained_queries_per_hour_per_query
          description: |
            Set the rate limit for how many execution plans will be collected per hour per normalized query.
          value:
            type: integer
            example: 60
        - name: samples_per_hour_per_query
          description: |
            Set the rate limit for how many query sample events will be ingested per hour per normalized execution
            plan.
          value:
            type: integer
            example: 15
        - name: explained_queries_cache_maxsize
          description: |
            Set the max size of the cache used for the explained_queries_per_hour_per_query rate limit. This should
            be increased for databases with a very large number unique normalized queries which exceed the cache's
            limit.
          value:
            type: integer
            example: 5000
        - name: seen_samples_cache_maxsize
          description: |
            Set the max size of the cache used for the samples_per_hour_per_query rate limit. This should be increased
            for databases with a very large number of unique normalized execution plans which exceed the cache's limit.
          value:
            type: integer
            example: 10000
        - name: explain_parameterized_queries
          description: |
            This option will enable the ability to explain parameterized queries.
            This is useful if your SQL clients are using the extended query protocol or prepared statements.
          value:
            type: boolean
            example: true
    - name: query_activity
      description: Configure collection of query activity
      options:
        - name: enabled
          description: |
            Enable collection of query activity. Requires `dbm: true`.
          value:
            type: boolean
            example: true
        - name: collection_interval
          description: |
            Set the query activity collection interval (in seconds). This number cannot be smaller than
            query_samples configured collection_interval.
          value:
            type: number
            example: 10
        - name: payload_row_limit
          description: |
            Set the query activity maximum number of pg_stat_activity rows you want to report. If the table is larger
            than the maximum rows set, then the top N longest running transactions will be reported.
          value:
            type: number
            example: 3500
    - name: collect_settings
      description: Configure collection of pg_settings. This is an alpha feature.
      options:
        - name: enabled
          description: |
            Enable collection of pg_settings. Requires `dbm: true`.
          value:
            type: boolean
            example: false
        - name: collection_interval
          description: |
            Set the database settings collection interval (in seconds). Each collection involves a single query to
            `pg_settings`.
          value:
            type: number
            example: 600
        - name: ignored_settings_patterns
          description: |
            A list of setting patterns to ignore. Any setting key matching one of the value in this list will 
            not be collected. This uses the traditional LIKE pattern-matching approach.
          value:
              type: array
              items:
                type: string
              example:
                - plpgsql%
              default:
                - plpgsql%
    - name: collect_schemas
      description: |
        Enable collection of database schemas. In order to collect schemas from all user databases,
        enable `database_autodiscovery`. To collect from a single database, set `dbname` to collect
        the schema for that database.
      options:
        - name: enabled
          description: |
            Enable collection of database schemas. Requires `dbm: true` and relation metrics must be enabled.
          value:
            type: boolean
            example: false
        - name: max_tables
          description: |
            Maximum amount of tables the Agent collects from the instance.
          value:
            type: number
            example: 300
            display_default: 300
        - name: max_columns
          description: |
            Maximum amount of columns the Agent collects per table.
          value:
            type: number
            example: 50
            display_default: 50
        - name: collection_interval
          description: |
            The database schema collection interval (in seconds).
          value:
            type: number
            example: 600

    - name: aws
      description: |
        This block defines the configuration for AWS RDS and Aurora instances.

        Complete this section if you have installed the Datadog AWS Integration
        (https://docs.datadoghq.com/integrations/amazon_web_services) to enrich instances
        with Postgres integration telemetry.

        These values are only applied when `dbm: true` option is set.
      options:
        - name: instance_endpoint
          description: |
            Equal to the Endpoint.Address of the instance the agent is connecting to.
            This value is optional if the value of `host` is already configured to the instance endpoint.

            For more information on instance endpoints,
            see the AWS docs https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Endpoint.html
          value:
            type: string
            example: mydb.cfxgae8cilcf.us-east-1.rds.amazonaws.com
        - name: region
          description: |
            Equal to the region of the instance the agent is connecting to.
            This value is used to configure IAM authentication.
          value:
            type: string
            example: us-east-1
        - name: managed_authentication
          description: |
            Configure section used for AWS IAM Authentication with RDS.

            This supports using IAM database authentication to connect to your database instance.

            For more information on configuration, see
            https://docs.datadoghq.com/database_monitoring/guide/managed_authentication

            For more information on RDS IAM Authentication, see the AWS docs
            https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.Connecting.html

            To enable IAM Authentication, set `aws.managed_authentication.enabled` to `true`.
            If `aws.managed_authentication.enabled` is set, then the `password` fields will be ignored.
            `aws.region` is required to enable IAM Authentication.
          value:
            type: object
            properties:
            - name: enabled
              type: boolean
              example: false

    - name: gcp
      description: |
        This block defines the configuration for Google Cloud SQL instances.

        Complete this section if you have installed the Datadog GCP Integration
        (https://docs.datadoghq.com/integrations/google_cloud_platform) to enrich instances
        with Postgres integration telemetry.

        These values are only applied when `dbm: true` option is set.
      options:
        - name: project_id
          description: |
            Equal to the GCP resource's project ID.

            For more information on project IDs,
            See the GCP docs https://cloud.google.com/resource-manager/docs/creating-managing-projects
          value:
            type: string
            example: foo-project
        - name: instance_id
          description: |
            Equal to the GCP resource's instance ID.

            For more information on instance IDs,
            See the GCP docs https://cloud.google.com/sql/docs/postgres/instance-settings#instance-id-2ndgen
          value:
            type: string
            example: foo-database

    - name: azure
      description: |
        This block defines the configuration for Azure Database for PostgreSQL.

        Complete this section if you have installed the Datadog Azure Integration
        (https://docs.datadoghq.com/integrations/azure) to enrich instances
        with Postgres integration telemetry.
        These values are only applied when `dbm: true` option is set.
      options:
        - name: deployment_type
          description: |
            Equal to the deployment type for the managed database.

            Acceptable values are:
              - `flexible_server`
              - `single_server`
              - `virtual_machine`

            For more information on deployment types,
            see the Azure docs https://docs.microsoft.com/en-us/azure/postgresql/overview-postgres-choose-server-options
          value:
            type: string
            example: flexible_server
        - name: fully_qualified_domain_name
          description: |
            Equal to the full qualified domain name of the Azure PostgreSQL database.

            This value is optional if the value of `host` is already configured to the fully qualified domain name.
          value:
            type: string
            example: my-postgres-database.database.windows.net
        - name: managed_authentication
          description: |
            Configuration section used for Azure AD Authentication.

            This supports using System or User assigned managed identities.

            For more information on configuration, see
            https://docs.datadoghq.com/database_monitoring/guide/managed_authentication

            For more information on Managed Identities, see the Azure docs
            https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview

            To enable Azure AD Authentication, set `azure.managed_authentication.enabled` to `true`.
            If `azure.managed_authentication.enabled` is set, then the `password` fields will be ignored.
            `azure.managed_authentication.client_id` is required to enable Azure AD Authentication.

            For more information on scopes, see the Azure docs
            https://learn.microsoft.com/en-us/azure/active-directory/develop/scopes-oidc
          value:
            type: object
            properties:
            - name: enabled
              type: boolean
              example: false
            - name: client_id
              type: string
            - name: identity_scope
              type: string
              example: https://ossrdbms-aad.database.windows.net/.default

    - name: managed_identity
      description: |
        DEPRECATED: Please use `azure.managed_authentication` instead.

        Configuration section used for Azure AD Authentication.

        This supports using System or User assigned managed identities.
        If this section is set, then the `username` and `password` fields will be ignored.

        For more information on Managed Identities, see the Azure docs
        https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview
      options:
        - name: client_id
          description: |
            Client ID of the Managed Identity.
          value:
            type: string
        - name: identity_scope
          description: |
            The permission scope from where to access the identity token. This value is optional if using the default
            identity scope for Azure managed databases.

            For more information on scopes, see the Azure docs
            https://learn.microsoft.com/en-us/azure/active-directory/develop/scopes-oidc
          value:
            type: string
            example: https://ossrdbms-aad.database.windows.net/.default

    - name: obfuscator_options
      description: |
        Configure how the SQL obfuscator behaves.
        Note: This option only applies when `dbm` is enabled.
      options:
        - name: obfuscation_mode
          description: |
            Set the obfuscation mode. The obfuscation mode determines how the SQL obfuscator will obfuscate your SQL
            statements. The following modes are supported:
            - `obfuscate_only`: Obfuscate the SQL statement without normalizing the statement.
            - `obfuscate_and_normalize`: Obfuscate the SQL statement and normalize the statement.
          value:
            type: string
            example: obfuscate_and_normalize
            display_default: obfuscate_and_normalize
        - name: replace_digits
          description: |
            Set to `true` to replace digits in identifiers and table names with question marks in your SQL statements.
            Note: This option also applies to extracted tables using `collect_tables`.
          value:
            type: boolean
            example: false
        - name: collect_metadata
          description: |
            Set to `false` to disable the collection of metadata in your SQL statements.
            Metadata includes things such as tables, commands, and comments.
          value:
            type: boolean
            example: true
        - name: collect_tables
          description: |
            Set to `false` to disable the collection of tables in your SQL statements.
            Requires `collect_metadata: true`.
          value:
            type: boolean
            example: true
        - name: collect_commands
          description: |
            Set to `false` to disable the collection of commands in your SQL statements.
            Requires `collect_metadata: true`.

            Examples: SELECT, UPDATE, DELETE, etc.
          value:
            type: boolean
            example: true
        - name: collect_comments
          description: |
            Set to `false` to disable the collection of comments in your SQL statements.
            Requires `collect_metadata: true`.
          value:
            type: boolean
            example: true
        - name: keep_sql_alias
          description: |
            Set to `true` to keep sql aliases in obfuscated SQL statements. Examples of aliases are
            `with select 1 as alias`, `select column as other_name`, or `select * from table t`.
            When `true` these aliases will not be removed.
          value:
            type: boolean
            example: true
            display_default: true
        - name: keep_dollar_quoted_func
          description: |
            Set to `true` to prevent dollar quoted function strings (e.g. `$func$`) from being removed.
            When not removed, the sql content of dollar quoted func strings will be obfuscated.
            Only strings with the tag `$func$` are supported.
          value:
            type: boolean
            example: true
            display_default: true
        - name: remove_space_between_parentheses
          description: |
            Set to `true` to remove spaces between parentheses in your normalized SQL statements.
          value:
            type: boolean
            example: false
            display_default: false
        - name: keep_null
          description: |
            Set to `true` to keep the keyword `NULL` in your obfuscated SQL statements.
          value:
            type: boolean
            example: false
            display_default: false
        - name: keep_boolean
          description: |
            Set to `true` to keep the keywords `TRUE` and `FALSE` in your obfuscated SQL statements.
          value:
            type: boolean
            example: false
            display_default: false
        - name: keep_positional_parameter
          description: |
            Set to `true` to keep positional parameters (e.g. `$1`) in your obfuscated SQL statements.
          value:
            type: boolean
            example: false
            display_default: false
        - name: keep_trailing_semicolon
          description: |
            Set to `true` to keep trailing semicolons in your normalized SQL statements.
          value:
            type: boolean
            example: false
            display_default: false
        - name: keep_identifier_quotation
          description: |
            Set to `true` to keep identifier quotations (e.g. `"my_table"`) in your normalized SQL statements.
          value:
            type: boolean
            example: false
            display_default: false
    - name: log_unobfuscated_queries
      hidden: true
      description: |
        Set to `true` to enable logging of original unobfuscated SQL queries when obfuscation errors occur.
        For security purposes, it is recommended to use this option for debugging only when requested by Datadog Support.
        Note: This option only applies when `dbm` is enabled.
      value:
        type: boolean
        example: false
        display_default: false
    - name: log_unobfuscated_plans
      hidden: true
      description: |
        Set to `true` to enable logging of original unobfuscated SQL plans when obfuscation errors occur.
        For security purposes, it is recommended to use this option for debugging only when requested by Datadog Support.
        Note: This option only applies when `dbm` is enabled.
      value:
        type: boolean
        example: false
        display_default: false
    - name: database_instance_collection_interval
      hidden: true
      description: |
        Set the database instance collection interval (in seconds). The database instance collection sends
        basic information about the database instance along with a signal that it still exists.
        This collection does not involve any additional queries to the database.
      value:
        type: number
        example: 1800
        display_default: false
    - template: instances/default
      overrides:
        disable_generic_tags.hidden: False
        disable_generic_tags.enabled: True
        disable_generic_tags.description: The integration will stop sending server tag as is reduntant with host tag
  - template: logs
    example:
    - type: file
      path:  /path/to/postgres.log
      source: postgresql
      service: <SERVICE>
      log_processing_rules:
        - type: multi_line
          pattern: \d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])
          name: new_log_start_with_date
