init_config:

instances:

    ## @param class - string - required
    ## `class` is the name of the WMI class, for example `Win32_OperatingSystem`.
    ## You can find many of the standard class names on the MSDN docs:
    ##
    ## https://msdn.microsoft.com/en-us/library/windows/desktop/aa394084.aspx
    ##
    #
  - class: <CLASS_NAME>

    ## @param metrics - list of strings - required
    ## list of metrics you want to capture, with each item in the list being a set of:
    ##
    ## [<WMI_PROPERTY_NAME>, <METRIC_NAME>, <METRIC_TYPE>]
    ##
    ##  * <WMI_PROPERTY_NAME> is something like `NumberOfUsers` or `ThreadCount`.
    ##                         The standard properties are also available on the MSDN docs
    ##                         for each class.
    ##
    ##  * <METRIC_NAME> is the name you want to show up in Datadog.
    ##
    ##  * <METRIC_TYPE> is from the standard choices for all agent checks, such as gauge, rate, histogram or counter.
    #
    metrics:
      - [<WMI_PROPERTY_NAME>, <METRIC_NAME>, <METRIC_TYPE>]

    ## @param host - string - optional - default: localhost
    ## `host`is the optional target of the WMI query.
    ## If you set this option, make sure that Remote Management is enabled on the target host:
    ##
    ## https://technet.microsoft.com/en-us/library/Hh921475.aspx
    #
    # host: localhost

    ## @param namespace - string - optional - default: cimv2
    ## `namespace` is the optional WMI namespace to connect to.
    #
    # namespace: cimv2

    ## @param filters - list of strings - optional
    ## `filters` parameter is a list of filters on the WMI query you may want.
    ##  Filters can be in one of these forms:
    ##    [{<FILTER_PROPERTY>: <FILTER_VALUE>},...] or
    ##    [{FILTER_PROPERTY>: [<FILTER_OPERATOR>, <FILTER_VALUE>]},...]
    ##
    ##  All metrics are filtered out if any given property:
    ##    1. Has one or more filter(s) applied to it, AND
    ##    2. None of its filters evaluate to 'True'
    ##
    ##  Providing just a <FILTER_VALUE> defaults to the '=' comparison operator.
    ##
    ##   * <FILTER_PROPERTY> the name of the filter, for example 'PercentProcessorTime'.
    ##
    #
    # filters:
    #   - {<FILTER_PROPERTY>: [<FILTER_OPERATOR>, <FILTER_VALUE>]}
    #   - {<FILTER_PROPERTY>: <FILTER_VALUE>}

    ## @param provider - integer - optional - default: 64
    ## `provider` set the WMI provider.
    ## It is used to request WMI data from the non-default provider. Available options are: `32` or `64`.
    ##
    ## See https://msdn.microsoft.com/en-us/library/aa393067.aspx
    #
    # provider: 64

    ## @param tag_by - list of strings - optional
    ## The `tag_by` parameter lets you tag each metric with a property from the WMI class you're using.
    ## This is only useful when you will have multiple values for your WMI query.
    #
    # tag_by: Name

    ## @param tags - list of key:value elements - optional
    ## List of tags to attach to every metric, event, and service check emitted by this Integration.
    ##
    ## Learn more about tagging: https://docs.datadoghq.com/tagging/
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param tag_queries - list of strings - optional
    ## The `tag_queries`  parameter lets you specify a list of queries, to tag metrics with a target class property.
    ## Each item in the list is a set of :
    ##
    ## `[<LINK_SOURCE_PROPERTY>, <TARGET_CLASS>, <LINK_TARGET_CLASS_PROPERTY>, <TARGET_PROPERTY>]`
    ##
    ##   * `<LINK_SOURCE_PROPERTY>` contains the link value
    ##   * `<TARGET_CLASS>` is the class to link to
    ##   * `<LINK_TARGET_CLASS_PROPERTY>` is the target class property to link to
    ##   * `<TARGET_PROPERTY>` contains the value to tag with
    ##
    ## It translates to a WMI query:
    ##
    ## SELECT '<TARGET_PROPERTY>' FROM '<TARGET_CLASS>' WHERE '<LINK_TARGET_CLASS_PROPERTY>' = '<LINK_SOURCE_PROPERTY>'
    #
    # tag_queries:
    #   - [<LINK_SOURCE_PROPERTY>, <TARGET_CLASS>, <LINK_TARGET_CLASS_PROPERTY>, <TARGET_PROPERTY>]
