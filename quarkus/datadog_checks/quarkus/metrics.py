# (C) Datadog, Inc. 2024-present
# All rights reserved
# Licensed under a 3-clause BSD style license (see LICENSE)
gauges_counters = {
    'http_server_active_requests': 'http_server.active_requests',
    'http_server_bytes_read_max': 'http_server.bytes_read.max',
    'http_server_bytes_written_max': 'http_server.bytes_written.max',
    'http_server_connections_seconds_max': 'http_server.connections.seconds.max',
    'http_server_requests_seconds_max': 'http_server.requests.seconds.max',
    'jvm_buffer_count_buffers': 'jvm.buffer.count_buffers',
    'jvm_buffer_memory_used_bytes': 'jvm.buffer.memory_used.bytes',
    'jvm_buffer_total_capacity_bytes': 'jvm.buffer.total_capacity.bytes',
    'jvm_classes_loaded_classes': 'jvm.classes.loaded_classes',
    'jvm_gc_live_data_size_bytes': 'jvm.gc.live_data_size.bytes',
    'jvm_gc_max_data_size_bytes': 'jvm.gc.max_data_size.bytes',
    'jvm_gc_overhead': 'jvm.gc.overhead',
    'jvm_memory_committed_bytes': 'jvm.memory.committed.bytes',
    'jvm_memory_max_bytes': 'jvm.memory.max.bytes',
    'jvm_memory_usage_after_gc': 'jvm.memory.usage_after_gc',
    'jvm_memory_used_bytes': 'jvm.memory.used.bytes',
    'jvm_threads_daemon_threads': 'jvm.threads.daemon_threads',
    'jvm_threads_live_threads': 'jvm.threads.live_threads',
    'jvm_threads_peak_threads': 'jvm.threads.peak_threads',
    'jvm_threads_states_threads': 'jvm.threads.states_threads',
    'netty_allocator_memory_pinned': 'netty.allocator.memory.pinned',
    'netty_allocator_memory_used': 'netty.allocator.memory.used',
    'netty_allocator_pooled_arenas': 'netty.allocator.pooled.arenas',
    'netty_allocator_pooled_cache_size': 'netty.allocator.pooled.cache_size',
    'netty_allocator_pooled_chunk_size': 'netty.allocator.pooled.chunk_size',
    'netty_allocator_pooled_threadlocal_caches': 'netty.allocator.pooled.threadlocal_caches',
    'netty_eventexecutor_tasks_pending': 'netty.eventexecutor.tasks_pending',
    'process_cpu_usage': 'process.cpu.usage',
    'process_files_max_files': 'process.files.max_files',
    'process_files_open_files': 'process.files.open_files',
    'process_uptime_seconds': 'process.uptime.seconds',
    'system_cpu_count': 'system.cpu.count',
    'system_cpu_usage': 'system.cpu.usage',
    'system_load_average_1m': 'system.load_average_1m',
    'worker_pool_active': 'worker_pool.active',
    'worker_pool_idle': 'worker_pool.idle',
    'worker_pool_queue_delay_seconds_max': 'worker_pool.queue.delay.seconds.max',
    'worker_pool_queue_size': 'worker_pool.queue.size',
    'worker_pool_ratio': 'worker_pool.ratio',
    'worker_pool_usage_seconds_max': 'worker_pool.usage.seconds.max',
}
summaries = {
    'http_server_bytes_read': 'http_server.bytes_read',
    'http_server_bytes_written': 'http_server.bytes_written',
    'http_server_requests_seconds': 'http_server.requests.seconds',
    'worker_pool_queue_delay_seconds': 'worker_pool.queue.delay.seconds',
    'worker_pool_usage_seconds': 'worker_pool.usage.seconds',
}
METRIC_MAP = {**gauges_counters, **summaries}
