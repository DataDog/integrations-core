{{ $gateway := index .Values "gateways" "istio-egressgateway" }}
{{- if $gateway.zvpn.enabled }}
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: istio-multicluster-egressgateway
  namespace: {{ .Release.Namespace }}
  labels:
{{ $gateway.labels | toYaml | indent 4 }}
    release: {{ .Release.Name }}
spec:
  selector:
    istio: egressgateway
  servers:
  - hosts:
    - "*.{{ $gateway.zvpn.suffix }}"
    port:
      name: tls
      number: 15443
      protocol: TLS
    tls: {}
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: istio-multicluster-egressgateway
  namespace: {{ .Release.Namespace }} 
  labels:
{{ $gateway.labels | toYaml | indent 4 }}
    release: {{ .Release.Name }}
spec:
  gateways:
  - istio-multicluster-egressgateway
  hosts:
  - "*.{{ $gateway.zvpn.suffix }}"
  tls:
  - match:
    - port: 15443
      sniHosts:
      - "*.{{ $gateway.zvpn.suffix }}"
    route:
    - destination:
        host: non.existent.cluster
        port:
          number: 15443
      weight: 100
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: istio-multicluster-egressgateway
  namespace: {{ .Release.Namespace }}
  labels:
{{ $gateway.labels | toYaml | indent 4 }}
    release: {{ .Release.Name }}
spec:
  workloadLabels:
    istio: egressgateway
  filters:
  - listenerMatch:
      portNumber: 15443
      listenerType: GATEWAY
    filterName: envoy.filters.network.sni_cluster
    filterType: NETWORK
    filterConfig: {}
---
## To ensure all traffic to *.global is using mTLS
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: istio-multicluster-egressgateway
  namespace: {{ .Release.Namespace }}
  labels:
{{ $gateway.labels | toYaml | indent 4 }}
    release: {{ .Release.Name }}
spec:
  host: "*.{{ $gateway.zvpn.suffix }}"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
---
{{- end }}
