apiVersion: "config.istio.io/v1alpha2"
kind: handler
metadata:
  name: stackdriver
spec:
  compiledAdapter: stackdriver
  params:
    appCredentials: y
    pushInterval: 5s
    metricInfo:
      server-request-count.instance.{{.Namespace}}:
        kind: 3 # CUMULATIVE
        value: 2 # INT64
        metric_type: "istio.io/service/server/request_count"
    logInfo:
      server-accesslog-stackdriver.instance.{{.Namespace}}:
        labelNames:
        - source_uid
        - source_ip
        - source_app
        - source_principal
        - source_name
        - source_workload
        - source_namespace
        - source_owner
        - destination_uid
        - destination_app
        - destination_ip
        - destination_service_host
        - destination_workload
        - destination_name
        - destination_namespace
        - destination_owner
        - destination_principal
        - api_name
        - api_version
        - api_claims
        - api_key
        - request_operation
        - protocol
        - method
        - url
        - response_code
        - response_size
        - request_size
        - request_id
        - client_trace_id
        - latency
        - service_authentication_policy
        - user_agent
        - response_timestamp
        - received_bytes
        - sent_bytes
        - referer
    trace:
      sampleProbability: 1.0
---
# For future Context Graph test.
# apiVersion: "config.istio.io/v1alpha2"
# kind: edge
# metadata:
#   name: default
# spec:
#   timestamp: request.time | context.time
#   sourceUid: source.uid | "Unknown"
#   sourceOwner: source.owner | "Unknown"
#   sourceWorkloadName: source.workload.name | "Unknown"
#   sourceWorkloadNamespace: source.workload.namespace | "Unknown"
#   destinationUid: destination.uid | "Unknown"
#   destinationOwner: destination.owner | "Unknown"
#   destinationWorkloadName: destination.workload.name | "Unknown"
#   destinationWorkloadNamespace: destination.workload.namespace | "Unknown"
#   contextProtocol: context.protocol | "Unknown"
#   apiProtocol: api.protocol | "Unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: instance
metadata:
  name: server-accesslog-stackdriver
spec:
  compiledTemplate: logentry
  params:
    severity: '"Info"'
    timestamp: request.time
    variables:
      source_uid: source.uid | ""
      source_ip: source.ip | ip("0.0.0.0")
      source_app: source.labels["app"] | ""
      source_principal: source.principal | ""
      source_name: source.name | ""
      source_workload: source.workload.name | ""
      source_namespace: source.namespace | ""
      source_owner: source.owner | ""
      destination_uid: destination.uid | ""
      destination_app: destination.labels["app"] | ""
      destination_ip: destination.ip | ip("0.0.0.0")
      destination_service_host: destination.service.host | ""
      destination_workload: destination.workload.name | ""
      destination_name: destination.name | ""
      destination_namespace: destination.namespace | ""
      destination_owner: destination.owner | ""
      destination_principal: destination.principal | ""
      api_name: api.service | ""
      api_version: api.version | ""
      api_claims: request.auth.raw_claims | ""
      api_key: request.api_key | request.headers["x-api-key"] | ""
      request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
      protocol: request.scheme | context.protocol | "http"
      method: request.method | ""
      url: request.path | ""
      response_code: response.code | 0
      response_size: response.size | 0
      request_size: request.size | 0
      request_id: request.headers["x-request-id"] | ""
      client_trace_id: request.headers["x-client-trace-id"] | ""
      latency: response.duration | "0ms"
      service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
      user_agent: request.useragent | ""
      response_timestamp: response.time
      received_bytes: request.total_size | 0
      sent_bytes: response.total_size | 0
      referer: request.referer | ""
    monitored_resource_type: '"k8s_container"'
    monitoredResourceDimensions:
      project_id: '""'
      cluster_name: '""'
      namespace_name: destination.namespace | "unknown"
      location: '""'
      container_name: destination.container.name | "unknown"
      pod_name: destination.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: instance
metadata:
  name: server-request-count
spec:
  compiledTemplate: metric
  params:
    value: "1"
    dimensions:
      destination_service_name: destination.service.name | "unknown"
      destination_service_namespace: destination.service.namespace | "unknown"
      destination_port: destination.port | 0
      request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
      request_protocol: context.protocol | "unknown"
      api_version: api.version | "unknown"
      api_name: api.service | "unknown"
      response_code: response.code | 0
      service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
      source_workload_namespace: source.workload.namespace | "unknown"
      source_workload_name: source.workload.name | "unknown"
      source_owner: source.owner | "unknown"
      destination_workload_namespace: destination.workload.namespace | "unknown"
      destination_workload_name: destination.workload.name | "unknown"
      destination_owner: destination.owner | "unknown"
    monitoredResourceType: '"k8s_container"'
    monitoredResourceDimensions:
      project_id: '""'
      cluster_name: '""'
      namespace_name: destination.workload.namespace | "unknown"
      location: '""'
      container_name: destination.container.name | "unknown"
      pod_name: destination.name | "unknown"
---
apiVersion: "config.istio.io/v1alpha2"
kind: instance
metadata:
  name: stackdriver-span
spec:
  compiledTemplate: tracespan
  params:
    traceId: request.headers["x-b3-traceid"]
    spanId: request.headers["x-b3-spanid"] | ""
    parentSpanId: request.headers["x-b3-parentspanid"] | ""
    spanName: destination.service.host | destination.service.name | destination.workload.name | "unknown"
    startTime: request.time
    endTime: response.time
    clientSpan: (context.reporter.kind | "inbound") == "outbound"
    rewriteClientSpanId: "true"
    spanTags:
      destination_service_name: destination.service.name | "unknown"
      destination_service_namespace: destination.service.namespace | "unknown"
      destination_port: destination.port | 0
      request_operation: conditional((context.protocol | "unknown") == "grpc", request.path | "unknown", request.method | "unknown")
      request_protocol: context.protocol | "unknown"
      api_version: api.version | "unknown"
      api_name: api.service | "unknown"
      response_code: response.code | 0
      service_authentication_policy: conditional((context.reporter.kind | "inbound") == "outbound", "unknown", conditional(connection.mtls | false, "mutual_tls", "none"))
      source_workload_namespace: source.workload.namespace | "unknown"
      source_workload_name: source.workload.name | "unknown"
      source_owner: source.owner | "unknown"
      destination_workload_namespace: destination.workload.namespace | "unknown"
      destination_workload_name: destination.workload.name | "unknown"
      destination_owner: destination.owner | "unknown"
      http_url: request.path | ""
      request_size: request.size | 0
      response_size: response.size | 0
      source_ip: source.ip | ip("0.0.0.0")
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: stackdriver-log
spec:
  match: (context.protocol == "http" || context.protocol == "grpc") && (context.reporter.kind | "inbound" == "inbound")
  actions:
  - handler: stackdriver.handler
    instances:
    - server-accesslog-stackdriver
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: stackdriver-server
spec:
  match: (context.protocol == "http" || context.protocol == "grpc") && (context.reporter.kind | "inbound" == "inbound")
  actions:
  - handler: stackdriver.handler
    instances:
    - server-request-count
---
apiVersion: "config.istio.io/v1alpha2"
kind: rule
metadata:
  name: stackdriver-tracing-rule
spec:
  match: context.protocol == "http" || context.protocol == "grpc"  # If omitted match is true.
  actions:
  - handler: stackdriver.handler
    instances:
    - stackdriver-span
---
# For future Context Graph test.
# apiVersion: "config.istio.io/v1alpha2"
# kind: rule
# metadata:
#   name: edgetosd
# spec:
#   match: (context.reporter.kind | "inbound" == "inbound") && (context.protocol | "unknown" != "unknown")
#   actions:
#    - handler: stackdriver.handler
#      instances:
#      - default.edge
---
