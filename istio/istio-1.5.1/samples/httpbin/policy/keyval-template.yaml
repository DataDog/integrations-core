# this config is created through command
# mixgen template -d $GOPATH/src/istio.io/istio/mixer/test/keyval/template_handler_service.descriptor_set -o $GOPATH/src/istio.io/istio/mixer/test/keyval/template.yaml -n keyval
apiVersion: "config.istio.io/v1alpha2"
kind: template
metadata:
  name: keyval
  namespace: istio-system
spec:
  descriptor: ""
---
