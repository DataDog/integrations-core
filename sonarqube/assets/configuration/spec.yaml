name: SonarQube
files:
- name: sonarqube.yaml
  options:
  - template: init_config
    options:
    - template: init_config/jmx
      overrides:
        is_jmx.required: false
        is_jmx.value.example: false
    - template: init_config/http
  - template: instances
    multiple_instances_defined: true
    options:
    - name: web_api
      description: Web API instance example
      options:
      - name: web_endpoint
        description: |
          The SonarQube web endpoint with an exposed API at `/api`. For example:

            web_endpoint: http://<WEB_ENDPOINT>:<PORT>

          Note: This only takes effect when `is_jmx` is set to `false` and is required for all
          API metrics.
        value:
          type: string
      - name: default_tag
        description: |
          The tag name to use for `components` by default.

          Note: This only takes effect when `is_jmx` is set to `false`.
        value:
          type: string
          example: component
      - name: default_include
        description: |
          A list of regular expressions used to collect metrics by default. For brevity,
          you may alter the `sonarqube.` prefix and `.` (dot) characters are treated literally.

          By default, all available metrics are collected.

          Note: This only takes effect when `is_jmx` is set to `false`.
        value:
          type: array
          items:
            type: string
      - name: default_exclude
        description: |
          A list of regular expressions used to collect metrics by default. For brevity,
          you may alter the `sonarqube.` prefix and `.` (dot) characters are treated literally.

          By default, no metrics are excluded.

          Note: This only takes effect when `is_jmx` is set to `false`.
        value:
          type: array
          items:
            type: string
      - name: components
        description: |
          A mapping of components for which metrics should be collected. Each object may override the default
          options. Each component key may be configured with an optional configuration mapping to filter the metrics 
          that should be collected.
          
          The top-level keys are the names of the desired component objects:
          
          components:
            some-project:
            another-project:
              <OPTION_1>: ...
              <OPTION_2>: ...
          
          The available component object options are:

            tag:      Custom tag for the specified component.
            include:  List of metrics to include for the specified component.
            exclude:  List of metrics to exclude for the specified component.
          
          The following example gathers all default metrics for "some-project",
          and only what is included/excluded for "another-project":

            components:
              some-project:
              another-project:
                tag: project-2
                include:
                  - issues.
                  - maintainability.
                  - security.
                exclude:
                  - issues.(false_positive_issues|reopened_issues)
        value:
          type: object
          additionalProperties: true
      - name: components_discovery
        description: |
          A mapping of components autodiscovery patterns for which metrics should be collected. Each included key may 
          be configured with an optional `include` object to filter the metrics that should be collected.  
          
          The following example collects all defect metrics for those components with names starting with "my_project"
          and only the metrics from the "issues" category for projects starting with "issue".
          It also excludes projects starting with "temp" from autodiscovery.
          The maximum total number of projects processed by autodiscovery is 10.
          
            components_discovery:
              limit: 10
              include:
                my_project*:
                issue*:
                  include:
                    - issues.
              exclude:
                - temp*
        options:
          - name: limit
            description: |
              Maximum number of components to be 'autodiscovered'.
            value:
              type: integer
              example: 10
          - name: include
            description: |
              Mapping of regular expressions keys and component config values that will be 'autodiscovered'.
              
              The top-level keys are the regular expressions patterns for the desired component names. 

              include:
                my_project*:
                  <OPTION_1>: ...
                issue*:
                  <OPTION_1>: ...
                  <OPTION_2>: ...

              The available include component object options are:

                tag:      Custom tag for the matching components.
                include:  List of metrics regular expressions patterns to include from the matching components.
                exclude:  List of metrics regular expressions patterns to exclude from the matching components.
            value:
              type: object
              additionalProperties: true
          - name: exclude
            description: |
              List of regular expressions with the patterns of components that will not be 'autodiscovered'
            value:
              type: array
              items:
                type: string

      - template: instances/http
        overrides:
          password.hidden: true
    - name: jmx
      description: Web JMX instance example
      options:
      - template: instances/jmx
        overrides:
          host.required: false
          port.required: false
          is_jmx.hidden: false
          is_jmx.display_priority: 1
          is_jmx.value.default: false
          is_jmx.value.example: true
          is_jmx.description: |
            Whether or not this instance is a configuration for a JMX integration.
            If `is_jmx` is set to true at the init_config level, this flag is ignored.

            Note: Setting `is_jmx` to true disables some configuration options.
          user.description: |
            The user name for connecting to JMX (or HTTP if `is_jmx = false`).
          password.description: |
            The password for connecting to JMX (or HTTP if `is_jmx = false`).
  - template: logs
    example:
    - type: file
      path: /opt/sonarqube/logs/access.log
      source: sonarqube
    - type: file
      path: /opt/sonarqube/logs/ce.log
      source: sonarqube
      log_processing_rules:
      - type: multi_line
        name: log_start_with_date
        pattern: \d{4}\.\d{2}\.\d{2}
    - type: file
      path: /opt/sonarqube/logs/es.log
      source: sonarqube
      log_processing_rules:
      - type: multi_line
        name: log_start_with_date
        pattern: \d{4}\.\d{2}\.\d{2}
    - type: file
      path: /opt/sonarqube/logs/sonar.log
      source: sonarqube
      log_processing_rules:
      - type: multi_line
        name: log_start_with_date
        pattern: \d{4}\.\d{2}\.\d{2}
    - type: file
      path: /opt/sonarqube/logs/web.log
      source: sonarqube
      log_processing_rules:
      - type: multi_line
        name: log_start_with_date
        pattern: \d{4}\.\d{2}\.\d{2}
