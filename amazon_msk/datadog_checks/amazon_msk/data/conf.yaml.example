init_config:

instances:

    ## @param cluster_arn - string - required
    ## The Amazon Resource Name (ARN) that uniquely identifies the cluster.
    #
  - cluster_arn: <CLUSTER_ARN>

    ## @param region_name - string - optional
    ## The name of the region to associate with the API client. By default, the region will be derived
    ## from the `cluster_arn`. Set explicitly to `null` to use additional fallback mechanisms, see:
    ## https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html#configuration
    #
    # region_name: <REGION_NAME>

    ## @param jmx_exporter_port - integer - optional - default: 11001
    ## The port on which the JMX Exporter serves metrics.
    #
    # jmx_exporter_port: 11001

    ## @param node_exporter_port - integer - optional - default: 11002
    ## The port on which the Node Exporter serves metrics.
    #
    # node_exporter_port: 11002

    ## @param tags - list of key:value elements - optional
    ## List of tags to attach to every metric, event and service check emitted by this integration.
    ## Learn more about tagging: https://docs.datadoghq.com/tagging/
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param prometheus_timeout - integer - optional - default: 10
    ## Overrides the default timeout value in second
    #
    # prometheus_timeout: 10

    ## @param health_service_check - boolean - optional - default: true
    ## Send a service check reporting about the health of the prometheus endpoint
    ## It's named amazon_msk.prometheus.health
    #
    # health_service_check: true

    ## @param metrics - list of strings - optional
    ## List of metrics to be fetched from the prometheus endpoint, if there's a
    ## value it'll be renamed. This list should contain at least one metric
    #
    # metrics:
    #   - processor: cpu
    #   - memory: mem
    #   - io

    ## @param label_to_hostname - string - optional
    ## Override the hostname with the value of one label.
    #
    # label_to_hostname: <LABEL>

    ## @param label_joins - object - optional
    ## The label join allows to target a metric and retrieve it's label via a 1:1 mapping
    #
    # label_joins:
    #   target_metric:
    #     label_to_match: <MATCHED_LABEL>
    #     labels_to_get:
    #       - <EXTRA_LABEL_1>
    #       - <EXTRA_LABEL_2>

    ## @param labels_mapper - list of key:value elements - optional
    ## The label mapper allows you to rename labels.
    ## Format is <LABEL_TO_RENAME>: <NEW_LABEL_NAME>
    #
    # labels_mapper:
    #   flavor: origin

    ## @param type_overrides - list of key:value elements - optional
    ## Type override allows you to override a type in the prometheus payload
    ## or type an untyped metrics (they're ignored by default)
    ## Supported <METRIC_TYPE> are `gauge`, `counter`, `histogram`, `summary`
    #
    # type_overrides:
    #   <METRIC_NAME>: <METRIC_TYPE>

    ## @param send_histograms_buckets - boolean - optional - default: true
    ## Set send_histograms_buckets to true to send the histograms bucket.
    #
    # send_histograms_buckets: true

    ## @param send_distribution_buckets - boolean - optional - default: false
    ## Set `send_distribution_buckets` to `true` to send histograms as Datadog distribution metrics.
    ##
    ## Learn more about distribution metrics: https://docs.datadoghq.com/developers/metrics/distributions/
    #
    # send_distribution_buckets: false

    ## @param send_monotonic_counter - boolean - optional - default: true
    ## Set send_monotonic_counter to true to send counters as monotonic counter.
    #
    # send_monotonic_counter: true

    ## @param send_distribution_counts_as_monotonic - boolean - optional - default: false
    ## Set send_distribution_counts_as_monotonic to true to send histograms & summary
    ## counters as monotonic counters (instead of gauges).
    #
    # send_distribution_counts_as_monotonic: false

    ## @param exclude_labels - list of strings - optional
    ## List of label to be excluded
    #
    # exclude_labels:
    #   - timestamp

    ## @param ssl_cert - string - optional
    ## If your prometheus endpoint is secured, enter the path to the certificate and
    ## you should specify the private key in ssl_private_key parameter
    ## or it can be the path to a file containing both the certificate & the private key
    #
    # ssl_cert: "<CERT_PATH>"

    ## @param ssl_private_key - string - optional
    ## Needed if the certificate linked in ssl_cert does not include the private key.
    ## Note: The private key to your local certificate must be unencrypted.
    #
    # ssl_private_key: "<KEY_PATH>"

    ## @param ssl_ca_cert - string - optional
    ## The path to the trusted CA used for generating custom certificates.
    #
    # ssl_ca_cert: "<CA_CERT_PATH>"

    ## @param extra_headers - list of key:value elements - optional
    ## A list of additional HTTP headers to send in queries to the openmetrics endpoint.
    ## Can be combined with autodiscovery template variables. Eg: "Authorization: Bearer %%env_TOKEN%%".
    ## Note: if the "Authorization" header is present it will be replaced when "bearer_token_auth" is enabled.
    #
    # extra_headers:
    #   <HEADER_NAME>: <HEADER_VALUE>

    ## @param bearer_token_auth - boolean - optional - default: false
    ## Set bearer_token_auth to true to add bearer token authentication header.
    ## Note: if bearer_token_path is not set, /var/run/secrets/kubernetes.io/serviceaccount/token is used as a default path
    #
    # bearer_token_auth: true

    ## @param bearer_token_path - string - optional
    ## The path to a kubernetes service account bearer token file, make sure the file exists and mounted correctly.
    ## Note: bearer_token_auth should be set to true to enable adding the token to HTTP headers for authentication.
    #
    # bearer_token_path: "<TOKEN_PATH>"
