name: vSphere
files:
- name: vsphere.yaml
  options:
  - template: init_config
    options:
    - template: init_config/default
  - template: instances
    options:
      - name: host
        required: true
        display_priority: 1
        description: The host used to resolve the vCenter IP. It is either a FQDN or an IP.
        value:
          type: string
          example: <HOSTNAME>
      - name: username
        required: true
        display_priority: 1
        description: |
          The username of the read-only credentials to connect to vCenter
          see https://app.datadoghq.com/account/settings#integrations/vsphere
        value:
          type: string
          example: <USERNAME>
      - name: password
        required: true
        display_priority: 1
        description: |
          The password of the read-only credentials to connect to vCenter.
          see https://app.datadoghq.com/account/settings#integrations/vsphere
        value:
          type: string
          example: <PASSWORD>
      - name: use_legacy_check_version
        required: true
        display_priority: 1
        description: |
          For backward compatibility reasons, it is possible to use a deprecated version of the vSphere
          integration by setting this field to "true".
        value:
            type: boolean
            example: false
      - name: collection_level
        description: |
          A number between 1 and 4 to specify how many metrics will be sent
          1: Only basic metrics - 4: every metric available.
          See https://code.vmware.com/apis/704/vsphere/vim.PerformanceManager.html for more details
          Warning: Depending on the size of the vSphere environment, metric collection can be slow,
          very CPU intensive and put pressure on the vCenter Server
          If you want more control on the metrics to collect, see `metric_filters`
        value:
          type: integer
          example: 1
      - name: collection_type
        description: |
          Should be either 'realtime' or 'historical'
          Use 'realtime' to collect metrics about Hosts and VMs.
          Use 'historical' to collect metrics about Datastores, Datacenters and Clusters.
          If you want both, we suggest creating an additional instance connecting to the same vCenter
          in this configuration file, but you can also set this field to 'both'. This is not recommended
          as the collection of historical metrics will negatively impact the collection of your realtime metrics.
        value:
          type: string
          example: realtime
      - name: collect_events
        description: |
          Whether or not to pull events data from vCenter.
          If you have multiple configuration instances collecting data from the same vCenter server (i.e if you collect
          realtime and historical metrics), you usually want to collect events only once.
          By default this parameter will be 'true' if `collection_type: realtime` and 'false' if
          `collection_type: historical`
          If `collect_events_only: true`, this option has no effect and events will be collected.
        value:
          type: boolean
          display_default: depends on collection_type value
          example: true
      - name: use_collect_events_fallback
        description: |
          Some events might contain invalid types.
          Instead of having the whole event batch fail. Using the fallback will process events one by one
          and skip any event with parsing issues.
        value:
          type: boolean
          example: false
      - name: collect_events_only
        description: Collect events only. If enabled, historical and realtime metrics won't be collected.
        value:
          type: boolean
          example: false
      - name: ssl_verify
        description: Set to false to disable SSL verification, when connecting to vCenter
        value:
          type: boolean
          example: true
      - name: ssl_capath
        description: |
          Set to the absolute file path of a directory containing CA certificates
          in PEM format
        value:
          type: string
          example: "<DIRECTORY_PATH>"
      - name: tls_ignore_warning
        description: |
          If `ssl_verify ` is disabled, security warnings are logged by the check when making http requests.
          Disable those by setting `tls_ignore_warning` to true.

          Note: `tls_ignore_warning` set to true is currently only reliable if used by one instance of one integration.
          If enabled for multiple instances, spurious warnings might still appear even if `tls_ignore_warning` is set
          to true.
        value:
          type: boolean
          example: false
      - name: resource_filters
        description: |
          Each filter in the list is composed of three parameters.
          'resource' is one of vm/host/datastore/datacenter/cluster on which to apply the filter
          'patterns' is a list of matching regex, if any of those matches, the resource will be monitored.
          'type' is either whitelist (default) or blacklist. If a resource is both whitelisted and blacklisted it will be
                 considered blacklisted.
          'property' is the kind of property on which to apply the filter and must be one of those values:
             - name (default) to filter on the resource name (defined by vCenter)
             - inventory_path to filter on the full inventory path
               (ex: \/<Datacenter_name>\/vm\/<FOLDER_NAME>\/.* for all vms in the folder <FOLDER_NAME>)
             - tag to filter only the resources with a given tag.
                   The filter is applied on the value coming from vCenter. In this case, the value to match is the
                   one composed by <TAG_PREFIX><TAG_CATEGORY>:<TAG_VALUE> .
                   The filter also work for tags set by this vSphere integration: vsphere_host,
                   vsphere_datastore_cluster, vsphere_folder, vsphere_cluster, vsphere_compute,
                   vsphere_datacenter and vsphere_datastore.
             - attribute to filter only the resources with a given attribute. Datadog has stricter rules (i.e no space),
                   but the filter is applied on the value coming from vCenter directly.
                   The value to match is the one composed by <ATTR_PREFIX><ATTR_KEY>:<ATTR_VALUE>
             - hostname to filter on the ESXi Host name (only valid for if 'resource' equals 'vm')
             - guest_hostname to filter on the VM hostname (only valid for if 'resource' equals 'vm' and
               if VMware tools are installed)
          Note1: 'datastore', 'datacenter' and 'cluster' filters are ignored when collecting realtime metrics as those
                  resources do not have realtime metrics
          Note2: 'vm' and 'host' filters are ignored when collecting historical metrics as those resources do not have
                  historical metrics

        value:
          display_default: no filter
          example:
            - resource: vm
              property: name
              patterns:
                - <VM_REGEX_1>
                - <VM_REGEX_2>
            - resource: vm
              property: hostname
              patterns:
                - <HOSTNAME_REGEX>
            - resource: vm
              property: tag
              type: blacklist
              patterns:
                - '^env:staging$'
            - resource: vm
              property: tag
              type: whitelist
              patterns:
                - '^env:.*$'
            - resource: vm
              property: guest_hostname
              patterns:
                - <GUEST_HOSTNAME_REGEX>
            - resource: host
              property: inventory_path
              patterns:
                - <INVENTORY_PATH_REGEX>
          type: array
          items:
            type: object
            properties:
              - name: resource
                type: string
              - name: patterns
                type: array
                items:
                  type: string
              - name: type
                type: string
              - name: property
                type: string
      - name: metric_filters
        description: |
          For each resource type (vm, host, datastore, datacenter, cluster) collected,
          you can choose which metric you want to collect using a list of regex.
          If you do not specify a regex for the resource, all metrics will be collected.
          See https://github.com/DataDog/integrations-core/blob/master/vsphere/datadog_checks/vsphere/metrics.py
          for the list of collected metrics (do not prefix them with `vsphere`)
          Note1: 'datastore', 'datacenter' and 'cluster' filters are ignored when collecting realtime metrics as those
                  resources do not have realtime metrics. They will work only with "collection_type: historical".
          Note2: 'vm' and 'host' filters are ignored when collecting historical metrics as those resources do no
                  have historical metrics. They will work only with "collection_type: realtime".
        value:
          display_default: all metrics
          example:
            vm:
              - <VM_REGEX>                 # Only possible with "collection_type: realtime"
            host:
              - <HOST_REGEX>               # Only possible with "collection_type: realtime"
            datastore:
              - <DATASTORE_REGEX>          # Only possible with "collection_type: historical"
            datacenter:
              - <DATACENTER_REGEX>         # Only possible with "collection_type: historical"
            cluster:
              - <CLUSTER_REGEX>            # Only possible with "collection_type: historical"
          type: object
          properties:
            - name: vm
              type: array
              items:
                type: string
            - name: host
              type: array
              items:
                type: string
            - name: datastore
              type: array
              items:
                type: string
            - name: datacenter
              type: array
              items:
                type: string
            - name: cluster
              type: array
              items:
                type: string
      - name: collect_per_instance_filters
        description: |
          Some vSphere metrics can be tagged with instance values.
          For each resource type (vm, host, datastore, cluster) to collect,
          you can choose which metrics you want to collect the instance value as tags using a list of regex.
          See https://github.com/DataDog/integrations-core/blob/master/vsphere/datadog_checks/vsphere/metrics.py
          for the list of collected metrics (do not prefix them with `vsphere`)
          Note1: 'datastore' and 'cluster' are possible only with "collection_type: historical"
          Note2: 'vm' and 'host' are possible only with "collection_type: realtime"
          /!\ Use with parsimony, collecting per-instance metrics might be very expensive for big environments.
        value:
          display_default: none
          example:
            vm:
              - <VM_REGEX>                 # Only possible with "collection_type: realtime"
            host:
              - <HOST_REGEX>               # Only possible with "collection_type: realtime"
            datastore:
              - <DATASTORE_REGEX>          # Only possible with "collection_type: historical"
            cluster:
              - <CLUSTER_REGEX>            # Only possible with "collection_type: historical"
          type: object
          properties:
            - name: vm
              type: array
              items:
                type: string
            - name: host
              type: array
              items:
                type: string
            - name: datastore
              type: array
              items:
                type: string
            - name: cluster
              type: array
              items:
                type: string
      - name: collect_tags
        description: |
          If true, the vSphere Tags will be collected.
          The final tag sent to Datadog is composed of the vSphere tags prefix + vSphere tag category as key and
          vSphere tag name as value:
            <TAG_PREFIX><TAG_CATEGORY>:<TAG_NAME>
          Examples:
          - os_type:windows
          - application_name:my_app
        value:
          type: boolean
          example: false
      - name: tags_prefix
        description: |
          Custom tags attached to vSphere resources will be prefixed with this prefix when collected.
          Example use cases:
            - You have vSphere tags that might conflict with vSphere attributes or tags added by this integration or the
              Datadog Agent
            - You want a prefix to better recognise tags coming from vSphere
          Examples with using `vtag_` prefix:
          - vtag_os_type:windows            # where `os_type` is the category name and `windows` the tag name
          - vtag_application_name:my_app    # where `application_name` is the category name and `my_app` the tag name
          It's not recommend to use `vsphere_` as prefix, since it's already used by this integration
          e.g. vsphere_host, vsphere_type, etc.
        value:
          type: string
          example: ''
      - name: collect_attributes
        description: |
          If true, the vSphere attributes will be collected and submitted as Datadog tags.
          The final tag sent to Datadog is composed of 'attribute_prefix' + vSphere attribute category as key and
          the vSphere attribute value as value:
            <ATTR_PREFIX><ATTR_CATEGORY>:<ATTR_VAL>
          Examples:
          - os_type:windows
          - application_name:my_app
        value:
          type: boolean
          example: false
      - name: attributes_prefix
        description: |
          Custom attributes attached to vSphere resources will be prefixed with this prefix when collected.
          Example use cases:
            - You have vSphere attributes that might conflict with vSphere tags or tags added by this integration or the
              Datadog Agent
            - You want a prefix to better recognise attributes coming from vSphere
          Examples with using `vattr_` prefix:
          - vattr_os_type:windows            # where `os_type` is the attribute key and `windows` the attribute value
          - vattr_application_name:my_app    # where `application_name` is the attribute key and `my_app` the attribute
                                             # value
          It's not recommend to use `vsphere_` as prefix, since it's already used by this integration
          e.g. vsphere_host, vsphere_type, etc.
        value:
          type: string
          example: ''
      - name: use_guest_hostname
        description: |
          If true, the check will use the guest hostname for VMs instead of the VM name
          This requires the VM to have VMware tools installed in it. If the guest hostname is
          not available, it will fallback to the VM name.
          Use this if you install the agent in VMs so that the hosts are not duplicated
          in the web application UI.
        value:
          type: boolean
          example: false
      - name: threads_count
        description: |
          This integration is using threads internally when making queries against the vCenter API.
          Increasing this value will put more charge onto your vCenter server but may improve performances.
        value:
          type: integer
          example: 4
      - name: excluded_host_tags
        description: |
          The vSphere integration collects tags for every ESXi host or VM in your environment.
          Those tags can be `vcenter_server`, vsphere_type`, `vsphere_host`, `vsphere_folder`, `vsphere_cluster`
          `vsphere_compute`, `vsphere_datacenter`, `vsphere_datastore` and are attached to the vSphere metrics by default.
          By default those tags are submitted as host tags but you can submit them as metric tags if you need, see:
          https://docs.datadoghq.com/tagging/using_tags/
          You will lose the ability to filter your hosts on the tags you specify but they will appear faster
          and will remove spikes from some `count by {TAG}` queries.
          A good use case is to set this parameter to `[vsphere_host]`, indeed with VM migrations this tag is expected to
          change often and it is usually helpful to be informed quickly of this change.
        value:
          type: array
          items:
            type: string
          display_default: []
          example:
            - <HOST_TAG>
      - name: metrics_per_query
        description: |
          This value is used to determine the number of metrics the check will retrieve in the same API call.
          If too many API calls are made by the check, consider increasing this value
          If payloads are too large, consider decreasing this value
          A value <= 0 means unlimited: it makes one query for all the monitored objects
        value:
          type: integer
          display_default: 500
          example: 50
      - name: max_historical_metrics
        description: |
          This value is used to determine the number of historical metrics the check will retrieve in the same API call.
          Historical metrics collection is limited by the "config.vpxd.stats.maxQueryMetrics" configuration option
          on vCenter, any API call requesting more metrics than this value will be denied.
          By default, the check will retrieve the value of this parameter but you can override this behavior by specifying
          a value here.
        value:
          type: integer
          example: 256
      - name: batch_tags_collector_size
        description: |
          To fetch tags from your resources, queries are batched. If tags cannot be collected
          it might be that the batch size is too big.
        value:
          type: integer
          example: 200
      - name: batch_property_collector_size
        description: |
          This value is used to determine the maximum number of MORs returned by vCenter in the same API call,
          when exploring the infrastructure.
          If too many API calls are made by the check, consider increasing this value
          If payloads are too large, consider decreasing this value
          A value <= 0 means unlimited: it will query for the maximum number of objects at once
        value:
          type: integer
          example: 500
      - name: refresh_infrastructure_cache_interval
        description: |
          Number of seconds between each discovering and caching of your vSphere environment
          Consider increasing this value if your environment is large, as caching can take some time to complete.
        value:
          type: integer
          example: 300
      - name: refresh_metrics_metadata_cache_interval
        description: |
          Number of seconds between each refresh of the metrics metadata cache
        value:
          type: integer
          example: 1800
      - name: include_datastore_cluster_folder_tag
        description: |
          If a datastore is part of a datastore cluster, the tag "vsphere_datastore_cluster" indicating the datastore
          cluster name is sent along with datastore metrics.
          However, for compatibility reasons, this name is also sent as tag "vsphere_folder".
          You can disable this by setting this property to false.
          The default value is true.
        value:
          type: boolean
          example: true
      - template: instances/default
        overrides:
          empty_default_hostname.display_priority: 1
          empty_default_hostname.required: true
          empty_default_hostname.value.example: true
          empty_default_hostname.description: |
            The vSphere integration is a cluster-level check where metrics are usually unrelated to the host
            on which the Agent runs. Setting this parameter to true, prevents the Agent from attaching the hostname
            (and the host tags) to the metrics. It is especially important to leave this parameter to "true" when you are
            running the agent inside a vSphere VM as the VM tags are going to be unrelated to other metrics.
