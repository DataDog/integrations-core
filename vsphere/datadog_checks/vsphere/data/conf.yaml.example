init_config:

instances:

    ## @param host - string - required
    ## the host used to resolve the vCenter IP
    #
  - host: <HOSTNAME>

    ## @param username - string - required
    ## Enter the username of the read-only credentials
    ## to connect to vCenter
    ## see https://app.datadoghq.com/account/settings#integrations/vsphere
    #
    username: <USERNAME>

    ## @param password - string - required
    ## Enter the password of the read-only credentials
    ## to connect to vCenter
    ## see https://app.datadoghq.com/account/settings#integrations/vsphere
    #
    password: <PASSWORD>

    ## @param collection_level - integer - optional - default: 1
    ## A number between 1 and 4 to specify how many metrics will be sent
    ## 1: Only basic metrics - 4: every metric available.
    ## See https://code.vmware.com/apis/704/vsphere/vim.PerformanceManager.html for more details
    ## Warning: Depending on the size of the vSphere environment, metric collection can be slow,
    ## very CPU intensive and put pressure on the vCenter Server
    ## If you want more control on the metrics to collect, see `metric_filters`
    #
    # collection_level: 1

    ## @param collection_type - string - optional - default: 'realtime'
    ## Should be either 'realtime' or 'historical'
    ## Use 'realtime' to collect metrics about Hosts and VMs.
    ## Use 'historical' to collect metrics about Datastores, Datacenters and Clusters.
    ## If you want both, we suggest creating an additional instance connecting to the same vCenter
    ## in this configuration file, but you can also set this field to 'both'. This is not recommended
    ## as the collection of historical metrics will negatively impact the collection of your realtime metrics.
    #
    # collection_type: realtime

    ## @param collect_events - boolean - optional - default: depends on collection_type value
    ## Whether or not to pull events data from vCenter.
    ## If you have multiple configuration instances collecting data from the same vCenter server (i.e if you collect
    ## realtime and historical metrics), you usually want to collect events only once.
    ## By default this parameter will be 'true' if `collection_type: realtime` and 'false' if
    ## `collection_type: historical`
    #
    # collect_events: <COLLECT_EVENTS>

    ## @param ssl_verify - boolean - optional - default: true
    ## Set to false to disable SSL verification, when connecting to vCenter
    #
    # ssl_verify: true

    ## @param ssl_capath - string - optional
    ## Set to the absolute file path of a directory containing CA certificates
    ## in PEM format
    #
    # ssl_capath: "<DIRECTORY_PATH>"

    ## @param resource_filters - list of objects - optional - default: no filter
    ## Each filter in the list is composed of three parameters.
    ## 'resource' is one of vm/host/datastore/datacenter/cluster on which to apply the filter
    ## 'patterns' is a list of matching regex, if any of those matches, the resource will be monitored.
    ## 'property' is the kind of property on which to apply the filter and must be one of those values:
    ##    - name (default) to filter on the resource name (defined by vCenter)
    ##    - inventory_path to filter on the full inventory path
    ##      (ex: \/<Datacenter_name>\/vm\/<FOLDER_NAME>\/.* for all vms in the folder <FOLDER_NAME>)
    ##    - hostname to filter on the ESXi Host name (only valid for if 'resource' equals 'vm')
    ##    - guest_hostname to filter on the VM hostname (only valid for if 'resource' equals 'vm' and
    ##      if VMware tools are installed)
    ## Note1: 'datastore', 'datacenter' and 'cluster' filters are ignored when collecting realtime metrics as those
    ##         resources do not have realtime metrics
    ## Note2: 'vm' and 'host' filters are ignored when collecting historical metrics as those resources do not have
    ##         historical metrics
    #
    # resource_filters:
    #   - resource: vm
    #     property: name
    #     patterns:
    #       - <VM_REGEX_1>
    #       - <VM_REGEX_2>
    #   - resource: vm
    #     property: hostname
    #     patterns:
    #       - <HOSTNAME_REGEX>
    #   - resource: vm
    #     property: guest_hostname
    #     patterns:
    #       - <GUEST_HOSTNAME_REGEX>
    #   - resource: host
    #     property: inventory_path
    #     patterns:
    #       - <INVENTORY_PATH_REGEX>

    ## @param metric_filters - object - optional - default: all metrics
    ## For each resource type (vm, host, datastore, datacenter, cluster) collected,
    ## you can choose which metric you want to collect using a list of regex.
    ## If you do not specify a regex for the resource, all metrics will be collected.
    ## See https://github.com/DataDog/integrations-core/blob/master/vsphere/datadog_checks/vsphere/metrics.py
    ## for the list of collected metrics (do not prefix them with `vsphere`)
    ## Note1: 'datastore', 'datacenter' and 'cluster' filters are ignored when collecting realtime metrics as those
    ##         resources do not have realtime metrics
    ## Note2: 'vm' and 'host' filters are ignored when collecting historical metrics as those resources do no
    ##         have historical metrics
    #
    # metric_filters:
    #   vm:
    #     - <VM_REGEX>                 # Only possible with "collection_type: realtime"
    #   host:
    #     - <HOST_REGEX>               # Only possible with "collection_type: realtime"
    #   datastore:
    #     - <DATASTORE_REGEX>          # Only possible with "collection_type: historical"
    #   datacenter:
    #     - <DATACENTER_REGEX>         # Only possible with "collection_type: historical"
    #   cluster:
    #     - <CLUSTER_REGEX>            # Only possible with "collection_type: historical"

    ## @param collect_per_instance_filters - object - optional - default: none
    ## For each resource type (vm, host, datastore, datacenter, cluster) to collect,
    ## you can choose which metric you want to collect the instance value using a list of regex.
    ## See https://github.com/DataDog/integrations-core/blob/master/vsphere/datadog_checks/vsphere/metrics.py
    ## for the list of collected metrics (do not prefix them with `vsphere`)
    ## /!\ Use with parsimony, collecting per-instance metrics might be very expensive for big environments.
    #
    # collect_per_instance_filters:
    #   vm:
    #     - <VM_REGEX>                 # Only possible with "collection_type: realtime"
    #   host:
    #     - <HOST_REGEX>               # Only possible with "collection_type: realtime"
    #   datastore:
    #     - <DATASTORE_REGEX>          # Only possible with "collection_type: historical"
    #   datacenter:
    #     - <DATACENTER_REGEX>         # Only possible with "collection_type: historical"
    #   cluster:
    #     - <CLUSTER_REGEX>            # Only possible with "collection_type: historical"

    ## @param use_guest_hostname - boolean - optional - default: false
    ## If true, the check will use the guest hostname for VMs instead of the VM name
    ## This requires the VM to have VMware tools installed in it. If the guest hostname is
    ## not available, it will fallback to the VM name.
    ## Use this if you install the agent in VMs so that the hosts are not duplicated
    ## in the web application UI.
    #
    # use_guest_hostname: false

    ## @param threads_count - integer - optional - default: 4
    ## This integration is using threads internally when making queries against the vCenter API.
    ## Increasing this value will put more charge onto your vCenter server but may improve performances.
    #
    # threads_count: 4

    ## @param excluded_host_tags - list of strings - optional - default: []
    ## The vSphere integration collects tags for every ESXi host or VM in your environment.
    ## Those tags can be `vcenter_server`, vsphere_type`, `vsphere_host`, `vsphere_folder`, `vsphere_cluster`
    ## `vsphere_compute`, `vsphere_datacenter`, `vsphere_datastore` and are attached to the vSphere metrics by default.
    ## By default those tags are submitted as host tags but you can submit them as metric tags if you need, see:
    ## https://docs.datadoghq.com/tagging/using_tags/
    ## You will lose the ability to filter your hosts on the tags you specify but they will appear faster
    ## and will remove spikes from some `count by {TAG}` queries.
    ## A good use case is to set this parameter to `[vsphere_host]`, indeed with VM migrations this tag is expected to
    ## change often and it is usually helpful to be informed quickly of this change.
    #
    # excluded_host_tags: false

    ## @param metrics_per_query - integer - optional - default: 500
    ## This value is used to determine the number of metrics the check will retrieve in the same API call.
    ## If too many API calls are made by the check, consider increasing this value
    ## If payloads are too large, consider decreasing this value
    ## A value <= 0 means unlimited: it makes one query for all the monitored objects
    #
    # metrics_per_query: 50

    ## @param max_historical_metrics - integer - optional
    ## This value is used to determine the number of historical metrics the check will retrieve in the same API call.
    ## Historical metrics collection is limited by the "config.vpxd.stats.maxQueryMetrics" configuration option
    ## on vCenter, any API call requesting more metrics than this value will be denied.
    ## By default, the check will retrieve the value of this parameter but you can override this behavior by specifying
    ## a value here.
    #
    # max_historical_metrics: 256

    ## @param batch_property_collector_size - integer - optional - default: 500
    ## This value is used to determine the maximum number of MORs returned by vCenter in the same API call,
    ## when exploring the infrastructure.
    ## If too many API calls are made by the check, consider increasing this value
    ## If payloads are too large, consider decreasing this value
    ## A value <= 0 means unlimited: it will query for the maximum number of objects at once
    #
    # batch_property_collector_size: 500

    ## @param refresh_infrastructure_cache_interval - integer - optional - default: 300
    ## Number of seconds between each discovering and caching of your vSphere environment
    ## Consider increasing this value if your environment is large, as caching can take some time to complete.
    #
    # refresh_infrastructure_cache_interval: 300

    ## @param refresh_metrics_metadata_cache_interval - integer - optional - default: 1800
    ## Number of seconds between each refresh of the metrics metadata cache
    #
    # refresh_metrics_metadata_cache_interval: 1800

    ## @param use_legacy_check_version - boolean - required
    ## For backward compatibility reasons, it is possible to use a deprecated version of the vsphere integration by
    ## setting this field to "true".
    #
    use_legacy_check_version: false

    ## @param empty_default_hostname - boolean - optional - default: false
    ## The vSphere integration is a cluster-level check where metrics are usually unrelated to the host
    ## on which the agent runs. Setting this parameter to true, prevents the agent from attaching the hostname
    ## (and the host tags) to the metrics. It is especially important to leave this parameter to "true" when you are
    ## running the agent inside a vSphere VM as the VM tags are going to be unrelated to other metrics.
    ##
    #
    empty_default_hostname: true
