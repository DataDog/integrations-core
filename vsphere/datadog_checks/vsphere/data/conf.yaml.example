## All options defined here are available to all instances.
#
init_config:

    ## @param service - string - optional
    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.
    ##
    ## Additionally, this sets the default `service` for every log source.
    #
    # service: <SERVICE>

    ## REST API options
    ## Those options are used when making vSphere REST API calls to retrieve vSphere tags
    ## when `collect_tags` instance config is enabled.
    #
    rest_api_options:

        ## @param proxy - mapping - optional
        ## Set HTTP or HTTPS proxies for all instances. Use the `no_proxy` list
        ## to specify hosts that must bypass proxies.
        ##
        ## The SOCKS protocol is also supported like so:
        ##
        ##   socks5://user:pass@host:port
        ##
        ## Using the scheme `socks5` causes the DNS resolution to happen on the
        ## client, rather than on the proxy server. This is in line with `curl`,
        ## which uses the scheme to decide whether to do the DNS resolution on
        ## the client or proxy. If you want to resolve the domains on the proxy
        ## server, use `socks5h` as the scheme.
        #
        # proxy:
        #   http: http://<PROXY_SERVER_FOR_HTTP>:<PORT>
        #   https: https://<PROXY_SERVER_FOR_HTTPS>:<PORT>
        #   no_proxy:
        #   - <HOSTNAME_1>
        #   - <HOSTNAME_2>

        ## @param skip_proxy - boolean - optional - default: false
        ## If set to `true`, this makes the check bypass any proxy
        ## settings enabled and attempt to reach services directly.
        #
        # skip_proxy: false

        ## @param timeout - number - optional - default: 10
        ## The timeout for connecting to services.
        #
        # timeout: 10

## Every instance is scheduled independent of the others.
#
instances:

    ## @param host - string - required
    ## The host used to resolve the vCenter IP. It is either a FQDN or an IP.
    #
  - host: <HOSTNAME>

    ## @param username - string - required
    ## The username of the read-only credentials to connect to vCenter
    ## see https://app.datadoghq.com/account/settings#integrations/vsphere
    #
    username: <USERNAME>

    ## @param password - string - required
    ## The password of the read-only credentials to connect to vCenter.
    ## see https://app.datadoghq.com/account/settings#integrations/vsphere
    #
    password: <PASSWORD>

    ## @param use_legacy_check_version - boolean - required
    ## For backward compatibility reasons, it is possible to use a deprecated version of the vSphere
    ## integration by setting this field to "true".
    #
    use_legacy_check_version: false

    ## @param empty_default_hostname - boolean - required
    ## The vSphere integration is a cluster-level check where metrics are usually unrelated to the host
    ## on which the Agent runs. Setting this parameter to true, prevents the Agent from attaching the hostname
    ## (and the host tags) to the metrics. It is especially important to leave this parameter to "true" when you are
    ## running the agent inside a vSphere VM as the VM tags are going to be unrelated to other metrics.
    #
    empty_default_hostname: true

    ## @param collection_level - integer - optional - default: 1
    ## A number between 1 and 4 to specify how many metrics will be sent
    ## 1: Only basic metrics - 4: every metric available.
    ## See https://code.vmware.com/apis/704/vsphere/vim.PerformanceManager.html for more details
    ## Warning: Depending on the size of the vSphere environment, metric collection can be slow,
    ## very CPU intensive and put pressure on the vCenter Server
    ## If you want more control on the metrics to collect, see `metric_filters`
    #
    # collection_level: 1

    ## @param collection_type - string - optional - default: realtime
    ## Should be either 'realtime' or 'historical'
    ## Use 'realtime' to collect metrics about Hosts and VMs.
    ## Use 'historical' to collect metrics about Datastores, Datacenters and Clusters.
    ## If you want both, we suggest creating an additional instance connecting to the same vCenter
    ## in this configuration file, but you can also set this field to 'both'. This is not recommended
    ## as the collection of historical metrics will negatively impact the collection of your realtime metrics.
    #
    # collection_type: realtime

    ## @param collect_events - boolean - optional
    ## Whether or not to pull events data from vCenter.
    ## If you have multiple configuration instances collecting data from the same vCenter server (i.e if you collect
    ## realtime and historical metrics), you usually want to collect events only once.
    ## By default this parameter will be 'true' if `collection_type: realtime` and 'false' if
    ## `collection_type: historical`
    ## If `collect_events_only: true`, this option has no effect and events will be collected.
    #
    # collect_events: true

    ## @param use_collect_events_fallback - boolean - optional - default: false
    ## Some events might contain invalid types.
    ## Instead of having the whole event batch fail. Using the fallback will process events one by one
    ## and skip any event with parsing issues.
    #
    # use_collect_events_fallback: false

    ## @param collect_events_only - boolean - optional - default: false
    ## Collect events only. If enabled, historical and realtime metrics won't be collected.
    #
    # collect_events_only: false

    ## @param ssl_verify - boolean - optional - default: true
    ## Set to false to disable SSL verification, when connecting to vCenter
    #
    # ssl_verify: true

    ## @param ssl_capath - string - optional
    ## Set to the absolute file path of a directory containing CA certificates
    ## in PEM format
    #
    # ssl_capath: <DIRECTORY_PATH>

    ## @param tls_ignore_warning - boolean - optional - default: false
    ## If `ssl_verify ` is disabled, security warnings are logged by the check when making http requests.
    ## Disable those by setting `tls_ignore_warning` to true.
    ##
    ## Note: `tls_ignore_warning` set to true is currently only reliable if used by one instance of one integration.
    ## If enabled for multiple instances, spurious warnings might still appear even if `tls_ignore_warning` is set
    ## to true.
    #
    # tls_ignore_warning: false

    ## @param resource_filters - list of mappings - optional
    ## Each filter in the list is composed of three parameters.
    ## 'resource' is one of vm/host/datastore/datacenter/cluster on which to apply the filter
    ## 'patterns' is a list of matching regex, if any of those matches, the resource will be monitored.
    ## 'type' is either whitelist (default) or blacklist. If a resource is both whitelisted and blacklisted it will be
    ##        considered blacklisted.
    ## 'property' is the kind of property on which to apply the filter and must be one of those values:
    ##    - name (default) to filter on the resource name (defined by vCenter)
    ##    - inventory_path to filter on the full inventory path
    ##      (ex: \/<Datacenter_name>\/vm\/<FOLDER_NAME>\/.* for all vms in the folder <FOLDER_NAME>)
    ##    - tag to filter only the resources with a given tag.
    ##          The filter is applied on the value coming from vCenter. In this case, the value to match is the
    ##          one composed by <TAG_PREFIX><TAG_CATEGORY>:<TAG_VALUE> .
    ##          The filter also work for tags set by this vSphere integration: vsphere_host,
    ##          vsphere_datastore_cluster, vsphere_folder, vsphere_cluster, vsphere_compute,
    ##          vsphere_datacenter and vsphere_datastore.
    ##    - attribute to filter only the resources with a given attribute. Datadog has stricter rules (i.e no space),
    ##          but the filter is applied on the value coming from vCenter directly.
    ##          The value to match is the one composed by <ATTR_PREFIX><ATTR_KEY>:<ATTR_VALUE>
    ##    - hostname to filter on the ESXi Host name (only valid for if 'resource' equals 'vm')
    ##    - guest_hostname to filter on the VM hostname (only valid for if 'resource' equals 'vm' and
    ##      if VMware tools are installed)
    ## Note1: 'datastore', 'datacenter' and 'cluster' filters are ignored when collecting realtime metrics as those
    ##         resources do not have realtime metrics
    ## Note2: 'vm' and 'host' filters are ignored when collecting historical metrics as those resources do not have
    ##         historical metrics
    #
    # resource_filters:
    #   - resource: vm
    #     property: name
    #     patterns:
    #     - <VM_REGEX_1>
    #     - <VM_REGEX_2>
    #   - resource: vm
    #     property: hostname
    #     patterns:
    #     - <HOSTNAME_REGEX>
    #   - resource: vm
    #     property: tag
    #     type: blacklist
    #     patterns:
    #     - ^env:staging$
    #   - resource: vm
    #     property: tag
    #     type: whitelist
    #     patterns:
    #     - ^env:.*$
    #   - resource: vm
    #     property: guest_hostname
    #     patterns:
    #     - <GUEST_HOSTNAME_REGEX>
    #   - resource: host
    #     property: inventory_path
    #     patterns:
    #     - <INVENTORY_PATH_REGEX>

    ## @param metric_filters - mapping - optional
    ## For each resource type (vm, host, datastore, datacenter, cluster) collected,
    ## you can choose which metric you want to collect using a list of regex.
    ## If you do not specify a regex for the resource, all metrics will be collected.
    ## See https://github.com/DataDog/integrations-core/blob/master/vsphere/datadog_checks/vsphere/metrics.py
    ## for the list of collected metrics (do not prefix them with `vsphere`)
    ## Note1: 'datastore', 'datacenter' and 'cluster' filters are ignored when collecting realtime metrics as those
    ##         resources do not have realtime metrics. They will work only with "collection_type: historical".
    ## Note2: 'vm' and 'host' filters are ignored when collecting historical metrics as those resources do no
    ##         have historical metrics. They will work only with "collection_type: realtime".
    #
    # metric_filters:
    #   vm:
    #   - <VM_REGEX>
    #   host:
    #   - <HOST_REGEX>
    #   datastore:
    #   - <DATASTORE_REGEX>
    #   datacenter:
    #   - <DATACENTER_REGEX>
    #   cluster:
    #   - <CLUSTER_REGEX>

    ## @param collect_per_instance_filters - mapping - optional
    ## Some vSphere metrics can be tagged with instance values.
    ## For each resource type (vm, host, datastore, cluster) to collect,
    ## you can choose which metrics you want to collect the instance value as tags using a list of regex.
    ## See https://github.com/DataDog/integrations-core/blob/master/vsphere/datadog_checks/vsphere/metrics.py
    ## for the list of collected metrics (do not prefix them with `vsphere`)
    ## Note1: 'datastore' and 'cluster' are possible only with "collection_type: historical"
    ## Note2: 'vm' and 'host' are possible only with "collection_type: realtime"
    ## /!\ Use with parsimony, collecting per-instance metrics might be very expensive for big environments.
    #
    # collect_per_instance_filters:
    #   vm:
    #   - <VM_REGEX>
    #   host:
    #   - <HOST_REGEX>
    #   datastore:
    #   - <DATASTORE_REGEX>
    #   cluster:
    #   - <CLUSTER_REGEX>

    ## @param collect_tags - boolean - optional - default: false
    ## If true, the vSphere Tags will be collected.
    ## The final tag sent to Datadog is composed of the vSphere tags prefix + vSphere tag category as key and
    ## vSphere tag name as value:
    ##   <TAG_PREFIX><TAG_CATEGORY>:<TAG_NAME>
    ## Examples:
    ## - os_type:windows
    ## - application_name:my_app
    ## Note: Tag collection works only for vSphere 6.5 and above.
    ##       Tag collection needs vSphere REST API Tagging and an endpoint (tagging.tag_association.object_to_tags)
    ##       only available from vSphere 6.5.
    #
    # collect_tags: false

    ## @param tags_prefix - string - optional
    ## Custom tags attached to vSphere resources will be prefixed with this prefix when collected.
    ## Example use cases:
    ##   - You have vSphere tags that might conflict with vSphere attributes or tags added by this integration or the
    ##     Datadog Agent
    ##   - You want a prefix to better recognise tags coming from vSphere
    ## Examples with using `vtag_` prefix:
    ## - vtag_os_type:windows            # where `os_type` is the category name and `windows` the tag name
    ## - vtag_application_name:my_app    # where `application_name` is the category name and `my_app` the tag name
    ## It's not recommend to use `vsphere_` as prefix, since it's already used by this integration
    ## e.g. vsphere_host, vsphere_type, etc.
    #
    # tags_prefix: ''

    ## @param collect_attributes - boolean - optional - default: false
    ## If true, the vSphere attributes will be collected and submitted as Datadog tags.
    ## The final tag sent to Datadog is composed of 'attribute_prefix' + vSphere attribute category as key and
    ## the vSphere attribute value as value:
    ##   <ATTR_PREFIX><ATTR_CATEGORY>:<ATTR_VAL>
    ## Examples:
    ## - os_type:windows
    ## - application_name:my_app
    #
    # collect_attributes: false

    ## @param attributes_prefix - string - optional
    ## Custom attributes attached to vSphere resources will be prefixed with this prefix when collected.
    ## Example use cases:
    ##   - You have vSphere attributes that might conflict with vSphere tags or tags added by this integration or the
    ##     Datadog Agent
    ##   - You want a prefix to better recognise attributes coming from vSphere
    ## Examples with using `vattr_` prefix:
    ## - vattr_os_type:windows            # where `os_type` is the attribute key and `windows` the attribute value
    ## - vattr_application_name:my_app    # where `application_name` is the attribute key and `my_app` the attribute
    ##                                    # value
    ## It's not recommend to use `vsphere_` as prefix, since it's already used by this integration
    ## e.g. vsphere_host, vsphere_type, etc.
    #
    # attributes_prefix: ''

    ## @param use_guest_hostname - boolean - optional - default: false
    ## If true, the check will use the guest hostname for VMs instead of the VM name
    ## This requires the VM to have VMware tools installed in it. If the guest hostname is
    ## not available, it will fallback to the VM name.
    ## Use this if you install the agent in VMs so that the hosts are not duplicated
    ## in the web application UI.
    ## Note: If VMs are duplicated in the Infrastructure List, follow these troubleshooting steps
    ##       https://docs.datadoghq.com/integrations/faq/troubleshooting-duplicated-hosts-with-vsphere/.
    #
    # use_guest_hostname: false

    ## @param threads_count - integer - optional - default: 4
    ## This integration is using threads internally when making queries against the vCenter API.
    ## Increasing this value will put more charge onto your vCenter server but may improve performances.
    #
    # threads_count: 4

    ## @param excluded_host_tags - list of strings - optional - default: []
    ## The vSphere integration collects tags for every ESXi host or VM in your environment.
    ## Those tags can be `vcenter_server`, vsphere_type`, `vsphere_host`, `vsphere_folder`, `vsphere_cluster`
    ## `vsphere_compute`, `vsphere_datacenter`, `vsphere_datastore` and are attached to the vSphere metrics by default.
    ## By default those tags are submitted as host tags but you can submit them as metric tags if you need, see:
    ## https://docs.datadoghq.com/tagging/using_tags/
    ## You will lose the ability to filter your hosts on the tags you specify but they will appear faster
    ## and will remove spikes from some `count by {TAG}` queries.
    ## A good use case is to set this parameter to `[vsphere_host]`, indeed with VM migrations this tag is expected to
    ## change often and it is usually helpful to be informed quickly of this change.
    #
    # excluded_host_tags:
    #   - <HOST_TAG>

    ## @param metrics_per_query - integer - optional - default: 500
    ## This value is used to determine the number of metrics the check will retrieve in the same API call.
    ## If too many API calls are made by the check, consider increasing this value
    ## If payloads are too large, consider decreasing this value
    ## A value <= 0 means unlimited: it makes one query for all the monitored objects
    #
    # metrics_per_query: 50

    ## @param max_historical_metrics - integer - optional - default: 256
    ## This value is used to determine the number of historical metrics the check will retrieve in the same API call.
    ## Historical metrics collection is limited by the "config.vpxd.stats.maxQueryMetrics" configuration option
    ## on vCenter, any API call requesting more metrics than this value will be denied.
    ## By default, the check will retrieve the value of this parameter but you can override this behavior by specifying
    ## a value here.
    #
    # max_historical_metrics: 256

    ## @param batch_tags_collector_size - integer - optional - default: 200
    ## To fetch tags from your resources, queries are batched. If tags cannot be collected
    ## it might be that the batch size is too big.
    #
    # batch_tags_collector_size: 200

    ## @param batch_property_collector_size - integer - optional - default: 500
    ## This value is used to determine the maximum number of MORs returned by vCenter in the same API call,
    ## when exploring the infrastructure.
    ## If too many API calls are made by the check, consider increasing this value
    ## If payloads are too large, consider decreasing this value
    ## A value <= 0 means unlimited: it will query for the maximum number of objects at once
    #
    # batch_property_collector_size: 500

    ## @param refresh_infrastructure_cache_interval - integer - optional - default: 300
    ## Number of seconds between each discovering and caching of your vSphere environment
    ## Consider increasing this value if your environment is large, as caching can take some time to complete.
    #
    # refresh_infrastructure_cache_interval: 300

    ## @param refresh_metrics_metadata_cache_interval - integer - optional - default: 1800
    ## Number of seconds between each refresh of the metrics metadata cache
    #
    # refresh_metrics_metadata_cache_interval: 1800

    ## @param include_datastore_cluster_folder_tag - boolean - optional - default: true
    ## If a datastore is part of a datastore cluster, the tag "vsphere_datastore_cluster" indicating the datastore
    ## cluster name is sent along with datastore metrics.
    ## However, for compatibility reasons, this name is also sent as tag "vsphere_folder".
    ## You can disable this by setting this property to false.
    ## The default value is true.
    #
    # include_datastore_cluster_folder_tag: true

    ## REST API options
    ## The options are used when making vSphere REST API calls to retrieve vSphere tags
    ## when `collect_tags` instance config is enabled.
    #
    rest_api_options:

        ## @param proxy - mapping - optional
        ## This overrides the `proxy` setting in `init_config`.
        ##
        ## Set HTTP or HTTPS proxies for this instance. Use the `no_proxy` list
        ## to specify hosts that must bypass proxies.
        ##
        ## The SOCKS protocol is also supported, for example:
        ##
        ##   socks5://user:pass@host:port
        ##
        ## Using the scheme `socks5` causes the DNS resolution to happen on the
        ## client, rather than on the proxy server. This is in line with `curl`,
        ## which uses the scheme to decide whether to do the DNS resolution on
        ## the client or proxy. If you want to resolve the domains on the proxy
        ## server, use `socks5h` as the scheme.
        #
        # proxy:
        #   http: http://<PROXY_SERVER_FOR_HTTP>:<PORT>
        #   https: https://<PROXY_SERVER_FOR_HTTPS>:<PORT>
        #   no_proxy:
        #   - <HOSTNAME_1>
        #   - <HOSTNAME_2>

        ## @param skip_proxy - boolean - optional - default: false
        ## This overrides the `skip_proxy` setting in `init_config`.
        ##
        ## If set to `true`, this makes the check bypass any proxy
        ## settings enabled and attempt to reach services directly.
        #
        # skip_proxy: false

        ## @param auth_type - string - optional - default: basic
        ## The type of authentication to use. The available types (and related options) are:
        ##
        ##   - basic
        ##     |__ username
        ##     |__ password
        ##     |__ use_legacy_auth_encoding
        ##   - digest
        ##     |__ username
        ##     |__ password
        ##   - ntlm
        ##     |__ ntlm_domain
        ##     |__ password
        ##   - kerberos
        ##     |__ kerberos_auth
        ##     |__ kerberos_cache
        ##     |__ kerberos_delegate
        ##     |__ kerberos_force_initiate
        ##     |__ kerberos_hostname
        ##     |__ kerberos_keytab
        ##     |__ kerberos_principal
        ##   - aws
        ##     |__ aws_region
        ##     |__ aws_host
        ##     |__ aws_service
        ##
        ## The `aws` auth type relies on boto3 to automatically gather AWS credentials, for example: from `.aws/credentials`.
        ## Details: https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html#configuring-credentials
        #
        # auth_type: basic

        ## @param use_legacy_auth_encoding - boolean - optional - default: true
        ## When `auth_type` is set to `basic`, this determines whether to encode as `latin1` rather than `utf-8`.
        #
        # use_legacy_auth_encoding: true

        ## @param username - string - optional
        ## The username to use if services are behind basic or digest auth.
        #
        # username: <USERNAME>

        ## @param password - string - optional
        ## The password to use if services are behind basic or NTLM auth.
        #
        # password: <PASSWORD>

        ## @param ntlm_domain - string - optional
        ## If your services use NTLM authentication, specify
        ## the domain used in the check. For NTLM Auth, append
        ## the username to domain, not as the `username` parameter.
        #
        # ntlm_domain: <NTLM_DOMAIN>\<USERNAME>

        ## @param kerberos_auth - string - optional - default: disabled
        ## If your services use Kerberos authentication, you can specify the Kerberos
        ## strategy to use between:
        ##
        ##   - required
        ##   - optional
        ##   - disabled
        ##
        ## See https://github.com/requests/requests-kerberos#mutual-authentication
        #
        # kerberos_auth: disabled

        ## @param kerberos_cache - string - optional
        ## Sets the KRB5CCNAME environment variable.
        ## It should point to a credential cache with a valid TGT.
        #
        # kerberos_cache: <KERBEROS_CACHE>

        ## @param kerberos_delegate - boolean - optional - default: false
        ## Set to `true` to enable Kerberos delegation of credentials to a server that requests delegation.
        ##
        ## See https://github.com/requests/requests-kerberos#delegation
        #
        # kerberos_delegate: false

        ## @param kerberos_force_initiate - boolean - optional - default: false
        ## Set to `true` to preemptively initiate the Kerberos GSS exchange and
        ## present a Kerberos ticket on the initial request (and all subsequent).
        ##
        ## See https://github.com/requests/requests-kerberos#preemptive-authentication
        #
        # kerberos_force_initiate: false

        ## @param kerberos_hostname - string - optional
        ## Override the hostname used for the Kerberos GSS exchange if its DNS name doesn't
        ## match its Kerberos hostname, for example: behind a content switch or load balancer.
        ##
        ## See https://github.com/requests/requests-kerberos#hostname-override
        #
        # kerberos_hostname: <KERBEROS_HOSTNAME>

        ## @param kerberos_principal - string - optional
        ## Set an explicit principal, to force Kerberos to look for a
        ## matching credential cache for the named user.
        ##
        ## See https://github.com/requests/requests-kerberos#explicit-principal
        #
        # kerberos_principal: <KERBEROS_PRINCIPAL>

        ## @param kerberos_keytab - string - optional
        ## Set the path to your Kerberos key tab file.
        #
        # kerberos_keytab: <KEYTAB_FILE_PATH>

        ## @param auth_token - mapping - optional
        ## This allows for the use of authentication information from dynamic sources.
        ## Both a reader and writer must be configured.
        ##
        ## The available readers are:
        ##
        ##   - type: file
        ##     path (required): The absolute path for the file to read from.
        ##     pattern: A regular expression pattern with a single capture group used to find the
        ##              token rather than using the entire file, for example: Your secret is (.+)
        ##
        ## The available writers are:
        ##
        ##   - type: header
        ##     name (required): The name of the field, for example: Authorization
        ##     value: The template value, for example `Bearer <TOKEN>`. The default is: <TOKEN>
        ##     placeholder: The substring in `value` to replace by the token, defaults to: <TOKEN>
        #
        # auth_token:
        #   reader:
        #     type: <READER_TYPE>
        #     <OPTION_1>: <VALUE_1>
        #     <OPTION_2>: <VALUE_2>
        #   writer:
        #     type: <WRITER_TYPE>
        #     <OPTION_1>: <VALUE_1>
        #     <OPTION_2>: <VALUE_2>

        ## @param aws_region - string - optional
        ## If your services require AWS Signature Version 4 signing, set the region.
        ##
        ## See https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
        #
        # aws_region: <AWS_REGION>

        ## @param aws_host - string - optional
        ## If your services require AWS Signature Version 4 signing, set the host.
        ##
        ## Note: This setting is not necessary for official integrations.
        ##
        ## See https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
        #
        # aws_host: <AWS_HOST>

        ## @param aws_service - string - optional
        ## If your services require AWS Signature Version 4 signing, set the service code. For a list
        ## of available service codes, see https://docs.aws.amazon.com/general/latest/gr/rande.html
        ##
        ## Note: This setting is not necessary for official integrations.
        ##
        ## See https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
        #
        # aws_service: <AWS_SERVICE>

        ## @param tls_verify - boolean - optional - default: true
        ## Instructs the check to validate the TLS certificate of services.
        #
        # tls_verify: true

        ## @param tls_use_host_header - boolean - optional - default: false
        ## If a `Host` header is set, this enables its use for SNI (matching against the TLS certificate CN or SAN).
        #
        # tls_use_host_header: false

        ## @param tls_ignore_warning - boolean - optional - default: false
        ## If `tls_verify` is disabled, security warnings are logged by the check.
        ## Disable those by setting `tls_ignore_warning` to true.
        ##
        ## Note: `tls_ignore_warning` set to true is currently only reliable if used by one instance of one integration.
        ## If enabled for multiple instances, spurious warnings might still appear even if `tls_ignore_warning` is set
        ## to true.
        #
        # tls_ignore_warning: false

        ## @param tls_cert - string - optional
        ## The path to a single file in PEM format containing a certificate as well as any
        ## number of CA certificates needed to establish the certificate's authenticity for
        ## use when connecting to services. It may also contain an unencrypted private key to use.
        #
        # tls_cert: <CERT_PATH>

        ## @param tls_private_key - string - optional
        ## The unencrypted private key to use for `tls_cert` when connecting to services. This is
        ## required if `tls_cert` is set and it does not already contain a private key.
        #
        # tls_private_key: <PRIVATE_KEY_PATH>

        ## @param tls_ca_cert - string - optional
        ## The path to a file of concatenated CA certificates in PEM format or a directory
        ## containing several CA certificates in PEM format. If a directory, the directory
        ## must have been processed using the c_rehash utility supplied with OpenSSL. See:
        ## https://www.openssl.org/docs/manmaster/man3/SSL_CTX_load_verify_locations.html
        #
        # tls_ca_cert: <CA_CERT_PATH>

        ## @param headers - mapping - optional
        ## The headers parameter allows you to send specific headers with every request.
        ## You can use it for explicitly specifying the host header or adding headers for
        ## authorization purposes.
        ##
        ## This overrides any default headers.
        #
        # headers:
        #   Host: <ALTERNATIVE_HOSTNAME>
        #   X-Auth-Token: <AUTH_TOKEN>

        ## @param extra_headers - mapping - optional
        ## Additional headers to send with every request.
        #
        # extra_headers:
        #   Host: <ALTERNATIVE_HOSTNAME>
        #   X-Auth-Token: <AUTH_TOKEN>

        ## @param timeout - number - optional - default: 10
        ## The timeout for accessing services.
        ##
        ## This overrides the `timeout` setting in `init_config`.
        #
        # timeout: 10

        ## @param connect_timeout - number - optional
        ## The connect timeout for accessing services. Defaults to `timeout`.
        #
        # connect_timeout: <CONNECT_TIMEOUT>

        ## @param read_timeout - number - optional
        ## The read timeout for accessing services. Defaults to `timeout`.
        #
        # read_timeout: <READ_TIMEOUT>

        ## @param request_size - number - optional - default: 16
        ## The number of kibibytes (KiB) to read from streaming HTTP responses at a time.
        #
        # request_size: 16

        ## @param log_requests - boolean - optional - default: false
        ## Whether or not to debug log the HTTP(S) requests made, including the method and URL.
        #
        # log_requests: false

        ## @param persist_connections - boolean - optional - default: false
        ## Whether or not to persist cookies and use connection pooling for increased performance.
        #
        # persist_connections: false

        ## @param allow_redirects - boolean - optional - default: true
        ## Whether or not to allow URL redirection.
        #
        # allow_redirects: true

    ## @param tags - list of strings - optional
    ## A list of tags to attach to every metric and service check emitted by this instance.
    ##
    ## Learn more about tagging at https://docs.datadoghq.com/tagging
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param service - string - optional
    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.
    ##
    ## Overrides any `service` defined in the `init_config` section.
    #
    # service: <SERVICE>

    ## @param min_collection_interval - number - optional - default: 15
    ## This changes the collection interval of the check. For more information, see:
    ## https://docs.datadoghq.com/developers/write_agent_check/#collection-interval
    #
    # min_collection_interval: 15
