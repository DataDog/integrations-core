name: IBM MQ
files:
- name: ibm_mq.yaml
  options:
  - template: init_config
    options:
      - template: init_config/default
  - template: instances
    options:
      - name: channel
        required: true
        value:
          example: 'DEV.ADMIN.SVRCONN'
          type: string
        description: The IBMMQ Channel to connect to.
      - name: queue_manager
        required: true
        description: The name of the queue manager.
        value:
          example: 'datadog'
          type: string
      - name: host
        value:
          example: 'localhost'
          type: string
        description: The host IBM MQ is running on.
      - name: port
        value:
          example: 1414
          type: integer
        description: The port IBM MQ is listening on.
      - name: connection_name
        description: |
          Connection name used to connect to IBM MQ with following syntax `<HOSTNAME>(<PORT>)`.

          Multiple connection names can be provided using comma as separator.
          The connections are usually tried in the order they are specified in the connection list
          until a connection is successfully established.

          Example `localhost(8080)` or `localhost(8080),localhost(8080),my.server(9090)`

          Either `host/port` or `connection_name` configuration must be provided.
        value:
          type: string
      - name: username
        value:
          type: string
        description: <USERNAME> of the IBMMQ Channel to connect to.
      - name: password
        secret: true
        value:
          type: string
        description: <PASSWORD> of the IBMMQ Channel to connect to.
      - name: queues
        description: The IBMMQ queues to get data from (no queue metrics will be sent, but the check will run without it).
        value:
          example: ['<QUEUE_NAME>']
          type: array
          items:
            type: string
      - name: queue_patterns
        description: |
          Collect from queues that match a MQ pattern
          Note: Do not use in conjunction with `auto_discover_queues` or `queue_regex` as it may lead to
          unexpected results.
        value:
          example:
            - 'DEV.*'          # match queues starting with "DEV."
            - 'SYSTEM.*'       # match queues starting with "SYSTEM."
          type: array
          items:
            type: string
      - name: queue_regex
        description: |
          Collect from queues that match a regex
          Note: Do not use in conjunction with `auto_discover_queues` or `queue_patterns` as it may lead to
          unexpected results.
        value:
          example:
            - '^DEV\..*$'          # match queues starting with "DEV."
            - '^SYSTEM\..*$'       # match queues starting with "SYSTEM."
          type: array
          items:
            type: string
      - name: channels
        description: Check the status of the following channels
        value:
          example: ['<CHANNEL_NAME>']
          type: array
          items:
            type: string
      - name: channel_status_mapping
        description: |
          Custom channel status mapping for service check `ibm_mq.channel.status`.

          The key is the IBM MQ channel status. Valid keys are: `inactive`, `binding`, `starting`, `running`, `stopping`,
          `retrying`, `stopped`, `requesting`, `paused`, and `initializing`.
          The value is the Datadog service check level. Valid values are: `ok`, `warning`, `critical`, and `unknown`.
          If a channel status is not mapped, it is mapped to `unknown`.
        value:
          example:
            inactive: critical
            binding: warning
            starting: warning
            running: ok
            stopping: critical
            retrying: warning
            stopped: critical
            requesting: warning
            paused: warning
            initializing: warning
          type: object
          properties: []
      - name: auto_discover_queues
        description: |
          Autodiscover the queues to monitor.
          Note: Do not use in conjunction with `queue_patterns` or `queue_regex` as it may lead to unexpected results.
          Warning: this will lead to some warnings in your logs
        value:
          example: false
          type: boolean
      - name: collect_statistics_metrics
        description: |
          Collect metrics from Statistics Messages. Statistics collected are:
            - channel statistics (MQCMD_STATISTICS_CHANNEL)
            - queue statistics (MQCMD_STATISTICS_Q)
        value:
          example: false
          type: boolean
      - name: mqcd_version
        description: |
          Which channel definition version to use. Supported values are 1 to 9 including.
          If you're having connection issues make sure it matches your MQ version
        value:
          example: 6
          type: number
      - name: convert_endianness
        description: |
          If you are monitoring IBM MQ remotely and if the Agent and the server are using different endianness,
          set this field to true.
        value:
          example: false
          type: boolean
      - name: timeout
        description: |
          The number of seconds to wait for IBM MQ to respond.
        value:
          example: 5
          type: number
      - name: ssl_auth
        description: Whether or not to use SSL auth while connecting to the channel.
        value:
          example: False
          type: boolean
      - name: ssl_cipher_spec
        type: string
        description: The ssl cipher to use. It should match the value of the channels SSLCIPH attribute.
        value:
          example: 'TLS_RSA_WITH_AES_256_CBC_SHA'
          type: string
      - name: ssl_key_repository_location
        description: |
          It specifies the location of the key database file in which keys and certificates are stored.
          The key database file must have a file name of the form zzz.kdb , where zzz is user-selectable.
          The KeyRepository field contains the path to this file, along with the file name stem
          (all characters in the file name up to but not including the final .kdb).
          Each key database file has an associated password stash file. This holds encoded passwords that are used to
          allow programmatic access to the key database. The password stash file must reside in the same directory and
          have the same file stem as the key database, and must end with the suffix .sth.
        value:
          example: '/var/mqm/ssl-db/client/KeyringClient'
          type: string
      - name: ssl_certificate_label
        description: Certificate label used for SSL connection.
        value:
          type: string
      - name: queue_tag_re
        description: |
          Instruct the check to apply additional tags to matching
          queues

          Multiple comma-separated tags are supported. You must properly quote the string if the
          pattern contains special characters e.g. colons.
        value:
          example:
            'SYSTEM.*': queue_type:system
            'DEV.*': role:dev,queue_type:default
          type: object
      - template: instances/default
  - template: logs
    example:
    - type: file
      path: /var/mqm/log/<APPNAME>/active/AMQERR01.LOG
      source: ibm_mq
      log_processing_rules:
        - type: multi_line
          name: new_log_start_with_date
          pattern: "\\d{2}/\\d{2}/\\d{4}"
