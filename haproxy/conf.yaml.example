init_config:

instances:
  - url: http://localhost/admin?stats
    # username: username
    # password: password
  # or, with a unix stats or admin socket:
  # - url: unix:///var/run/haproxy.sock
    #
    # The (optional) `status_check` paramater will instruct the check to
    # send events on status changes in the backend. This is DEPRECATED in
    # favor creation a monitor on the service check status and will be
    # removed in a future version.
    # status_check: False
    #
    # The (optional) `collect_aggregates_only` parameter will instruct the
    # check to collect metrics only from the aggregate frontend/backend
    # status lines from the stats output instead of for each backend.
    # collect_aggregates_only: True
    #
    # The (optional) `collect_status_metrics` parameter will instruct the
    # check to collect metrics on status counts (e.g. haproxy.count_per_status)
    # collect_status_metrics: False
    #
    # The (optional) `collect_status_metrics_by_host` parameter will instruct
    # the check to collect status metrics per host instead of per service.
    # This only applies if `collect_status_metrics` is True.
    # collect_status_metrics_by_host: False
    #
    # The (optional) `collate_status_tags_per_host` parameter will collate
    # `status` tags for `haproxy.count_per_status` up to one of (`available`, `unavailable`)
    # for each discovered backend.
    collate_status_tags_per_host: True
    #
    # The (optional) `count_status_by_service` parameter will instruct the check
    # to tag the status counts it collects by service in addition to by host.
    # This only applies if `collect_status_metrics` is True.
    # count_status_by_service: True
    #
    # The (optional) `tag_service_check_by_host` parameter will instruct the
    # check to tag the service check status by host on top of other tags.
    # The default case will only tag by backend and service.
    # tag_service_check_by_host: False
    #
    # The (optional) disable_ssl_validation will instruct the check
    # to skip the validation of the SSL certificate of the URL being tested.
    # Defaults to false, set to true if you want to disable SSL certificate validation.
    #
    # disable_ssl_validation: false
    #
    # (Optional) Filter metrics by services.
    # How it works: if a tag matches an exclude rule, it won't be included
    # unless it also matches an include rule.
    # e.g. include ONLY these two services
    # services_include:
    #   - "backend"
    #   - "test"
    # services_exclude:
    #   - ".*"
    #
    # OR include all EXCEPT this service
    # services_include: []
    # services_exclude:
    #   - "thisone"
    #
    # (Optional) Additional arbitrary tags for this instance.
    # Sent for all metrics generated by this instance.
    # tags:
    #   - "my-grouping:foo"
    #
    # The (optional) headers to use when requesting stats.
    # headers:
    #   key1: value1

## Log section (Available for Agent >=6.0)

#logs:

    # - type : (mandatory) type of log input source (tcp / udp / file)
    #   port / path : (mandatory) Set port if type is tcp or udp. Set path if type is file
    #   service : (mandatory) name of the service owning the log
    #   source : (mandatory) attribute that defines which integration is sending the logs
    #   sourcecategory : (optional) Multiple value attribute. Can be used to refine the source attribtue
    #   tags: (optional) add tags to each logs collected

    # - type: udp
    #   port: 514
    #   service: haproxy
    #   source: haproxy
    #   sourcecategory: http_web_access

    # The (optional) `tags_regex` parameter will instruct the check to use the defined
    # named regex for creating additional tags based on the name of the HAProxy service.
    #     tags_regex: 'be_edge_http_(?P<team>[a-z]+)\-(?P<env>[a-z]+)_(?P<app>.*)'
    # would match service name be_edge_http_sre-prod_elk and include additional
    # tags: ['team:sre','env:prod','app:elk']
    #
    # tags_regex: 'be_edge_http|http)?_(?P<team>[a-z]+)\-(?P<env>[a-z]+)_(?P<app>.*)'
