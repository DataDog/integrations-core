init_config:
    ## @param proxy - object - optional
    ## Set HTTP or HTTPS proxies for all instances. Use the `no_proxy` list
    ## to specify hosts that must bypass proxies.
    ##
    ## The SOCKS protocol is also supported:
    ##
    ## socks5://user:pass@host:port
    ##
    ## Using the scheme `socks5` causes the DNS resolution to happen on the
    ## client, rather than on the proxy server. This is in line with `curl`,
    ## which uses the scheme to decide whether to do the DNS resolution on
    ## the client or proxy. If you want to resolve the domains on the proxy
    ## server, use `socks5h` as the scheme.
    #
    # proxy:
    #   http: http://<PROXY_SERVER_FOR_HTTP>:<PORT>
    #   https: https://<PROXY_SERVER_FOR_HTTPS>:<PORT>
    #   no_proxy:
    #     - <HOSTNAME_1>
    #     - <HOSTNAME_2>

    ## @param skip_proxy - boolean - optional - default: false
    ## If set to `true`, this makes the check bypass any proxy
    ## settings enabled and attempt to reach services directly.
    #
    # skip_proxy: false

instances:

    ## @param url - string - required
    ## Haproxy URL to connect to gather metrics.
    ## Set the according <USERNAME> and <PASSWORD> or use directly a unix stats
    ## or admin socket: unix:///var/run/haproxy.sock
    #
  - url: http://localhost/admin?stats

    ## @param auth_type - string - optional
    ## The type of authentication to use.
    ## The available values are "basic" and "digest".
    #
    # auth_type: <AUTH_TYPE>

    ## @param username - string - optional
    ## The username to use if services are behind basic auth.
    #
    # username: <USERNAME>

    ## @param ntlm_domain - string - optional
    ## If your services uses NTLM authentication, you can
    ## specify a domain that is used in the check. For NTLM Auth,
    ## append the username to domain, not as the `username` parameter.
    ## Example: <NTLM_DOMAIN>/<USERNAME>
    #
    # ntlm_domain: <DOMAIN>

    ## @param password - string - optional
    ## The password to use if services are behind basic or NTLM auth.
    #
    # password: <PASSWORD>

    ## @param status_check - boolean - optional - default: false
    ## This paramater instructs the check to send events on status changes in the backend.
    ## This is DEPRECATED in favor of the creation of a monitor on the service check status
    ## and will be removed in a future version.
    #
    # status_check: false

    ## @param collect_aggregates_only - boolean - optional - default: true
    ## This parameter instructs the check to collect metrics only from the aggregate frontend/backend
    ## status lines from the stats output instead of for each backend. With this parameter set to false the agent
    ## collects data for each backend but ignores the aggregated data for backends. Because some metrics are only
    ## available for aggregates, you can also set this parameter to the string 'both' to collect everything.
    ## Please note that this mean that if if you have queries like computing the sum of all requests being made, the
    ## result will be twice as expected. To get the correct result, you have to explicitly add some filters to the
    ## query.
    #
    # collect_aggregates_only: true

    ## @param collect_status_metrics - boolean - optional - default: false
    ## This parameter instructs the check to collect metrics on status counts (e.g. haproxy.count_per_status)
    #
    # collect_status_metrics: false

    ## @param collect_status_metrics_by_host - boolean - optional - default: false
    ## This parameter instructs the check to collect status metrics per host instead of per service.
    ## This only applies if `collect_status_metrics` is true.
    #
    # collect_status_metrics_by_host: false

    ## @param collate_status_tags_per_host - boolean - optional - default: true
    ## This parameter collects `status` tags for `haproxy.count_per_status` up to one of
    ## (`available`, `unavailable`) for each discovered backend.
    #
    # collate_status_tags_per_host: true

    ## @param count_status_by_service - boolean - optional - default: true
    ## This parameter instructs the check to tag the status counts it collects by service in addition to by host.
    ## This only applies if `collect_status_metrics` is `true`.
    #
    # count_status_by_service: true

    ## @param tag_service_check_by_host - boolean - optional - default: false
    ## This parameter instructs the check to tag the service check status by host on top of other tags.
    ## The default case will only tag by backend and service.
    #
    # tag_service_check_by_host: false

    ## @param services_include - list of strings - optional
    ## Filter metrics by services. If a tag matches an exclude rule, it won't be included
    ## unless it also matches an include rule.
    #
    # services_include:
    #   - "<SERVICE_NAME_1>"
    #   - "<SERVICE_NAME_2>"

    ## @param services_exclude - list of strings - optional
    ## Filter metrics by services. If a service name matches an exclude rule, it won't be included
    ## unless it also matches an include rule.
    #
    # services_exclude:
    #   - ".*"

    ## @param active_tag - boolean - optional - default: false
    ## Includes the 'active' tag to metrics to denote whether a backend belongs to the
    ## "active" pool of connections normally used for servicing requests.
    #
    # active_tag: false

    ## @param enable_service_check - boolean - optional - default: false
    ## Enable the Haproxy service check.
    #
    # enable_service_check: false

    ## @param tags_regex - string - optional
    ## This parameter instructs the check to use the defined named regex for creating
    ## additional tags based on the name of the HAProxy service.
    ##
    ##  tags_regex: 'be_edge_http_(?P<team>[a-z]+)\-(?P<env>[a-z]+)_(?P<app>.*)'
    ##
    ## would match service name be_edge_http_sre-prod_elk and include additional
    ## tags: ['team:sre','env:prod','app:elk']
    #
    # tags_regex: '<TAG_REGEX>'

    ## @param tags - list of key:value string - optional
    ## List of tags to attach to every metric and service check emitted by this integration.
    ##
    ## Learn more about tagging at https://docs.datadoghq.com/tagging
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param startup_grace_time - integer - optional
    ## Time to wait on startup or reload of haproxy before sending metrics
    ##
    ## When haproxy reloads, if there is a `grace` period on some proxies, 2
    ## haproxies will stay running for that period, possibly including the
    ## stats endpoint. Stats returned by haproxy during this period will only
    ## refer to one of the multiple instances of haproxy, and will not
    ## accurately reflect the state of the system.
    ## If this parameter is >0, no datapoints will be sent until the uptime of
    ## haproxy reaches this many seconds
    #
    # startup_grace_seconds: 0

    ## @param connect_timeout - integer - optional
    ## Overrides the default connection timeout value,
    ## and fails the check if the time to establish the (TCP) connection
    ## exceeds the connect_timeout value (in seconds)
    #
    # connect_timeout: <VALUE_IN_SECOND>

    ## @param read_timeout - integer - optional
    ## Overrides the default received timeout value, and fails the check if the time to receive
    ## the server status from the server exceeds the read_timeout value (in seconds)
    #
    # read_timeout: <VALUE_IN_SECOND>

    ## @param proxy - object - optional
    ## This overrides the `proxy` setting in `init_config`.
    ##
    ## Set HTTP or HTTPS proxies. Use the `no_proxy` list
    ## to specify hosts that must bypass proxies.
    ##
    ## The SOCKS protocol is also supported:
    ##
    ## socks5://user:pass@host:port
    ##
    ## Using the scheme `socks5` causes the DNS resolution to happen on the
    ## client, rather than on the proxy server. This is in line with `curl`,
    ## which uses the scheme to decide whether to do the DNS resolution on
    ## the client or proxy. If you want to resolve the domains on the proxy
    ## server, use `socks5h` as the scheme.
    #
    # proxy:
    #   http: http://<PROXY_SERVER_FOR_HTTP>:<PORT>
    #   https: https://<PROXY_SERVER_FOR_HTTPS>:<PORT>
    #   no_proxy:
    #     - <HOSTNAME_1>
    #     - <HOSTNAME_2>

    ## @param skip_proxy - boolean - optional - default: false
    ## This overrides the `skip_proxy` setting in `init_config`.
    ##
    ## If set to `true`, this makes the check bypass any proxy
    ## settings enabled and attempt to reach services directly.
    #
    # skip_proxy: false

    ## @param kerberos_auth - string - optional - default: disabled
    ## If your service uses Kerberos authentication, you can specify the Kerberos
    ## strategy to use between:
    ##  * required
    ##  * optional
    ##  * disabled
    ##
    ## See https://github.com/requests/requests-kerberos#mutual-authentication
    #
    # kerberos_auth: disabled

    ## @param kerberos_delegate - boolean - optional - default: false
    ## Set to `true` to enable kerberos delegation of credentials to a server that requests delegation.
    ## See https://github.com/requests/requests-kerberos#delegation
    #
    # kerberos_delegate: false

    ## @param kerberos_force_initiate - boolean - optional - default: false
    ## Set to `true` to preemptively initiate the Kerberos GSS exchange and present a Kerberos ticket on the initial
    ## request (and all subsequent requests).
    ## See https://github.com/requests/requests-kerberos#preemptive-authentication
    #
    # kerberos_force_initiate: false

    ## @param kerberos_hostname - string - optional
    ## Override the hostname used for the Kerberos GSS exchange if its DNS name doesn't match its kerberos
    ## hostname (e.g., behind a content switch or load balancer).
    ## See https://github.com/requests/requests-kerberos#hostname-override
    #
    # kerberos_hostname: null

    ## @param kerberos_principal - string - optional
    ## Set an explicit principal, to force Kerberos to look for a matching credential cache for the named user.
    ## See https://github.com/requests/requests-kerberos#explicit-principal
    #
    # kerberos_principal: null

    ## @param kerberos_keytab - string - optional
    ## Set the path to your Kerberos key tab file.
    #
    # kerberos_keytab: <KEYTAB_FILE_PATH>

    ## @param kerberos_cache - string - optional
    ## Sets the KRB5CCNAME environment variable.
    ## It should point to a credential cache with a valid TGT.
    #
    # kerberos_cache: <KRB5CCNAME>

    ## @param tls_verify - boolean - optional - default: true
    ## Instructs the check to validate the TLS certificate of services.
    #
    # tls_verify: true

    ## @param tls_ignore_warning - boolean - optional - default: false
    ## If `tls_verify` is disabled, security warnings are logged by the check.
    ## Disable these by setting `tls_ignore_warning` to true.
    #
    # tls_ignore_warning: false

    ## @param tls_cert - string - optional
    ## The path to a single file in PEM format containing a certificate as well as any
    ## number of CA certificates needed to establish the certificate’s authenticity for
    ## use when connecting to services. It may also contain an unencrypted private key to use.
    #
    # tls_cert: <CERT_PATH>

    ## @param tls_private_key - string - optional
    ## The unencrypted private key to use for `tls_cert` when connecting to services. This is
    ## required if `tls_cert` is set and it does not already contain a private key.
    #
    # tls_private_key: <PRIVATE_KEY_PATH>

    ## @param tls_ca_cert - string - optional
    ## The path to a file of concatenated CA certificates in PEM format or a directory
    ## containing several CA certificates in PEM format. If a directory, the directory
    ## must have been processed using the c_rehash utility supplied with OpenSSL. See:
    ## https://www.openssl.org/docs/manmaster/man3/SSL_CTX_load_verify_locations.html
    #
    # tls_ca_cert: <CA_CERT_PATH>

    ## @param headers - list of key:value elements - optional
    ## The headers parameter allows you to send specific headers with every request.
    ## You can use it for explicitly specifying the host header or adding headers for
    ## authorization purposes.
    ##
    ## This overrides any default headers.
    #
    # headers:
    #   Host: <ALTERNATIVE_HOSTNAME>
    #   X-Auth-Token: <AUTH_TOKEN>

    ## @param timeout - integer - optional - default: 10
    ## The timeout for connecting to services.
    #
    # timeout: 10

    ## @param log_requests - boolean - optional - default: false
    ## Whether or not to debug log the HTTP(S) requests made, including the method and URL.
    #
    # log_requests: false

    ## @param persist_connections - boolean - optional - default: false
    ## Whether or not to persist cookies and use connection pooling for increased performance.
    #
    # persist_connections: false

## Log Section (Available for Agent >=6.0)
##
## type - mandatory - Type of log input source (tcp / udp / file / windows_event)
## port / path / channel_path - mandatory - Set port if type is tcp or udp. Set path if type is file. Set channel_path if type is windows_event
## service - mandatory - Name of the service that generated the log
## source  - mandatory - Attribute that defines which Integration sent the logs
## sourcecategory - optional - Multiple value attribute. Used to refine the source attribute
## tags: - optional - Add tags to the collected logs
##
## Discover Datadog log collection: https://docs.datadoghq.com/logs/log_collection/
#
# logs:
#   - type: udp
#     port: 514
#     service: haproxy
#     source: haproxy
#     sourcecategory: http_web_access
