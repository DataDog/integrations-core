init_config:

  ## @param global_custom_queries - object - optional
  ## Providing custom queries is also supported. Each query must have 3 fields:
  ##
  ## 1. metric_prefix - This is what each metric will start with.
  ## 2. query - This is the SQL to execute. It can be a simple statement or a
  ##            multi-line script. Alls rows of the result are evaluated.
  ## 3. columns - This is a list representing each column, ordered sequentially
  ##              from left to right. There are 2 required pieces of data:
  ##                a. type - This is the submission method (gauge, count, etc.).
  ##                b. name - This is the suffix to append to the metric_prefix
  ##                          in order to form the full metric name. If `type` is
  ##                          `tag`, this column will instead be considered a tag
  ##                          and will be applied to every metric collected by
  ##                          this particular query.
  ## 4. tags (optional) - A list of tags to apply to each metric.
  ##
  ## global_custom_queries are applied to all instances where use_global_custom_queries is set to true at the
  ## instance level.
  ##
  ## This:
  ##
  ##  self.gauge('oracle.custom_query.metric1', value, tags=['tester:oracle', 'tag1:value'])
  ##  self.count('oracle.custom_query.metric2', value, tags=['tester:oracle', 'tag1:value'])
  ##
  ## is what the following example configuration would become.
  #
  # global_custom_queries:
  #  - metric_prefix: oracle.custom_query
  #    query: |  # Use the pipe if you require a multi-line script.
  #      SELECT columns
  #      FROM tester.test_table
  #      WHERE conditions
  #    columns:
  #      # Put this for any column you wish to skip:
  #      # - {}
  #      - name: metric1
  #        type: gauge
  #      - name: tag1
  #        type: tag
  #      - name: metric2
  #        type: count
  #    tags:
  #      - tester:oracle

instances:

    ## @param server - string - required
    ## The IP address or hostname of the Oracle Database Server.
    #
  - server: localhost:1521

    ## @param service_name - string - required
    ## The Oracle Database service name. To view the services available on your server,
    ## run the following query: `SELECT value FROM v$parameter WHERE name='service_names'`
    #
    service_name: <SERVICE_NAME>

    ## @param user - string - required
    ## The username for the user account.
    #
    user: datadog

    ## @param password - string - required
    ## The password for the user account.
    #
    password: <PASSWORD>

    ## @param only_custom_queries - string - optional - default: false
    ## Set this parameter to `true` if you want to skip default system, process, and
    ## tablespace metrics checks.
    #
    # only_custom_queries: false

    ## @param jdbc_driver_path - string - optional
    ## Set this parameter if you are not using the oracle native client.
    ## You can also add it to your $CLASSPATH instead.
    #
    # jdbc_driver_path: "<DRIVER_PATH>.jar"

    ## @param tags - list of key:value elements - optional
    ## List of tags to attach to every metric, event and service check emitted by this integration.
    ##
    ## Learn more about tagging: https://docs.datadoghq.com/tagging/
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param use_global_custom_queries - boolean - optional - default: true
    ## Whether or not global_custom_queries should be included for this instance.
    #
    # use_global_custom_queries: true

    ## @param custom_queries - object - optional
    ## Providing custom queries is also supported. Each query must have 3 fields:
    ##
    ## 1. metric_prefix - This is what each metric will start with.
    ## 2. query - This is the SQL to execute. It can be a simple statement or a
    ##            multi-line script. All rows of the result are evaluated.
    ## 3. columns - This is a list representing each column, ordered sequentially
    ##              from left to right. There are 2 required pieces of data:
    ##                a. type - This is the submission method (gauge, count, etc.).
    ##                b. name - This is the suffix to append to the metric_prefix
    ##                          in order to form the full metric name. If `type` is
    ##                          `tag`, this column will instead be considered a tag
    ##                          and will be applied to every metric collected by
    ##                          this particular query.
    ## 4. tags (optional) - A list of tags to apply to each metric.
    ##
    ## custom_queries set here will override global_custom_queries set in the init_config section if
    ## use_global_custom_queries is set to false.
    ## Otherwise, they will be used in addition of global_custom_queries.
    ##
    ## This:
    ##
    ##  self.gauge('oracle.custom_query.metric1', value, tags=['tester:oracle', 'tag1:value'])
    ##  self.count('oracle.custom_query.metric2', value, tags=['tester:oracle', 'tag1:value'])
    ##
    ## is what the following example configuration would become.
    #
    # custom_queries:
    #  - metric_prefix: oracle.custom_query
    #    query: |  # Use the pipe if you require a multi-line script.
    #      SELECT columns
    #      FROM tester.test_table
    #      WHERE conditions
    #    columns:
    #      # Put this for any column you wish to skip:
    #      # - {}
    #      - name: metric1
    #        type: gauge
    #      - name: tag1
    #        type: tag
    #      - name: metric2
    #        type: count
    #    tags:
    #      - tester:oracle
