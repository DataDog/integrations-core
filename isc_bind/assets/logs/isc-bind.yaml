id: isc-bind
metric_id: isc-bind
backend_only: false
facets:
  - groups:
      - Web Access
    name: Client IP
    path: network.client.ip
    source: log
  - groups:
      - Web Access
    name: Client Port
    path: network.client.port
    source: log
  - groups:
      - Web Access
    name: Destination IP
    path: network.destination.ip
    source: log
  - groups:
      - Web Access
    name: Destination Port
    path: network.destination.port
    source: log
  - groups:
      - DNS
    name: Question Name
    path: dns.question.name
    source: log
  - groups:
      - DNS
    name: Question Type
    path: dns.question.type
    source: log
  - groups:
      - DNS
    name: Response Code
    path: dns.flags.rcode
    source: log
pipeline:
  type: pipeline
  name: ISC Bind
  enabled: true
  filter:
    query: "source:isc-bind"
  processors:
    - type: grok-parser
      name: Parsing ISC Bind common log format
      enabled: true
      source: message
      samples:
        - "09-Sep-2024 18:18:23.841 network: info: no longer listening on
          10.10.10.10#50"
        - "2024-09-20T10:20:26.751Z network: info: no longer listening on
          10.10.10.10#50"
        - "network: info: no longer listening on 10.10.10.10#50"
        - "<158>Sep 20 15:50:26 bindserver named[1630972]:
          2024-09-20T10:20:26.751Z queries: info: client @0x7f264c465b08
          10.10.10.10#56256 (google.com): query: google.com IN A +
          (10.10.10.10)"
      grok:
        supportRules: '_syslog_header (<%{integer}>)?%{date("MMM dd HH:mm:ss")}
          %{regex("[^:]*")}: '
        matchRules: >-
          isc_bind_log_parser (%{_syslog_header})?(%{date("d-MMM-yyyy
          HH:mm:ss.SSS", "UTC"):timestamp}|%{date("yyyy-MM-dd'T'HH:mm:ss.SSSZ",
          "UTC"):timestamp})?( )?%{regex("[^:]*"):event_type}:(
          %{regex("[A-Za-z]*( [0-9])?"):severity}:)? %{greedyData:message}

          sys %{_syslog_header}
    - type: service-remapper
      name: "Define `event_type` as the official service of the log "
      enabled: true
      sources:
        - event_type
    - type: date-remapper
      name: "Define `timestamp` as the official date of the log "
      enabled: true
      sources:
        - timestamp
    - name: Lookup for `severity` to `status`
      enabled: true
      source: severity
      target: status
      lookupTable: |-
        info,informational
        error,critical
        debug,notice
        debug 1,notice
        debug 2,notice
        debug 3,informational
        warning,warning
      type: lookup-processor
    - type: status-remapper
      name: Define `status` as the official status of the log
      enabled: true
      sources:
        - status
    - type: message-remapper
      name: Define `message` as the official message of the log
      enabled: true
      sources:
        - message
    - type: pipeline
      name: Processing for network logs
      enabled: true
      filter:
        query: "service:network "
      processors:
        - type: grok-parser
          name: Parsing network logs
          enabled: true
          source: message
          samples:
            - listening on IPv4 interface eth1, 10.10.10.10#50
            - no longer listening on 10.10.10.10#50
            - not listening on any interfaces
          grok:
            supportRules: ""
            matchRules: >-
              parse_network_log1 %{regex("listening"):vendor_action} on
              %{notSpace:proto} interface %{notSpace:interface},
              %{ipv4:network.client.ip}\#%{port:network.client.port}

              parse_network_log2 %{regex("no longer listening"):vendor_action} on %{ipv4:network.client.ip}\#%{port:network.client.port}

              parse_network_log3 %{regex("not listening"):vendor_action} on any interfaces
        - name: Lookup for `vendor_action` to `action`
          enabled: true
          source: vendor_action
          target: action
          lookupTable: |-
            no longer listening,not-listening
            listening,listening
            not listening,not-listening
          type: lookup-processor
        - type: geo-ip-parser
          name: Extracting geolocation information from the client IP
          enabled: true
          sources:
            - network.client.ip
          target: network.client.geoip
          ip_processing_behavior: do-nothing
    - type: pipeline
      name: Processing for lame servers logs
      enabled: true
      filter:
        query: "service:lame-servers "
      processors:
        - type: grok-parser
          name: Parsing lame server logs
          enabled: true
          source: message
          samples:
            - "timed out resolving 'example.com/DS/IN': 8.8.8.8#53"
            - "error (timed out) resolving 'nelreports.net/DS/IN': 8.8.8.8#53"
          grok:
            supportRules: ""
            matchRules: "parse_lame_server_log (error
              \\(%{regex(\"[^)]*\"):error_type}\\)|%{regex(\"[^']*\"):error_typ\
              e}) resolving
              '%{regex(\"[^/]*\"):dns.question.name}/%{regex(\"[^/]*\"):dns.que\
              stion.class}/%{regex(\"[^']*\"):dns.question.type}':
              %{ipv4:network.destination.ip}\\#%{port:network.destination.port}"
    - type: pipeline
      name: Processing for notify logs
      enabled: true
      filter:
        query: "service:notify "
      processors:
        - type: grok-parser
          name: Parsing notify logs
          enabled: true
          source: message
          samples:
            - "zone example.com/IN: sending notifies (serial 1)"
            - "zone example.com/IN: sending notify to 20.20.20.20#60"
            - "zone example.com/IN: notify to 20.20.20.20#60 failed: failure"
            - "zone example.com/IN: notify to 20.20.20.20#60: retries exceeded"
            - "zone example.com/IN: notify response from 10.10.10.10#50: NOERROR"
          grok:
            supportRules: 'extract_dns_domain_class_and_action zone
              %{regex("[^/]*"):dns.question.name}/%{regex("[^:]*"):dns.question.class}:
              %{regex("[\\w\\s]*"):vendor_action}'
            matchRules: >-
              parse_notify_log_1 %{extract_dns_domain_class_and_action} \(serial
              %{number:serial_number}\)

              parse_notify_log_2 %{extract_dns_domain_class_and_action} to %{ipv4:network.destination.ip}\#%{port:network.destination.port}(( failed: |: )%{greedyData:failure_reason})?

              parse_notify_log_3 %{extract_dns_domain_class_and_action} from %{ipv4:network.client.ip}\#%{port:network.client.port}: %{word:dns.flags.rcode}
        - name: Lookup for `vendor_action` to `action`
          enabled: true
          source: vendor_action
          target: action
          lookupTable: |-
            sending notifies,send-notify
            sending notify,send-notify
            notify,send-notify
            notify response,recv-notify
          type: lookup-processor
        - name: Lookup for `dns.flags.rcode` to `reply_code`
          enabled: true
          source: dns.flags.rcode
          target: reply_code
          lookupTable: |-
            NOERROR,No Error
            NOTAUTH,Not Auth
          type: lookup-processor
    - type: pipeline
      name: Processing for query logs
      enabled: true
      filter:
        query: "service:queries "
      processors:
        - type: grok-parser
          name: Parsing query logs
          enabled: true
          source: message
          samples:
            - "client @0x7f0c38008a28 10.10.10.10#50 (example.com): query:
              example.com IN PTR +E(0)K (20.20.20.20)"
            - "client @0x7f0c38008a28 10.10.10.10#50 (example.com): query:
              example.com IN PTR +E(0)K (20.20.20.20) [client_subnet]"
          grok:
            supportRules: ""
            matchRules: 'parse_query_log client (%{notSpace:}
              )?%{ipv4:network.client.ip}\#%{port:network.client.port}
              (\(%{regex("[^)]*"):}\))?: query: %{notSpace:dns.question.name}
              %{notSpace:dns.question.class} %{notSpace:dns.question.type}
              %{notSpace:flag} (\(%{notSpace:network.destination.ip}\))(
              \[%{regex("[^\\]]*"):}\])?'
    - type: pipeline
      name: Processing for query errors logs
      enabled: true
      filter:
        query: "service:query-errors "
      processors:
        - type: grok-parser
          name: Parsing query error logs
          enabled: true
          source: message
          samples:
            - "client @0x7f0c38008a28 10.10.10.10#50 (example.com): query failed
              (REFUSED) for example.com/IN/A at query.c:5671"
          grok:
            supportRules: ""
            matchRules: 'parse_query_error_log client (%{notSpace:}
              )?%{ipv4:network.client.ip}\#%{port:network.client.port}
              (\(%{regex("[^)]*"):}\))?: query failed
              (\(%{regex("[^)]*"):dns.flags.rcode}\)) for
              %{regex("[^/]*"):dns.question.name}/%{regex("[^/]*"):dns.question.class}/%{notSpace:dns.question.type}
              at %{regex("[^:]*"):file_name}:%{notSpace:line_number}'
        - name: Lookup for `dns.flags.rcode` to `reply_code`
          enabled: true
          source: dns.flags.rcode
          target: reply_code
          lookupTable: |-
            REFUSED,Refused
            SERVFAIL,Server Failure
          type: lookup-processor
        - type: geo-ip-parser
          name: Extracting geolocation information from the client IP
          enabled: true
          sources:
            - network.client.ip
          target: network.client.geoip
          ip_processing_behavior: do-nothing
    - type: pipeline
      name: Processing for security logs
      enabled: true
      filter:
        query: "service:security "
      processors:
        - type: grok-parser
          name: Parsing security logs
          enabled: true
          source: message
          samples:
            - "client @0x7f0c38008a28 10.10.10.10#50 (example.com): query
              (cache) 'example.com/A/IN' denied (allow-query-cache did not
              match)"
          grok:
            supportRules: ""
            matchRules: "parse_security_log client (%{notSpace:}
              )?%{ipv4:network.client.ip}\\#%{port:network.client.port}
              (\\(%{regex(\"[^)]*\"):}\\))?: %{regex(\"[^']*\"):operation_type}
              '%{regex(\"[^/]*\"):dns.question.name}/%{regex(\"[^/]*\"):dns.que\
              stion.class}/%{regex(\"[^']*\"):dns.question.type}'
              %{regex(\"denied\"):request_type}
              \\(%{regex(\"[^)]*\"):reason}\\)"
        - type: geo-ip-parser
          name: Extracting geolocation information from the client IP
          enabled: true
          sources:
            - network.client.ip
          target: network.client.geoip
          ip_processing_behavior: do-nothing
