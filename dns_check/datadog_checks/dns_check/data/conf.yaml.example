init_config:
  
  ## @param default_timeout - string - optional - default: 5
  ## Timeout to use as a default for all your instances.
  #
  #  default_timeout: 5

instances:
  
  ## @param name - string - required
  ## Name of your DNS check instance.
  ## To create multiple DNS checks, create multiple instances with unique names.
  #
  - name: <INSTANCE_NAME>

  ## @param hostname - string - required
  ## Hostname to resolve.
  #
    hostname: <HOSTNAME>

  ## @param nameserver - string - required
  ## IP address of the name server to query.
  #
    nameserver: 127.0.0.1

  ## @param nameserver_port - string - optional - default: 53
  ## Port for the name server.
  #
  #  nameserver_port: 53

  ## @param resolves_as - string - optional
  ## A comma separated list of IP addresses that the hostname is expected to resolve as.
  ## Useful to ensure that the name hasn't been hijacked and points to the expected servers.
  #
  #  resolves_as: <IP_ADDRESSES>

  ## @param timeout - string - optional - default: default_timeout
  ## Timeout to honor for this instance of the check
  #
  #  timeout: 5

  ## @param record_type - string - optional - default: A
  ## The record type to be queried to the name server
  ## If you use NXDOMAIN as the `record_type`, an NXDOMAIN result is expected from the query,
  ## and the check instance reports response time data.
  ## In many DNS systems, NXDOMAIN results are uncached. Further a query for a unqualified domain
  ## name that one expects to return an NXDOMAIN result can result in many dns queries, depending
  ## on the resolver's configured search domain.
  ## For these reasons, these queries are good candidates to monitor the worst-case performance of a DNS lookup.
  #
  #  record_type: A

  ## @param tags  - list of key:value element - optional
  ## List of tags to attach to every metric, event and service check emitted by this integration.
  ##
  ## Learn more about tagging: https://docs.datadoghq.com/tagging/
  #
  #  tags:
  #    - <KEY_1>:<VALUE_1>
  #    - <KEY_2>:<VALUE_2>
