# (C) Datadog, Inc. 2023-present
# All rights reserved
# Licensed under a 3-clause BSD style license (see LICENSE)

# This file is autogenerated.
# To change this file you should edit assets/configuration/spec.yaml and then run the following commands:
#     ddev -x validate config -s <INTEGRATION_NAME>
#     ddev -x validate models -s <INTEGRATION_NAME>

from __future__ import annotations

from typing import Any, Mapping, Optional, Sequence

from pydantic import BaseModel, root_validator, validator

from datadog_checks.base.utils.functions import identity
from datadog_checks.base.utils.models import validation

from . import defaults, validators


class MetricPatterns(BaseModel):
    class Config:
        allow_mutation = False

    exclude: Optional[Sequence[str]]
    include: Optional[Sequence[str]]


class InstanceConfig(BaseModel):
    class Config:
        allow_mutation = False

    authKey: Optional[str]
    authProtocol: Optional[str]
    bulk_threshold: Optional[int]
    collect_device_metadata: Optional[bool]
    community_string: Optional[str]
    context_engine_id: Optional[str]
    context_name: Optional[str]
    disable_generic_tags: Optional[bool]
    discovery_allowed_failures: Optional[int]
    discovery_interval: Optional[int]
    discovery_workers: Optional[int]
    empty_default_hostname: Optional[bool]
    enforce_mib_constraints: Optional[bool]
    ignored_ip_addresses: Optional[Sequence[str]]
    ip_address: Optional[str]
    loader: Optional[str]
    metric_patterns: Optional[MetricPatterns]
    metric_tags: Optional[Sequence[Mapping[str, Any]]]
    metrics: Optional[Sequence[Mapping[str, Any]]]
    min_collection_interval: Optional[float]
    network_address: Optional[str]
    oid_batch_size: Optional[int]
    port: Optional[int]
    privKey: Optional[str]
    privProtocol: Optional[str]
    profile: Optional[str]
    refresh_oids_cache_interval: Optional[int]
    retries: Optional[int]
    service: Optional[str]
    snmp_version: Optional[int]
    tags: Optional[Sequence[str]]
    timeout: Optional[int]
    use_device_id_as_hostname: Optional[bool]
    use_global_metrics: Optional[bool]
    user: Optional[str]
    workers: Optional[int]

    @root_validator(pre=True)
    def _initial_validation(cls, values):
        return validation.core.initialize_config(getattr(validators, 'initialize_instance', identity)(values))

    @validator('*', pre=True, always=True)
    def _ensure_defaults(cls, v, field):
        if v is not None or field.required:
            return v

        return getattr(defaults, f'instance_{field.name}')(field, v)

    @validator('*')
    def _run_validations(cls, v, field):
        if not v:
            return v

        return getattr(validators, f'instance_{field.name}', identity)(v, field=field)

    @root_validator(pre=False)
    def _final_validation(cls, values):
        return validation.core.finalize_config(getattr(validators, 'finalize_instance', identity)(values))
