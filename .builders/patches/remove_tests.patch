diff --git a/.builders/scripts/build_wheels.py b/.builders/scripts/build_wheels.py
index 0ae4035590..6d38e1f197 100644
--- a/.builders/scripts/build_wheels.py
+++ b/.builders/scripts/build_wheels.py
@@ -8,7 +8,7 @@ from pathlib import Path
 from tempfile import TemporaryDirectory
 
 from dotenv import dotenv_values
-from utils import extract_metadata, iter_wheels, normalize_project_name
+from utils import extract_metadata, iter_wheels, normalize_project_name, remove_test_files
 
 INDEX_BASE_URL = "https://agent-int-packages.datadoghq.com"
 CUSTOM_EXTERNAL_INDEX = f"{INDEX_BASE_URL}/external"
@@ -54,7 +54,12 @@ def check_process(*args, **kwargs) -> subprocess.CompletedProcess:
 
     return process
 
-
+def add_dependency(dependencies: dict[str, str], wheel: Path) -> None:
+    project_metadata = extract_metadata(wheel)
+    project_name = normalize_project_name(project_metadata["Name"])
+    project_version = project_metadata["Version"]
+    dependencies[project_name] = project_version
+    
 def main():
     parser = argparse.ArgumentParser(prog="wheel-builder", allow_abbrev=False)
     parser.add_argument("--python", required=True)
@@ -165,17 +170,21 @@ def main():
         )
 
     dependencies: dict[str, tuple[str, str]] = {}
-    for wheel_dir in wheels_dir.iterdir():
-        for wheel in iter_wheels(wheel_dir):
-            project_metadata = extract_metadata(wheel)
-            project_name = normalize_project_name(project_metadata["Name"])
-            project_version = project_metadata["Version"]
-            dependencies[project_name] = project_version
-
-    final_requirements = MOUNT_DIR / "frozen.txt"
-    with final_requirements.open("w", encoding="utf-8") as f:
-        for project_name, project_version in sorted(dependencies.items()):
-            f.write(f"{project_name}=={project_version}\n")
+    # Handle wheels currently in the external directory and move them to the built directory if they were modified
+    for wheel in iter_wheels(external_wheels_dir):
+        was_modified = remove_test_files(wheel)
+        if was_modified:
+            # A modified wheel is no longer external â†’ move it to built directory
+            new_path = built_wheels_dir / wheel.name
+            wheel.rename(new_path)
+            wheel = new_path
+
+        add_dependency(dependencies, wheel)
+
+    # Handle wheels already in the built directory
+    for wheel in iter_wheels(built_wheels_dir):
+        remove_test_files(wheel)
+        add_dependency(dependencies, wheel)
 
 
 if __name__ == "__main__":
diff --git a/.builders/scripts/utils.py b/.builders/scripts/utils.py
index 35d8ca138c..431fd6ddbb 100644
--- a/.builders/scripts/utils.py
+++ b/.builders/scripts/utils.py
@@ -1,11 +1,17 @@
 from __future__ import annotations
 
 import email
+import os
 import re
+import shutil
+import tempfile
 from pathlib import Path
 from typing import Iterator
 from zipfile import ZipFile
 
+from wheel.cli.pack import pack
+from wheel.cli.unpack import unpack
+
 UNNORMALIZED_PROJECT_NAME_CHARS = re.compile(r"[-_.]+")
 
 
@@ -40,3 +46,105 @@ def iter_wheels(source_dir: str) -> Iterator[Path]:
     for entry in sorted(Path(source_dir).iterdir(), key=lambda entry: entry.name.casefold()):
         if entry.suffix == ".whl" and entry.is_file():
             yield entry
+
+def remove_test_files(wheel_path: Path) -> None:
+    """
+    Unpack the wheel, remove excluded test files, then repack it to rebuild RECORD correctly.
+    """
+    # First, check whether the wheel contains any files that should be excluded. If not, leave it untouched.
+    with ZipFile(wheel_path, "r") as zf:
+        excluded_members = [name for name in zf.namelist() if is_excluded_from_wheel(name)]
+
+    if not excluded_members:
+        # Nothing to strip, so skip rewriting the wheel
+        return False
+
+    with tempfile.TemporaryDirectory() as td:
+        td_path = Path(td)
+
+        # Unpack the wheel into temp dir
+        unpack(wheel_path, dest=td_path)
+        unpacked_dir = next(td_path.iterdir())
+
+        # Remove excluded files/folders
+        for root, dirs, files in os.walk(td, topdown=False):
+            for d in list(dirs):
+                full_dir = Path(root) / d
+                rel = full_dir.relative_to(unpacked_dir).as_posix()
+                if is_excluded_from_wheel(rel):
+                    shutil.rmtree(full_dir)
+                    dirs.remove(d)
+            for f in files:
+                rel = Path(root).joinpath(f).relative_to(unpacked_dir).as_posix()
+                if is_excluded_from_wheel(rel):
+                    os.remove(Path(root) / f)
+
+        print(f"Tests removed from {wheel_path.name}")
+
+        # Repack to same directory, regenerating RECORD
+        pack(unpacked_dir, dest_dir=wheel_path.parent, build_number=None)
+
+    return True
+
+
+def is_excluded_from_wheel(path: str) -> bool:
+    """
+    These files are excluded from the wheel in the agent build:
+    https://github.com/DataDog/datadog-agent/blob/main/omnibus/config/software/datadog-agent-integrations-py3.rb
+    In order to have more accurate results, this files are excluded when computing the size of the dependencies while
+    the wheels still include them.
+    """
+    excluded_test_paths = [
+        os.path.normpath(path)
+        for path in [
+            "idlelib/idle_test",
+            "bs4/tests",
+            "Cryptodome/SelfTest",
+            "gssapi/tests",
+            "keystoneauth1/tests",
+            "lazy_loader/tests",
+            "openstack/tests",
+            "os_service_types/tests",
+            "pbr/tests",
+            "pkg_resources/tests",
+            "pip/_vendor/colorama/tests",
+            "psutil/tests",
+            "requests_unixsocket/tests",
+            "securesystemslib/_vendor/ed25519/test_data",
+            "setuptools/_distutils/compilers/C/tests",
+            "setuptools/_vendor/packaging/tests",
+            "setuptools/_distutils/tests",
+            "setuptools/tests",
+            "simplejson/tests",
+            "stevedore/tests",
+            "supervisor/tests",
+            "test",  # cm-client
+            "vertica_python/tests",
+            "websocket/tests",
+            "win32com/test",
+        ]
+    ]
+
+    type_annot_libraries = [
+        "krb5",
+        "Cryptodome",
+        "ddtrace",
+        "pyVmomi",
+        "gssapi",
+    ]
+    rel_path = Path(path).as_posix()
+
+    # Test folders
+    for test_folder in excluded_test_paths:
+        if rel_path == test_folder or rel_path.startswith(test_folder + os.sep):
+            return True
+
+    # Python type annotations
+    path_parts = Path(rel_path).parts
+    if path_parts:
+        dependency_name = path_parts[0]
+        if dependency_name in type_annot_libraries:
+            if path.endswith(".pyi") or os.path.basename(path) == "py.typed":
+                return True
+
+    return False
\ No newline at end of file
