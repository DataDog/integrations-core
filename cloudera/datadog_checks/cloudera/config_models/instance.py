# (C) Datadog, Inc. 2022-present
# All rights reserved
# Licensed under a 3-clause BSD style license (see LICENSE)

# This file is autogenerated.
# To change this file you should edit assets/configuration/spec.yaml and then run the following commands:
#     ddev -x validate config -s <INTEGRATION_NAME>
#     ddev -x validate models -s <INTEGRATION_NAME>

from __future__ import annotations

from typing import Any, Mapping, Optional, Sequence, Union

from pydantic import BaseModel, Field, root_validator, validator

from datadog_checks.base.utils.functions import identity
from datadog_checks.base.utils.models import validation

from . import defaults, validators


class Clusters(BaseModel):
    class Config:
        allow_mutation = False

    exclude: Optional[Sequence[str]] = Field(
        None, description='List of regular expressions with the patterns of clusters that will not be processed.\n'
    )
    include: Optional[Sequence[Union[str, Mapping[str, Any]]]] = Field(
        None, description='Mapping of regular expressions keys and cluster config values that will be processed.\n'
    )
    interval: Optional[int] = Field(
        None, description='Validity time of the last list of clusters obtained through the endpoint.\n'
    )
    limit: Optional[int] = Field(None, description='Maximum number of clusters to be processed.\n')


class CustomQuery(BaseModel):
    class Config:
        allow_mutation = False

    query: Optional[str]
    tags: Optional[Sequence[str]]


class MetricPatterns(BaseModel):
    class Config:
        allow_mutation = False

    exclude: Optional[Sequence[str]]
    include: Optional[Sequence[str]]


class InstanceConfig(BaseModel):
    class Config:
        allow_mutation = False

    api_url: str
    clusters: Optional[Clusters]
    custom_queries: Optional[Sequence[CustomQuery]]
    disable_generic_tags: Optional[bool]
    empty_default_hostname: Optional[bool]
    max_parallel_requests: Optional[int]
    metric_patterns: Optional[MetricPatterns]
    min_collection_interval: Optional[float]
    service: Optional[str]
    tags: Optional[Sequence[str]]

    @root_validator(pre=True)
    def _initial_validation(cls, values):
        return validation.core.initialize_config(getattr(validators, 'initialize_instance', identity)(values))

    @validator('*', pre=True, always=True)
    def _ensure_defaults(cls, v, field):
        if v is not None or field.required:
            return v

        return getattr(defaults, f'instance_{field.name}')(field, v)

    @validator('*')
    def _run_validations(cls, v, field):
        if not v:
            return v

        return getattr(validators, f'instance_{field.name}', identity)(v, field=field)

    @root_validator(pre=False)
    def _final_validation(cls, values):
        return validation.core.finalize_config(getattr(validators, 'finalize_instance', identity)(values))
