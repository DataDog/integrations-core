name: RethinkDB
files:
  - name: README.md
    sections:
      - template: overview
        overrides:
          description: |
            [RethinkDB][1] is a distributed documented-oriented NoSQL database, with first class support for realtime
            change feeds.

            This check monitors a RethinkDB cluster through the Datadog Agent and collects metrics about performance,
            data availability, cluster configuration, and more.

            **Note**: this integration is compatible with RethinkDB **version 2.3.6 and above**.

            [1]: https://rethinkdb.com
          parameters:
            value1: foo
      - template: setup
      - template: setup/installation
      - template: setup/configuration
        overrides:
          description: |
            1. If using RethinkDB 2.4+, add a `datadog-agent` user with read-only permissions on the `rethinkdb`
            database. You can use the following ReQL commands, and refer to [Permissions and user accounts][1] for
            details:

                ```python
                r.db('rethinkdb').table('users').insert({{'id': 'datadog-agent', 'password': '<PASSWORD>'}})
                r.db('rethinkdb').grant('datadog-agent', {{'read': True}})
                ```

                **Note**: on RethinkDB 2.3.x, granting permissions on the `rethinkdb` database is not supported. Skip
                this step and use your [admin account][2] below instead.

            2. Edit the `rethinkdb.d/conf.yaml` file in the `conf.d/` folder at the root of your
            [Agent's configuration directory][3]. See the [sample rethinkdb.d/conf.yaml][4] for all available
            configuration options.

                ```yaml
                init_config:

                instances:
                  - host: localhost
                    port: 28015
                    user: "<USER>"
                    password: "<PASSWORD>"
                ```

            3. [Restart the Agent][5].

            **Note**: this integration collects metrics from all servers in the cluster, so you only need a single Agent.

            [1]: https://rethinkdb.com/docs/permissions-and-accounts/
            [2]: https://rethinkdb.com/docs/security/#the-admin-account
            [3]: https://docs.datadoghq.com/agent/guide/agent-configuration-files/#agent-configuration-directory
            [4]: https://github.com/DataDog/integrations-core/blob/master/rethinkdb/datadog_checks/rethinkdb/data/conf.yaml.example
            [5]: https://docs.datadoghq.com/agent/guide/agent-commands/#start-stop-and-restart-the-agent
      - template: setup/configuration/log_collection
        overrides:
          parameters.check_log_conf_snippet: |
              ```yaml
              logs:
                - type: file
                  path: "<LOG_FILE_PATH>"
                  source: {integration_id}
                  service: "<SERVICE_NAME>"
              ```
      - template: setup/validation
      - template: data_collected
      - template: data_collected/metrics
      # TODO override for service checks unnecessary, `processor` function will parse `service_checks.json`
      - template: data_collected/service_checks
        overrides:
          description: |
            - `rethinkdb.can_connect`: Returns `CRITICAL` if the Agent cannot reach the configured RethinkDB server, `OK` otherwise.
            - `rethinkdb.table_status.status.ready_for_outdated_reads`: Returns `OK` if all shards of a table are ready to accept outdated read queries, `WARNING` otherwise.
            - `rethinkdb.table_status.status.ready_for_reads`: Returns `OK` if all shards of a table are ready to accept read queries, `WARNING` otherwise.
            - `rethinkdb.table_status.status.ready_for_writes`: Returns `OK` if all shards of a table are ready to accept write queries, `WARNING` otherwise.
            - `rethinkdb.table_status.status.all_replicas_ready`: Returns `OK` if all replicas are ready for reads and writes, `WARNING` otherwise (e.g. if backfills are in progress).
      - template: data_collected/events
      - template: troubleshooting
