## @param ad_identifiers - list of strings - required
## A list of container identifiers that are used by Autodiscovery to identify
## which container the check should be run against. For more information, see:
## https://docs.datadoghq.com/agent/guide/ad_identifiers/
#
ad_identifiers:
  - coredns

## All options defined here are available to all instances.
#
init_config:

## Every instance is scheduled independent of the others.
#
instances:

    ## @param prometheus_url - string - optional - default: http://%%host%%:9153/metrics
    ## To enable CoreDNS metrics using the legacy OpenMetricsBaseCheckV1 you must specify the prometheus url
    ## and enable the plugin within coredns.
    ## See: https://coredns.io/plugins/metrics/
    ##
    ## Either `prometheus_url` or `openmetrics_url` must be specified.
    ## See documentation: https://docs.datadoghq.com/integrations/coredns
    #
  - prometheus_url: http://%%host%%:9153/metrics

    ## @param tags - list of strings - required
    ## List of tags to attach to every metric and service check emitted by this integration.
    ##
    ## Learn more about tagging: https://docs.datadoghq.com/tagging/
    #
    tags:
      - dns-pod:%%host%%

    ## @param send_histograms_buckets - boolean - optional - default: true
    ## (Legacy OpenMetricsBaseCheckV1) Set send_histograms_buckets to true to send the histograms bucket.
    #
    # send_histograms_buckets: true

    ## @param send_monotonic_counter - boolean - optional - default: true
    ## (Legacy OpenMetricsBaseCheckV1) To send counters as monotonic counter
    ## see: https://github.com/DataDog/integrations-core/issues/1303
    #
    # send_monotonic_counter: true

    ## @param metrics - list of strings - optional
    ## (Legacy OpenMetricsBaseCheckV1) Metrics from the CoreDNS plugins for 'metrics', 'proxy', 'forward' and 'cache'
    ## are enabled by default, however in order to scrape metrics for optional
    ## plugins, enable the plugin in the CoreDNS corefile and then add the metric below.
    ## As an example, the 'template' plugin's metrics are below
    #
    # metrics:
    #   - coredns_template_matches_total: template_matches_count
    #   - coredns_template_template_failures_total: template_templating_failures_count
    #   - coredns_template_rr_failures_total: template_resource_record_failures_count

    ## @param openmetrics_endpoint - string - optional - default: http://%%host%%:9153/metrics
    ## To enable CoreDNS metrics using OpenMetricsBaseCheckV2 you must specify the openmetrics endpoint url
    ## and enable the plugin within coredns.
    ## See: https://coredns.io/plugins/metrics/
    ##
    ## Either `prometheus_url` or `openmetrics_url` must be specified.
    ## See documentation: https://docs.datadoghq.com/integrations/coredns
    #
    # openmetrics_endpoint: http://%%host%%:9153/metrics

    ## @param extra_metrics - list of strings - optional
    ## (OpenMetricsBaseCheckV2) Metrics from the CoreDNS plugins for 'metrics', 'proxy', 'forward' and 'cache'
    ## are enabled by default, however in order to scrape metrics for optional
    ## plugins, enable the plugin in the CoreDNS corefile and then add the metric below.
    ## As an example, the 'template' plugin's metrics are below
    #
    # extra_metrics:
    #   - coredns_template_matches_total: template_matches_count
    #   - coredns_template_template_failures_total: template_templating_failures_count
    #   - coredns_template_rr_failures_total: template_resource_record_failures_count
