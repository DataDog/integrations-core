init_config:

    ## @param allowed_versions - list of strings - optional
    ## The expected versions of TLS/SSL when connecting to `server`. Any protocol versions
    ## negotiated by connections that are not in this list makes the service check
    ## `tls.version` send CRITICAL.
    #
    # allowed_versions:
    #   - TLSv1.2
    #   - TLSv1.3

instances:

    ## @param server - string - required
    ## The hostname or IP address with which to connect.
    #
  - server: <SERVER>

    ## @param port - integer - optional - default: 443
    ## The port that is used. This overrides any port specified in `server`.
    #
    # port: 443

    ## @param transport - string - optional - default: TCP
    ## The transport protocol to use when connecting to `server`.
    ## Currently, only TCP is supported.
    #
    # transport: TCP

    ## @param local_cert_path - string - optional
    ## The path to a local certificate in lieu of a server/port. In this mode, the
    ## service checks `tls.can_connect` and `tls.version` are unavailable. The
    ## certificate can be in PEM or DER format. If in DER format, the file
    ## extension must be either `.cer`, `.crt`, or `.der`.
    #
    # local_cert_path: <CERT_PATH>

    ## @param server_hostname - string - optional
    ## The hostname of the service with which to connect for servers that support SNI. This
    ## is also the value used for hostname validation. If not specified, `server` paramter is used.
    ## See: https://en.wikipedia.org/wiki/Server_Name_Indication
    #
    # server_hostname: <HOST>

    ## @param validate_hostname - boolean - optional - default: true
    ## Whether or not to verify the certificate was issued for `server_hostname`. If enabled,
    ## this is an additional requirement for the service check `tls.cert_validation`.
    #
    # validate_hostname: true

    ## @param validate_cert - boolean - optional - default: true
    ## Whether or not to validate the certificate. If disabled, the service check
    ## `tls.cert_validation` always reports as OK except for:
    ##
    ## 1. parsing errors
    ## 2. hostname mismatch, if `validate_hostname` is true
    ##
    ## Disabling this is useful when only the monitoring of certificate expiration is desired.
    #
    # validate_cert: true

    ## @param allowed_versions - list of strings - optional
    ## The expected versions of TLS/SSL when connecting to `server`. Any protocol versions
    ## negotiated by connections that are not in this list makes the service check
    ## `tls.version` send CRITICAL. By default, only TLSv1.2 and TLSv1.3 are allowed.
    ## Overrides `allowed_versions` in init_config.
    ##
    ## The supported versions are:
    ##
    ##   SSLv3
    ##   TLSv1
    ##   TLSv1.1
    ##   TLSv1.2
    ##   TLSv1.3
    #
    # allowed_versions:
    #   - TLSv1.2
    #   - TLSv1.3

    ## @param days_warning - float - optional - default: 14.0
    ## Number of days before certificate expiration from which the service check
    ## `tls.cert_expiration` begins emitting WARNING.
    #
    # days_warning: 14.0

    ## @param days_critical - float - optional - default: 7.0
    ## Number of days before certificate expiration from which the service check
    ## `tls.cert_expiration` begins emitting CRITICAL.
    #
    # days_critical: 7.0

    ## @param seconds_warning - integer - optional
    ## Number of seconds before certificate expiration from which the service check
    ## `tls.cert_expiration` begins emitting WARNING. Overrides `days_warning`.
    #
    # seconds_warning: <SECONDS_WARNING>

    ## @param seconds_critical - integer - optional
    ## Number of seconds before certificate expiration from which the service check
    ## `tls.cert_expiration` begins emitting CRITICAL. Overrides `days_critical`.
    #
    # seconds_critical: <SECONDS_CRITICAL>

    ## @param cert - string - optional
    ## The path to a single file in PEM format containing a certificate as well as any
    ## number of CA certificates needed to establish the certificateâ€™s authenticity for
    ## use when connecting to `server`. It may also contain an unencrypted private key to use.
    #
    # cert: <CERT_PATH>

    ## @param private_key - string - optional
    ## The unencrypted private key to use for `cert` when connecting to `server`. This is
    ## required if `cert` is set and it does not already contain a private key.
    #
    # private_key: <PRIVATE_KEY_PATH>

    ## @param ca_cert - string - optional
    ## The path to a file of concatenated CA certificates in PEM format or a directory
    ## containing several CA certificates in PEM format. If a directory, the directory
    ## must have been processed using the c_rehash utility supplied with OpenSSL. See:
    ## https://www.openssl.org/docs/manmaster/man3/SSL_CTX_load_verify_locations.html
    #
    # ca_cert: <CA_CERT_PATH>

    ## @param timeout - integer - optional - default: 10
    ## The timeout for connecting to `server`.
    #
    # timeout: 10

    ## @param name - string - optional
    ## Unique identifier for this instance that is added as a tag to all data emitted.
    #
    # name: <INSTANCE_NAME>

    ## @param tags - list of key:value strings - optional
    ## List of tags to attach to every metric and service check emitted by this instance.
    ##
    ## Learn more about tagging at https://docs.datadoghq.com/tagging
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>
