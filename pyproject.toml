# NOTE: You have to use single-quoted strings in TOML for regular expressions.
# It's the equivalent of r-strings in Python. Multiline strings are treated as
# verbose regular expressions by Black. Use [ ] to denote a significant space
# character.

# Keep Black configuration to generate models through validate
# Switch to Ruff after it provides a Python API
[tool.black]
include = '\.pyi?$'
line-length = 120
skip-string-normalization = true
target-version = ["py312"]


[tool.mypy]
plugins = "pydantic.mypy"
# Follows imports and type-check imported modules.
follow_imports = "normal"
# Ignore errors about imported packages that don't provide type hints.
ignore_missing_imports = true
# Don't require that all functions be annotated, as it would create
# a lot of noise for imported modules that aren't annotated yet.
# Note that this is the default behavior, but we're making our choice explicit here.
disallow_untyped_defs = false
# Include column numbers in errors.
show_column_numbers = true
# Mypy path is relative to the tox execution path, it correspond here to the integration folder.
mypy_path = "../.stubs"
# Exclude generated files
# TODO Remove when we drop python 2
exclude = '.*/config_models/.*\.py$'

[tool.ruff]
exclude = [
    ".eggs",
    ".tox",
    ".git",
    ".mypy_cache",
    ".venv",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "_build",
    "dist",
    "buck-out", # <- is this something we still have?
    "compat.py",
    "__init__.py",
    "**/datadog_checks/dev/tooling/templates",
    "**/datadog_checks/dev/tooling/signing.py",
    "**/datadog_checks/*/vendor/*",
    # Avoid linting or formatting autogenerated files from ddev validate models
    # They are formatted with Black and Ruff does not yet offer an API to format them
    "**/config_models/instance.py",
    "**/config_models/shared.py",
    "**/config_models/defaults.py",
]
target-version = "py312"
line-length = 120
namespace-packages = ["datadog_checks"]

[tool.ruff.lint]
# Rules were ported over from the legacy flake8 settings for parity
# All the rules can be found here: https://beta.ruff.rs/docs/rules/
select = [
  "B",
  "C",
  "E",
  "F",
  "G",
  "W",
  "I",
]
ignore = [
  # From legacy flake8 settings
  "E721",
  "E722",
  "E741",
  "B015",
  "B904",
  "B017",
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  "B905",  # TODO: remove when we drop Python 2
  # Ignore McCabe complexity
  "C901",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.format]
quote-style = "preserve"

[tool.ruff.lint.isort]
known-first-party = ["{template_config['package_name']}"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
#Tests can use assertions and relative imports
"**/tests/**/*" = ["S101", "TID252"]
"datadog_checks/*/config_models/deprecations.py" = ["E501"]
"tests/models/config_models/deprecations.py" = ["E501"]

[tool.ddev]
repo = "core"

[project]
name = "integrations-core"
version = "0.0.0"

[tool.hatch.build]
dev-mode-dirs = ["."]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
