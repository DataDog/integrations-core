# NOTE: You have to use single-quoted strings in TOML for regular expressions.
# It's the equivalent of r-strings in Python. Multiline strings are treated as
# verbose regular expressions by Black. Use [ ] to denote a significant space
# character.

[tool.black]
exclude = '''
# Directories
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist

  # New integration templates
  | datadog_checks/dev/tooling/templates
  # Vendored third party libraries
  | datadog_checks/[^/]+/vendor
)/
  |
# Files
(
    # TODO: remove when upstream addresses https://github.com/DataDog/integrations-core/blob/c71e6d7204192a8002109da92452003598df2d28/datadog_checks_dev/datadog_checks/dev/tooling/signing.py#L9-L14
    datadog_checks/dev/tooling/signing\.py$
)
'''
include = '\.pyi?$'
line-length = 120
py36 = false
skip-string-normalization = true

[tool.isort]
default_section = 'THIRDPARTY'
force_grid_wrap = 0
include_trailing_comma = true
known_first_party = 'datadog_checks'
src_paths = ''
line_length = 120
multi_line_output = 3
skip_glob = '.*,*/datadog_checks/dev/tooling/signing.py,*/datadog_checks/dev/tooling/templates/*,*/datadog_checks/*/vendor/*'
use_parentheses = true

[tool.mypy]
plugins = "pydantic.mypy"
# Follows imports and type-check imported modules.
follow_imports = "normal"
# Ignore errors about imported packages that don't provide type hints.
ignore_missing_imports = true
# Don't require that all functions be annotated, as it would create
# a lot of noise for imported modules that aren't annotated yet.
# Note that this is the default behavior, but we're making our choice explicit here.
disallow_untyped_defs = false
# Include column numbers in errors.
show_column_numbers = true
# Mypy path is relative to the tox execution path, it correspond here to the integration folder.
mypy_path = "../.stubs"
# Exclude generated files
# TODO Remove when we drop python 2
exclude = '.*/config_models/.*\.py$'

[tool.ruff]
exclude = [
    ".eggs",
    ".tox",
    "build",
    "compat.py",
    "__init__.py",
    "datadog_checks_dev/datadog_checks/dev/tooling/templates/*",
    "*/datadog_checks/*/vendor/*",
]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  #"B",
  #"C",
  #"DTZ",
  #"E",
  #"EM",
  #"F",
  #"FBT",
  #"I",
  #"ICN",
  #"ISC",
  #"N",
  #"PLC",
  #"PLE",
  #"PLR",
  #"PLW",
  #"Q",
  #"RUF",
  #"S",
  #"T",
  #"TID",
  # pyupgrade (UP) is disabled due to PY2
  # "UP",
  #"W",
  #"YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore single versus double quotes
  "Q000",
  # Ignore because these because of PY2 limitations
  "RUF005",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]
[tool.ruff.isort]
known-first-party = ["{template_config['package_name']}"]
[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"
[tool.ruff.per-file-ignores]
# Tests can use assertions and relative imports
"**/tests/**/*" = ["S101", "TID252"]
"**/config_models/defaults.py" = ["ARG001"]
