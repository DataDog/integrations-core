## All options defined here are available to all instances.
#
init_config:

    ## @param service - string - optional
    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.
    ##
    ## Additionally, this sets the default `service` for every log source.
    #
    # service: <SERVICE>

## Every instance is scheduled independent of the others.
#
instances:

    ## @param host - string - required
    ## Enter the host to connect to.
    #
  - host: localhost

    ## @param port - integer - required
    ## Enter the port of the host to connect to.
    #
    port: 6379

    ## @param unix_socket_path - string - optional
    ## Connect through a unix socket instead of using a `host` and `port`.
    #
    # unix_socket_path: /var/run/redis/redis.sock

    ## @param db - integer - optional - default: 0
    ## The index of the database (keyspace) to use.
    ## The default is index 0. Any other index results in a SELECT command sent upon connection
    ## to choose the desired database. For redis.clone, this can also be NA in which case the same database is
    ## used as in rc.
    #
    # db: 0

    ## @param username - string - optional
    ## The username for the connection. Redis 6+ only.
    #
    # username: <USERNAME>

    ## @param password - string - optional
    ## The password for the connection.
    #
    # password: <PASSWORD>

    ## @param collect_client_metrics - boolean - optional - default: false
    ## Collects metrics using the `CLIENT` command.
    ## This requires the Redis CLIENT command to be available on your servers.
    #
    # collect_client_metrics: false

    ## @param socket_timeout - integer - optional - default: 5
    ## Custom timeout for the check request.
    #
    # socket_timeout: 5

    ## @param ssl - boolean - optional - default: false
    ## Enable SSL/TLS encryption for the check.
    #
    # ssl: false

    ## @param ssl_keyfile - string - optional
    ## The path to the client-side private keyfile.
    #
    # ssl_keyfile: <CERT_KEY_PATH>

    ## @param ssl_certfile - string - optional
    ## The path to the client-side certificate file.
    #
    # ssl_certfile: <CERT_PEM_PATH>

    ## @param ssl_ca_certs - string - optional
    ## The path to the ca_certs file.
    #
    # ssl_ca_certs: <CERT_PATH>

    ## @param ssl_cert_reqs - integer - optional - default: 0
    ## Specifies whether a certificate is required from the
    ## other side of the connection, and whether it's validated if provided.
    ##   * 0 for ssl.CERT_NONE (certificates ignored)
    ##   * 1 for ssl.CERT_OPTIONAL (not required, but validated if provided)
    ##   * 2 for ssl.CERT_REQUIRED (required and validated)
    #
    # ssl_cert_reqs: 0

    ## @param keys - list of strings - optional
    ## Enter the list of keys to collect the lengths from.
    ## The length is 1 for strings.
    ## The length is zero for keys that have a type other than list, set, hash, or sorted set.
    ## Note: Keys can be expressed as patterns, see https://redis.io/commands/keys.
    #
    # keys:
    #   - <KEY_1>
    #   - <KEY_PATTERN>

    ## @param warn_on_missing_keys - boolean - optional - default: true
    ## If you provide a list of 'keys', set this to true to have the Agent log a warning
    ## when keys are missing.
    #
    # warn_on_missing_keys: true

    ## @param slowlog-max-len - integer - optional - default: 128
    ## Set the maximum number of entries to fetch from the slow query log.
    ## By default, the check reads this value from the redis config, but is limited to 128.
    ##
    ## Set a custom value here if you need to get more than 128 slowlog entries every 15 seconds.
    ## Warning: Higher values may impact the performance of your Redis instance.
    #
    # slowlog-max-len: 128

    ## @param command_stats - boolean - optional - default: false
    ## Collect INFO COMMANDSTATS output as metrics.
    #
    # command_stats: false

    ## @param disable_connection_cache - boolean - optional - default: false
    ## Enable the connections cache so the check attempts to reuse the same Redis connections
    ## at every collection cycle. If disabled, this prevents stale connections.
    #
    # disable_connection_cache: false

    ## @param tags - list of strings - optional
    ## A list of tags to attach to every metric and service check emitted by this instance.
    ##
    ## Learn more about tagging at https://docs.datadoghq.com/tagging
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param service - string - optional
    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.
    ##
    ## Overrides any `service` defined in the `init_config` section.
    #
    # service: <SERVICE>

    ## @param min_collection_interval - number - optional - default: 15
    ## This changes the collection interval of the check. For more information, see:
    ## https://docs.datadoghq.com/developers/write_agent_check/#collection-interval
    #
    # min_collection_interval: 15

    ## @param empty_default_hostname - boolean - optional - default: false
    ## This forces the check to send metrics with no hostname.
    ##
    ## This is useful for cluster-level checks.
    #
    # empty_default_hostname: false

## Log Section
##
## type - required - Type of log input source (tcp / udp / file / windows_event)
## port / path / channel_path - required - Set port if type is tcp or udp.
##                                         Set path if type is file.
##                                         Set channel_path if type is windows_event.
## source  - required - Attribute that defines which Integration sent the logs.
## service - optional - The name of the service that generates the log.
##                      Overrides any `service` defined in the `init_config` section.
## tags - optional - Add tags to the collected logs.
##
## Discover Datadog log collection: https://docs.datadoghq.com/logs/log_collection/
#
# logs:
#   - type: file
#     path: /var/log/redis_6379.log
#     source: redis
#     service: <SERVICE>
