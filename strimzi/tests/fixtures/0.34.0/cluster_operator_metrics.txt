# HELP strimzi_reconciliations_locked_total Number of reconciliations skipped because another reconciliation for the same resource was still running
# TYPE strimzi_reconciliations_locked_total counter
strimzi_reconciliations_locked_total{kind="KafkaConnect",namespace="kafka",selector="",} 2.0
strimzi_reconciliations_locked_total{kind="Kafka",namespace="kafka",selector="",} 1.0
# HELP strimzi_reconciliations_total Number of reconciliations done by the operator for individual resources
# TYPE strimzi_reconciliations_total counter
strimzi_reconciliations_total{kind="StrimziPodSet",namespace="kafka",selector="",} 12.0
strimzi_reconciliations_total{kind="KafkaConnect",namespace="kafka",selector="",} 9.0
strimzi_reconciliations_total{kind="KafkaConnector",namespace="kafka",selector="",} 20.0
strimzi_reconciliations_total{kind="Kafka",namespace="kafka",selector="",} 18.0
# HELP vertx_http_server_active_connections Number of opened connections to the server
# TYPE vertx_http_server_active_connections gauge
vertx_http_server_active_connections 2.0
# HELP process_cpu_usage The "recent cpu usage" for the Java Virtual Machine process
# TYPE process_cpu_usage gauge
process_cpu_usage 0.02
# HELP strimzi_reconciliations_periodical_total Number of periodical reconciliations done by the operator
# TYPE strimzi_reconciliations_periodical_total counter
strimzi_reconciliations_periodical_total{kind="KafkaConnect",namespace="kafka",selector="",} 15.0
strimzi_reconciliations_periodical_total{kind="Kafka",namespace="kafka",selector="",} 15.0
strimzi_reconciliations_periodical_total{kind="KafkaMirrorMaker",namespace="kafka",selector="",} 15.0
strimzi_reconciliations_periodical_total{kind="KafkaBridge",namespace="kafka",selector="",} 15.0
strimzi_reconciliations_periodical_total{kind="KafkaRebalance",namespace="kafka",selector="",} 15.0
strimzi_reconciliations_periodical_total{kind="KafkaMirrorMaker2",namespace="kafka",selector="",} 15.0
# HELP jvm_gc_memory_allocated_bytes_total Incremented for an increase in the size of the (young) heap memory pool after one GC to before the next
# TYPE jvm_gc_memory_allocated_bytes_total counter
jvm_gc_memory_allocated_bytes_total 1.517897688E9
# HELP vertx_http_server_response_bytes_max Size of responses in bytes
# TYPE vertx_http_server_response_bytes_max gauge
vertx_http_server_response_bytes_max{code="200",method="GET",route="",} 25192.0
vertx_http_server_response_bytes_max{code="400",method="GET",route="",} 0.0
# HELP vertx_http_server_response_bytes Size of responses in bytes
# TYPE vertx_http_server_response_bytes summary
vertx_http_server_response_bytes_count{code="200",method="GET",route="",} 256.0
vertx_http_server_response_bytes_sum{code="200",method="GET",route="",} 2611070.0
vertx_http_server_response_bytes_count{code="400",method="GET",route="",} 8.0
vertx_http_server_response_bytes_sum{code="400",method="GET",route="",} 0.0
# HELP system_cpu_usage The "recent cpu usage" of the system the application is running in
# TYPE system_cpu_usage gauge
system_cpu_usage 0.017543
# HELP jvm_buffer_count_buffers An estimate of the number of buffers in the pool
# TYPE jvm_buffer_count_buffers gauge
jvm_buffer_count_buffers{id="mapped - 'non-volatile memory'",} 0.0
jvm_buffer_count_buffers{id="mapped",} 0.0
jvm_buffer_count_buffers{id="direct",} 26.0
# HELP strimzi_reconciliations_successful_total Number of reconciliations done by the operator for individual resources which were successful
# TYPE strimzi_reconciliations_successful_total counter
strimzi_reconciliations_successful_total{kind="StrimziPodSet",namespace="kafka",selector="",} 12.0
strimzi_reconciliations_successful_total{kind="KafkaConnector",namespace="kafka",selector="",} 20.0
strimzi_reconciliations_successful_total{kind="KafkaConnect",namespace="kafka",selector="",} 7.0
strimzi_reconciliations_successful_total{kind="Kafka",namespace="kafka",selector="",} 17.0
# HELP vertx_pool_completed_total Number of elements done with the resource
# TYPE vertx_pool_completed_total counter
vertx_pool_completed_total{pool_type="worker",} 2344.0
# HELP vertx_http_client_active_connections Number of connections to the remote host currently opened
# TYPE vertx_http_client_active_connections gauge
vertx_http_client_active_connections 0.0
# HELP strimzi_reconciliations_already_enqueued_total Number of reconciliations skipped because another reconciliation for the same resource was still running
# TYPE strimzi_reconciliations_already_enqueued_total counter
strimzi_reconciliations_already_enqueued_total{kind="StrimziPodSet",namespace="kafka",selector="",} 6.0
# HELP jvm_threads_live_threads The current number of live threads including both daemon and non-daemon threads
# TYPE jvm_threads_live_threads gauge
jvm_threads_live_threads 49.0
# HELP vertx_http_client_requests_total Number of requests sent
# TYPE vertx_http_client_requests_total counter
vertx_http_client_requests_total{method="GET",} 105.0
vertx_http_client_requests_total{method="PUT",} 2.0
# HELP jvm_gc_max_data_size_bytes Max size of long-lived heap memory pool
# TYPE jvm_gc_max_data_size_bytes gauge
jvm_gc_max_data_size_bytes 4.0566784E7
# HELP vertx_http_server_requests_total Number of processed requests
# TYPE vertx_http_server_requests_total counter
vertx_http_server_requests_total{code="200",method="GET",route="",} 256.0
vertx_http_server_requests_total{code="400",method="GET",route="",} 8.0
# HELP system_load_average_1m The sum of the number of runnable entities queued to available processors and the number of runnable entities running on the available processors averaged over a period of time
# TYPE system_load_average_1m gauge
system_load_average_1m 0.78
# HELP vertx_http_client_request_bytes_max Size of requests in bytes
# TYPE vertx_http_client_request_bytes_max gauge
vertx_http_client_request_bytes_max{method="GET",} 0.0
vertx_http_client_request_bytes_max{method="PUT",} 0.0
# HELP vertx_http_client_request_bytes Size of requests in bytes
# TYPE vertx_http_client_request_bytes summary
vertx_http_client_request_bytes_count{method="GET",} 105.0
vertx_http_client_request_bytes_sum{method="GET",} 0.0
vertx_http_client_request_bytes_count{method="PUT",} 2.0
vertx_http_client_request_bytes_sum{method="PUT",} 1131.0
# HELP strimzi_resources_paused Number of custom resources the operator sees but does not reconcile due to paused reconciliations
# TYPE strimzi_resources_paused gauge
strimzi_resources_paused{kind="KafkaConnect",namespace="kafka",selector="",} 0.0
strimzi_resources_paused{kind="KafkaConnector",namespace="kafka",selector="",} 0.0
strimzi_resources_paused{kind="Kafka",namespace="kafka",selector="",} 0.0
strimzi_resources_paused{kind="KafkaMirrorMaker",namespace="kafka",selector="",} 0.0
strimzi_resources_paused{kind="KafkaBridge",namespace="kafka",selector="",} 0.0
strimzi_resources_paused{kind="KafkaRebalance",namespace="kafka",selector="",} 0.0
strimzi_resources_paused{kind="KafkaMirrorMaker2",namespace="kafka",selector="",} 0.0
# HELP jvm_threads_peak_threads The peak live thread count since the Java virtual machine started or peak was reset
# TYPE jvm_threads_peak_threads gauge
jvm_threads_peak_threads 55.0
# HELP strimzi_resource_state Current state of the resource: 1 ready, 0 fail
# TYPE strimzi_resource_state gauge
strimzi_resource_state{kind="Kafka",name="my-cluster",reason="none",resource_namespace="kafka",} 1.0
strimzi_resource_state{kind="KafkaConnect",name="my-connect",reason="none",resource_namespace="kafka",} 1.0
# HELP vertx_http_server_request_bytes_max Size of requests in bytes
# TYPE vertx_http_server_request_bytes_max gauge
vertx_http_server_request_bytes_max{method="GET",} 0.0
# HELP vertx_http_server_request_bytes Size of requests in bytes
# TYPE vertx_http_server_request_bytes summary
vertx_http_server_request_bytes_count{method="GET",} 264.0
vertx_http_server_request_bytes_sum{method="GET",} 0.0
# HELP jvm_gc_memory_promoted_bytes_total Count of positive increases in the size of the old generation memory pool before GC to after GC
# TYPE jvm_gc_memory_promoted_bytes_total counter
jvm_gc_memory_promoted_bytes_total 1
# HELP vertx_http_client_queue_time_seconds_max Time spent in queue before being processed
# TYPE vertx_http_client_queue_time_seconds_max gauge
vertx_http_client_queue_time_seconds_max 0.117905
# HELP vertx_http_client_queue_time_seconds Time spent in queue before being processed
# TYPE vertx_http_client_queue_time_seconds summary
vertx_http_client_queue_time_seconds_count 107.0
vertx_http_client_queue_time_seconds_sum 1.453534375
# HELP jvm_buffer_memory_used_bytes An estimate of the memory that the Java virtual machine is using for this buffer pool
# TYPE jvm_buffer_memory_used_bytes gauge
jvm_buffer_memory_used_bytes{id="mapped - 'non-volatile memory'",} 0.0
jvm_buffer_memory_used_bytes{id="mapped",} 0.0
jvm_buffer_memory_used_bytes{id="direct",} 1.6851297E7
# HELP jvm_memory_used_bytes The amount of used memory
# TYPE jvm_memory_used_bytes gauge
jvm_memory_used_bytes{area="heap",id="Tenured Gen",} 4.056676E7
jvm_memory_used_bytes{area="nonheap",id="CodeHeap 'profiled nmethods'",} 2.6356096E7
jvm_memory_used_bytes{area="heap",id="Eden Space",} 9409272.0
jvm_memory_used_bytes{area="nonheap",id="Metaspace",} 7.6721456E7
jvm_memory_used_bytes{area="nonheap",id="CodeHeap 'non-nmethods'",} 1460480.0
jvm_memory_used_bytes{area="heap",id="Survivor Space",} 0.0
jvm_memory_used_bytes{area="nonheap",id="Compressed Class Space",} 8624424.0
jvm_memory_used_bytes{area="nonheap",id="CodeHeap 'non-profiled nmethods'",} 1.058688E7
# HELP jvm_gc_live_data_size_bytes Size of long-lived heap memory pool after reclamation
# TYPE jvm_gc_live_data_size_bytes gauge
jvm_gc_live_data_size_bytes 4.056676E7
# HELP jvm_classes_loaded_classes The number of classes that are currently loaded in the Java virtual machine
# TYPE jvm_classes_loaded_classes gauge
jvm_classes_loaded_classes 13171.0
# HELP jvm_memory_committed_bytes The amount of memory in bytes that is committed for the Java virtual machine to use
# TYPE jvm_memory_committed_bytes gauge
jvm_memory_committed_bytes{area="heap",id="Tenured Gen",} 4.0566784E7
jvm_memory_committed_bytes{area="nonheap",id="CodeHeap 'profiled nmethods'",} 2.6411008E7
jvm_memory_committed_bytes{area="heap",id="Eden Space",} 1.6318464E7
jvm_memory_committed_bytes{area="nonheap",id="Metaspace",} 7.8249984E7
jvm_memory_committed_bytes{area="nonheap",id="CodeHeap 'non-nmethods'",} 2555904.0
jvm_memory_committed_bytes{area="heap",id="Survivor Space",} 1966080.0
jvm_memory_committed_bytes{area="nonheap",id="Compressed Class Space",} 9437184.0
jvm_memory_committed_bytes{area="nonheap",id="CodeHeap 'non-profiled nmethods'",} 1.0616832E7
# HELP vertx_http_server_active_requests Number of requests being processed
# TYPE vertx_http_server_active_requests gauge
vertx_http_server_active_requests{method="GET",} 10.0
# HELP jvm_gc_pause_seconds Time spent in GC pause
# TYPE jvm_gc_pause_seconds summary
jvm_gc_pause_seconds_count{action="end of major GC",cause="Metadata GC Threshold",} 1.0
jvm_gc_pause_seconds_sum{action="end of major GC",cause="Metadata GC Threshold",} 0.019
jvm_gc_pause_seconds_count{action="end of major GC",cause="Allocation Failure",} 87.0
jvm_gc_pause_seconds_sum{action="end of major GC",cause="Allocation Failure",} 6.038
jvm_gc_pause_seconds_count{action="end of minor GC",cause="Allocation Failure",} 51.0
jvm_gc_pause_seconds_sum{action="end of minor GC",cause="Allocation Failure",} 0.254
# HELP jvm_gc_pause_seconds_max Time spent in GC pause
# TYPE jvm_gc_pause_seconds_max gauge
jvm_gc_pause_seconds_max{action="end of major GC",cause="Metadata GC Threshold",} 0.0
jvm_gc_pause_seconds_max{action="end of major GC",cause="Allocation Failure",} 0.17
jvm_gc_pause_seconds_max{action="end of minor GC",cause="Allocation Failure",} 0.0
# HELP vertx_http_client_bytes_written_total Number of bytes sent to the remote host
# TYPE vertx_http_client_bytes_written_total counter
vertx_http_client_bytes_written_total 1131.0
# HELP vertx_pool_ratio Pool usage ratio, only present if maximum pool size could be determined
# TYPE vertx_pool_ratio gauge
vertx_pool_ratio{pool_type="worker",} 0.0
# HELP vertx_pool_queue_pending Number of pending elements in queue
# TYPE vertx_pool_queue_pending gauge
vertx_pool_queue_pending{pool_type="worker",} 0.0
# HELP vertx_http_client_bytes_read_total Number of bytes received from the remote host
# TYPE vertx_http_client_bytes_read_total counter
vertx_http_client_bytes_read_total 29710.0
# HELP jvm_threads_daemon_threads The current number of live daemon threads
# TYPE jvm_threads_daemon_threads gauge
jvm_threads_daemon_threads 13.0
# HELP vertx_http_server_bytes_written_total Number of bytes sent by the server
# TYPE vertx_http_server_bytes_written_total counter
vertx_http_server_bytes_written_total 2611070.0
# HELP vertx_pool_queue_time_seconds_max Time spent in queue before being processed
# TYPE vertx_pool_queue_time_seconds_max gauge
vertx_pool_queue_time_seconds_max{pool_type="worker",} 0.035157209
# HELP vertx_pool_queue_time_seconds Time spent in queue before being processed
# TYPE vertx_pool_queue_time_seconds summary
vertx_pool_queue_time_seconds_count{pool_type="worker",} 2344.0
vertx_pool_queue_time_seconds_sum{pool_type="worker",} 8.54910493
# HELP vertx_http_client_active_requests Number of requests waiting for a response
# TYPE vertx_http_client_active_requests gauge
vertx_http_client_active_requests{method="GET",} 0.0
vertx_http_client_active_requests{method="PUT",} 0.0
# HELP jvm_buffer_total_capacity_bytes An estimate of the total capacity of the buffers in this pool
# TYPE jvm_buffer_total_capacity_bytes gauge
jvm_buffer_total_capacity_bytes{id="mapped - 'non-volatile memory'",} 0.0
jvm_buffer_total_capacity_bytes{id="mapped",} 0.0
jvm_buffer_total_capacity_bytes{id="direct",} 1.6851296E7
# HELP jvm_memory_max_bytes The maximum amount of memory in bytes that can be used for memory management
# TYPE jvm_memory_max_bytes gauge
jvm_memory_max_bytes{area="heap",id="Tenured Gen",} 4.0566784E7
jvm_memory_max_bytes{area="nonheap",id="CodeHeap 'profiled nmethods'",} 1.22912768E8
jvm_memory_max_bytes{area="heap",id="Eden Space",} 1.6318464E7
jvm_memory_max_bytes{area="nonheap",id="Metaspace",} -1.0
jvm_memory_max_bytes{area="nonheap",id="CodeHeap 'non-nmethods'",} 5828608.0
jvm_memory_max_bytes{area="heap",id="Survivor Space",} 1966080.0
jvm_memory_max_bytes{area="nonheap",id="Compressed Class Space",} 1.073741824E9
jvm_memory_max_bytes{area="nonheap",id="CodeHeap 'non-profiled nmethods'",} 1.22916864E8
# HELP vertx_pool_in_use Number of resources used
# TYPE vertx_pool_in_use gauge
vertx_pool_in_use{pool_type="worker",} 0.0
# HELP strimzi_reconciliations_duration_seconds The time the reconciliation takes to complete
# TYPE strimzi_reconciliations_duration_seconds histogram
strimzi_reconciliations_duration_seconds_bucket{kind="StrimziPodSet",namespace="kafka",selector="",le="1.0",} 12.0
strimzi_reconciliations_duration_seconds_bucket{kind="StrimziPodSet",namespace="kafka",selector="",le="5.0",} 12.0
strimzi_reconciliations_duration_seconds_bucket{kind="StrimziPodSet",namespace="kafka",selector="",le="10.0",} 12.0
strimzi_reconciliations_duration_seconds_bucket{kind="StrimziPodSet",namespace="kafka",selector="",le="30.0",} 12.0
strimzi_reconciliations_duration_seconds_bucket{kind="StrimziPodSet",namespace="kafka",selector="",le="60.0",} 12.0
strimzi_reconciliations_duration_seconds_bucket{kind="StrimziPodSet",namespace="kafka",selector="",le="120.0",} 12.0
strimzi_reconciliations_duration_seconds_bucket{kind="StrimziPodSet",namespace="kafka",selector="",le="300.0",} 12.0
strimzi_reconciliations_duration_seconds_bucket{kind="StrimziPodSet",namespace="kafka",selector="",le="+Inf",} 12.0
strimzi_reconciliations_duration_seconds_count{kind="StrimziPodSet",namespace="kafka",selector="",} 12.0
strimzi_reconciliations_duration_seconds_sum{kind="StrimziPodSet",namespace="kafka",selector="",} 0.244652875
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnector",namespace="kafka",selector="",le="1.0",} 20.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnector",namespace="kafka",selector="",le="5.0",} 20.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnector",namespace="kafka",selector="",le="10.0",} 20.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnector",namespace="kafka",selector="",le="30.0",} 20.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnector",namespace="kafka",selector="",le="60.0",} 20.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnector",namespace="kafka",selector="",le="120.0",} 20.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnector",namespace="kafka",selector="",le="300.0",} 20.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnector",namespace="kafka",selector="",le="+Inf",} 20.0
strimzi_reconciliations_duration_seconds_count{kind="KafkaConnector",namespace="kafka",selector="",} 20.0
strimzi_reconciliations_duration_seconds_sum{kind="KafkaConnector",namespace="kafka",selector="",} 2.88366725
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnect",namespace="kafka",selector="",le="1.0",} 6.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnect",namespace="kafka",selector="",le="5.0",} 6.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnect",namespace="kafka",selector="",le="10.0",} 6.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnect",namespace="kafka",selector="",le="30.0",} 6.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnect",namespace="kafka",selector="",le="60.0",} 6.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnect",namespace="kafka",selector="",le="120.0",} 6.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnect",namespace="kafka",selector="",le="300.0",} 7.0
strimzi_reconciliations_duration_seconds_bucket{kind="KafkaConnect",namespace="kafka",selector="",le="+Inf",} 7.0
strimzi_reconciliations_duration_seconds_count{kind="KafkaConnect",namespace="kafka",selector="",} 7.0
strimzi_reconciliations_duration_seconds_sum{kind="KafkaConnect",namespace="kafka",selector="",} 249.672747656
strimzi_reconciliations_duration_seconds_bucket{kind="Kafka",namespace="kafka",selector="",le="1.0",} 0.0
strimzi_reconciliations_duration_seconds_bucket{kind="Kafka",namespace="kafka",selector="",le="5.0",} 16.0
strimzi_reconciliations_duration_seconds_bucket{kind="Kafka",namespace="kafka",selector="",le="10.0",} 16.0
strimzi_reconciliations_duration_seconds_bucket{kind="Kafka",namespace="kafka",selector="",le="30.0",} 16.0
strimzi_reconciliations_duration_seconds_bucket{kind="Kafka",namespace="kafka",selector="",le="60.0",} 16.0
strimzi_reconciliations_duration_seconds_bucket{kind="Kafka",namespace="kafka",selector="",le="120.0",} 17.0
strimzi_reconciliations_duration_seconds_bucket{kind="Kafka",namespace="kafka",selector="",le="300.0",} 17.0
strimzi_reconciliations_duration_seconds_bucket{kind="Kafka",namespace="kafka",selector="",le="+Inf",} 17.0
strimzi_reconciliations_duration_seconds_count{kind="Kafka",namespace="kafka",selector="",} 17.0
strimzi_reconciliations_duration_seconds_sum{kind="Kafka",namespace="kafka",selector="",} 120.47496568
# HELP strimzi_reconciliations_duration_seconds_max The time the reconciliation takes to complete
# TYPE strimzi_reconciliations_duration_seconds_max gauge
strimzi_reconciliations_duration_seconds_max{kind="StrimziPodSet",namespace="kafka",selector="",} 0.0
strimzi_reconciliations_duration_seconds_max{kind="KafkaConnector",namespace="kafka",selector="",} 0.185868125
strimzi_reconciliations_duration_seconds_max{kind="KafkaConnect",namespace="kafka",selector="",} 0.381872292
strimzi_reconciliations_duration_seconds_max{kind="Kafka",namespace="kafka",selector="",} 1.999524543
# HELP vertx_http_client_queue_pending Number of pending elements in queue
# TYPE vertx_http_client_queue_pending gauge
vertx_http_client_queue_pending 0.0
# HELP system_cpu_count The number of processors available to the Java virtual machine
# TYPE system_cpu_count gauge
system_cpu_count 1.0
# HELP vertx_pool_usage_seconds Time using a resource
# TYPE vertx_pool_usage_seconds summary
vertx_pool_usage_seconds_count{pool_type="worker",} 2344.0
vertx_pool_usage_seconds_sum{pool_type="worker",} 18.584730018
# HELP vertx_pool_usage_seconds_max Time using a resource
# TYPE vertx_pool_usage_seconds_max gauge
vertx_pool_usage_seconds_max{pool_type="worker",} 0.14254125
# HELP strimzi_resources Number of custom resources the operator sees
# TYPE strimzi_resources gauge
strimzi_resources{kind="StrimziPodSet",namespace="kafka",selector="",} 2.0
strimzi_resources{kind="KafkaConnect",namespace="kafka",selector="",} 1.0
strimzi_resources{kind="KafkaConnector",namespace="kafka",selector="",} 2.0
strimzi_resources{kind="Kafka",namespace="kafka",selector="",} 1.0
strimzi_resources{kind="KafkaMirrorMaker",namespace="kafka",selector="",} 0.0
strimzi_resources{kind="KafkaBridge",namespace="kafka",selector="",} 0.0
strimzi_resources{kind="KafkaRebalance",namespace="kafka",selector="",} 0.0
strimzi_resources{kind="KafkaMirrorMaker2",namespace="kafka",selector="",} 0.0
# HELP vertx_http_server_response_time_seconds_max Request processing time
# TYPE vertx_http_server_response_time_seconds_max gauge
vertx_http_server_response_time_seconds_max{code="200",method="GET",route="",} 0.074655334
vertx_http_server_response_time_seconds_max{code="400",method="GET",route="",} 1.41166E-4
# HELP vertx_http_server_response_time_seconds Request processing time
# TYPE vertx_http_server_response_time_seconds summary
vertx_http_server_response_time_seconds_count{code="200",method="GET",route="",} 256.0
vertx_http_server_response_time_seconds_sum{code="200",method="GET",route="",} 0.69737791
vertx_http_server_response_time_seconds_count{code="400",method="GET",route="",} 8.0
vertx_http_server_response_time_seconds_sum{code="400",method="GET",route="",} 0.00186204
# HELP jvm_classes_unloaded_classes_total The total number of classes unloaded since the Java virtual machine has started execution
# TYPE jvm_classes_unloaded_classes_total counter
jvm_classes_unloaded_classes_total 295.0
# HELP jvm_threads_states_threads The current number of threads
# TYPE jvm_threads_states_threads gauge
jvm_threads_states_threads{state="runnable",} 8.0
jvm_threads_states_threads{state="blocked",} 0.0
jvm_threads_states_threads{state="waiting",} 34.0
jvm_threads_states_threads{state="timed-waiting",} 7.0
jvm_threads_states_threads{state="new",} 0.0
jvm_threads_states_threads{state="terminated",} 0.0
# HELP vertx_http_server_errors_total Number of errors
# TYPE vertx_http_server_errors_total counter
vertx_http_server_errors_total 8.0
# HELP vertx_http_client_responses_total Response count with codes
# TYPE vertx_http_client_responses_total counter
vertx_http_client_responses_total{code="201",method="PUT",} 2.0
vertx_http_client_responses_total{code="404",method="GET",} 6.0
vertx_http_client_responses_total{code="200",method="GET",} 99.0
# HELP vertx_http_client_response_time_seconds_max Response time
# TYPE vertx_http_client_response_time_seconds_max gauge
vertx_http_client_response_time_seconds_max{code="201",method="PUT",} 0.0
vertx_http_client_response_time_seconds_max{code="404",method="GET",} 0.0
vertx_http_client_response_time_seconds_max{code="200",method="GET",} 0.005578458
# HELP vertx_http_client_response_time_seconds Response time
# TYPE vertx_http_client_response_time_seconds summary
vertx_http_client_response_time_seconds_count{code="201",method="PUT",} 2.0
vertx_http_client_response_time_seconds_sum{code="201",method="PUT",} 0.128398624
vertx_http_client_response_time_seconds_count{code="404",method="GET",} 6.0
vertx_http_client_response_time_seconds_sum{code="404",method="GET",} 0.098966959
vertx_http_client_response_time_seconds_count{code="200",method="GET",} 99.0
vertx_http_client_response_time_seconds_sum{code="200",method="GET",} 1.137640751
# HELP vertx_http_client_response_bytes_max Size of responses in bytes
# TYPE vertx_http_client_response_bytes_max gauge
vertx_http_client_response_bytes_max{code="201",method="PUT",} 0.0
vertx_http_client_response_bytes_max{code="404",method="GET",} 0.0
vertx_http_client_response_bytes_max{code="200",method="GET",} 881.0
# HELP vertx_http_client_response_bytes Size of responses in bytes
# TYPE vertx_http_client_response_bytes summary
vertx_http_client_response_bytes_count{code="201",method="PUT",} 2.0
vertx_http_client_response_bytes_sum{code="201",method="PUT",} 1303.0
vertx_http_client_response_bytes_count{code="404",method="GET",} 6.0
vertx_http_client_response_bytes_sum{code="404",method="GET",} 427.0
vertx_http_client_response_bytes_count{code="200",method="GET",} 99.0
vertx_http_client_response_bytes_sum{code="200",method="GET",} 27980.0
# HELP vertx_http_server_request_resets_total Number of request resets
# TYPE vertx_http_server_request_resets_total counter
vertx_http_server_request_resets_total{method="GET",} 7.0