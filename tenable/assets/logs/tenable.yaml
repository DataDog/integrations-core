id: tenable
metric_id: tenable
backend_only: false
facets:
  - groups:
      - Event
    name: Event Name
    path: evt.name
    source: log
  - groups:
      - Event
    name: Event Outcome
    path: evt.outcome
    source: log
  - groups:
      - Web Access
    name: Client IP
    path: network.client.ip
    source: log
  - groups:
      - Web Access
    name: Destination IP
    path: network.destination.ip
    source: log
  - groups:
      - User
    name: User Name
    path: usr.name
    source: log
  - groups:
      - Web Access
    name: Destination Hostname
    path: network.destination.hostname
    source: log
  - groups:
      - Tenable
    name: Nessus Function
    path: function
    source: log
  - groups:
      - Tenable
    name: Nessus Scan Name
    path: scan_name
    source: log
pipeline:
  type: pipeline
  name: Tenable
  enabled: true
  filter:
    query: source:tenable
  processors:
    - type: grok-parser
      name: Date, Status, Function, User, Target, Scan Name, Message
      enabled: true
      source: message
      samples:
        - "[06/Oct/2019:16:00:58 +0000] [info] [scheduler] [schedule_id=7, container_id=0] Started scan 'scan_name' as '1fc82d8d-770b-59c1-4c7d-daa1ab70dbf8c8e449bb9eaa9a50'"
        - '[Tue Jul 23 01:55:22 2019][2196.0][scan=6959bc4d-2c25-0fe8-1765-5826ee97a873e411400b6f167043][duration=487.00s] : Finished: 1 of 1 hosts up, 0 unscanned, 0 rejected, 0 dead, 0 timeout, 0 aborted'
      grok:
        matchRules: |
          nessus_format1 \[%{date("dd/MMM/yyyy:HH:mm:ss Z"):date}\] ((\[%{word:status}\] \[%{word:function}\])|(\[%{word:status}, %{word:function}\])|(\[%{word:status}\]))( \[%{data:}])? %{data:msg}

          nessus_format2 (\[%{date("EEE MMM  d HH:mm:ss yyyy"):date}\]|\[%{date("EEE MMM d HH:mm:ss yyyy"):date}\])\[%{number:}](\[user=%{data:usr.name}])?(\[name=%{data:scan_name}])?(\[scan=%{data:scan}])?(\[target=%{ip:network.destination.ip}])?(\[target=%{data:network.destination.hostname}])?(\[duration=%{number:duration:scale(1000000000)}s])? : %{data:msg}

        supportRules: ''
    - type: date-remapper
      name: Define `date` as the official date of the log
      enabled: true
      sources:
        - date
    - type: message-remapper
      name: Define `msg` as the official message of the log
      enabled: true
      sources:
        - msg
    - type: status-remapper
      name: Define `status` as the official status of the log
      enabled: true
      sources:
        - status
    - type: grok-parser
      name: Nessus Attribute Parser
      enabled: true
      source: message
      samples:
        - Started scan 'scan_name' as '1fc82d8d-770b-59c1-4c7d-daa1ab70dbf8c8e449bb9eaa9a50'
        - 'user: user_name successful login from ip: 1.2.3.4'
        - 'user: user_name bad login attempt from ip: 1.2.3.4'
        - 1.2.3.4 mug/1571433041:0:4965 frank [18/Oct/2019:21:10:41 +0000] "GET /folders HTTP/1.0" 200 181 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36"
      grok:
        supportRules: |
          _auth %{notSpace:http.auth:nullIf("-")}
          _bytes_written %{integer:network.bytes_written}
          _client_ip %{ipOrHost:network.client.ip}
          _version HTTP\/%{regex("\\d+\\.\\d+"):http.version}
          _url %{notSpace:http.url}
          _ident %{notSpace:http.ident:nullIf("-")}
          _user_agent %{regex("[^\\\"]*"):http.useragent}
          _referer %{notSpace:http.referer}
          _status_code %{integer:http.status_code}
          _method %{word:http.method}
          _date_access %{date("dd/MMM/yyyy:HH:mm:ss Z"):date}
          _x_forwarded_for %{regex("[^\\\"]*"):http._x_forwarded_for:nullIf("-")}
        matchRules: |
          nessus_scan_name_and_id Started scan '%{data:scan_name}' as '%{data:scan}'

          nessus_successful_login user: %{data:usr.name} successful login from ip: %{ip:network.client.ip}

          nessus_failed_login user: %{data:usr.name} bad login attempt from ip: %{ip:network.client.ip}

          # The following rules are used to extract Nessus web application standard attributes
          nessus.web.common %{_client_ip} %{_ident} %{_auth} \[%{_date_access}\] "(?>%{_method} |)%{_url}(?> %{_version}|)" %{_status_code} (?>%{_bytes_written}|-)
          nessus.web.combined %{nessus.web.common} (%{number:duration:scale(1000000000)} )?"%{_referer}" "%{_user_agent}"( "%{_x_forwarded_for}")?.*
    - type: category-processor
      name: Event Name
      enabled: true
      categories:
        - filter:
            query: '"Successfully sent result email"'
          name: Email Sent
        - filter:
            query: '"Finished:"'
          name: Scan Finished
        - filter:
            query: '"Started scan"'
          name: Scan Started
        - filter:
            query: ("successful login" OR "bad login attempt")
          name: Login Attempt
        - filter:
            query: ("Started with")
          name: Scan Started On Host
        - filter:
            query: '@target:* "Finished"'
          name: Scan Finished On Host
      target: evt.name
    - type: category-processor
      name: Event Outcome
      enabled: true
      categories:
        - filter:
            query: '"successful login"'
          name: SUCCESS
        - filter:
            query: '"bad login attempt"'
          name: FAILURE
      target: evt.outcome
