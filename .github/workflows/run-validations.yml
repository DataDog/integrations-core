name: Run validations

on:
  workflow_call:
    inputs:
      repo:
        required: true
        type: string

      ddev-version:
        required: false
        type: string
      agent-reqs:
        required: false
        default: false
        type: boolean
      ci:
        required: false
        default: false
        type: boolean
      codeowners:
        required: false
        default: false
        type: boolean
      config:
        required: false
        default: false
        type: boolean
      dashboards:
        required: false
        default: false
        type: boolean
      dep:
        required: false
        default: false
        type: boolean
      eula:
        required: false
        default: false
        type: boolean
      http:
        required: false
        default: false
        type: boolean
      imports:
        required: false
        default: false
        type: boolean
      integration-style:
        required: false
        default: false
        type: boolean
      jmx-metrics:
        required: false
        default: false
        type: boolean
      labeler:
        required: false
        default: false
        type: boolean
      legacy-signature:
        required: false
        default: false
        type: boolean
      license-headers:
        required: false
        default: false
        type: boolean
      licenses:
        required: false
        default: false
        type: boolean
      metadata:
        required: false
        default: false
        type: boolean
      models:
        required: false
        default: false
        type: boolean
      openmetrics:
        required: false
        default: false
        type: boolean
      package:
        required: false
        default: false
        type: boolean
      readmes:
        required: false
        default: false
        type: boolean
      saved-views:
        required: false
        default: false
        type: boolean
      service-checks:
        required: false
        default: false
        type: boolean
      typos:
        required: false
        default: false
        type: boolean
      version:
        required: false
        default: false
        type: boolean

defaults:
  run:
    shell: bash

jobs:
  run:
    name: Validate
    runs-on: ubuntu-22.04

    env:
      PYTHON_VERSION: "3.12"
      TARGET: ${{ github.event_name == 'pull_request' && 'changed' || '' }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: "0"

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: "${{ env.PYTHON_VERSION }}"

    - name: Install ddev from local folder
      if: inputs.repo == 'core'
      run: |-
        pip install -e ./datadog_checks_dev[cli]
        pip install -e ./ddev

    - name: Install ddev from PyPI
      if: inputs.repo != 'core'
      run: pip install ddev${{ inputs.ddev-version }}

    - name: Configure ddev
      run: |
        ddev config set repos.${{ inputs.repo }} .
        ddev config set repo ${{ inputs.repo }}
        ddev config set orgs.ci.dd_url "https://app.datadoghq.com"
        ddev config set org ci

    - name: Validate Agent integration version requirements
      if: inputs.agent-reqs
      run: ddev validate agent-reqs $TARGET

    - name: Validate CI configuration
      if: inputs.ci
      run: ddev validate ci

    - name: Validate the CODEOWNERS file
      if: inputs.codeowners
      run: ddev validate codeowners

    - name: Validate default configuration files
      if: inputs.config
      run: ddev validate config $TARGET

    - name: Validate dashboards
      if: inputs.dashboards
      run: ddev validate dashboards $TARGET

    - name: Validate dependencies
      if: inputs.dep
      run: ddev validate dep

    - name: Validate EULA files
      if: inputs.eula
      run: ddev validate eula $TARGET

    - name: Validate usage of HTTP(S) utilities
      if: inputs.http
      run: ddev validate http $TARGET

    - name: Validate proper modern importing of core packages
      if: inputs.imports
      run: ddev validate imports $TARGET

    - name: Validate coding conventions
      if: inputs.integration-style
      run: ddev validate integration-style $TARGET

    - name: Validate default JMX metric files
      if: inputs.jmx-metrics
      run: ddev validate jmx-metrics $TARGET

    - name: Validate signatures of check classes
      if: inputs.legacy-signature
      run: ddev validate legacy-signature $TARGET

    - name: Validate all shipped files have license headers
      if: inputs.license-headers
      run: ddev validate license-headers $TARGET

    - name: Validate metric metadata
      if: inputs.metadata
      run: ddev validate metadata $TARGET

    - name: Validate configuration models
      if: inputs.models
      run: ddev validate models $TARGET

    - name: Validate openmetrics metric limit
      if: inputs.openmetrics
      run: ddev validate openmetrics $TARGET

    - name: Validate Python project metadata
      if: inputs.package
      run: ddev validate package $TARGET

    - name: Validate README files
      if: inputs.readmes
      run: ddev validate readmes $TARGET

    - name: Validate saved views
      if: inputs.saved-views
      run: ddev validate saved-views $TARGET

    - name: Validate service check metadata
      if: inputs.service-checks
      run: ddev validate service-checks $TARGET

    - name: Validate spelling
      if: inputs.typos
      run: ddev validate typos $TARGET

    - name: Validate labeler configuration
      if: inputs.labeler
      run: ddev validate labeler

    - name: Validate target version
      if: inputs.version
      run: ddev validate version $TARGET

    # Every validation below here is sorted by increasing runtime rather than alphabetically
    - name: Validate third-party license metadata
      if: inputs.licenses
      env:
        DD_GITHUB_USER: "${{ github.actor }}"
        DD_GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      run: ddev validate licenses

    - name: Comment PR on failure
      if: ${{ failure() && github.event.pull_request.merged != true }}
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { issue: { number: issue_number }, repo: { owner, repo }  } = context;
          github.rest.issues.createComment({ issue_number, owner, repo, body: "The `validations` job has failed; please review the `Files changed` tab for possible suggestions to resolve." });
