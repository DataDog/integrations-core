name: Validate repository

on:
  workflow_call:
    inputs:
      repo:
        required: true
        type: string

defaults:
  run:
    shell: bash

jobs:
  run:
    name: Validate
    runs-on: ubuntu-22.04

    env:
      PYTHON_VERSION: "3.8"
      TARGET: ${{ github.event_name == 'pull_request' && 'changed' || '' }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: "0"

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ env.PYTHON_VERSION }}"

    - name: Upgrade Python packaging tools
      run: pip install --disable-pip-version-check --upgrade pip setuptools wheel

    - name: Install ddev
      run: |
        pip install -e ./datadog_checks_dev[cli]
        pip install -e ./ddev

    - name: Configure ddev
      run: |
        ddev config set repos.core .
        ddev config set repo core
        ddev config set orgs.ci.dd_url "https://app.datadoghq.com"
        ddev config set org ci

    - name: Run agent requirements validation
      if: inputs.repo == 'core'
      run: |
        ddev validate agent-reqs $TARGET

    - name: Run CI validation
      run: |
        ddev validate ci

    - name: Run configuration validation
      run: |
        ddev validate config $TARGET

    - name: Run dashboard validation
      run: |
        ddev validate dashboards $TARGET

    - name: Run dependency validation
      if: inputs.repo == 'core'
      run: |
        ddev validate dep

    - name: Run HTTP wrapper validation
      if: inputs.repo == 'core'
      run: |
        ddev validate http $TARGET

    - name: Run imports validation
      run: |
        ddev validate imports $TARGET

    - name: Run integration style and best practices validation
      if: inputs.repo == 'core'
      run: |
        ddev validate integration-style $TARGET --verbose

    - name: Run JMX metrics validation
      run: |
        ddev validate jmx-metrics $TARGET

    - name: Run legacy signature validation
      run: |
        ddev validate legacy-signature $TARGET

    - name: Run licenses validation
      if: ${{ inputs.repo == 'core' && github.event.pull_request.head.repo.full_name == github.repository }}  # only PRs from this repo
      env:
        DD_GITHUB_USER: ${{ github.actor }}
        DD_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ddev validate licenses

    - name: Run license header validation
      if: inputs.repo == 'core'
      run: |
        ddev validate license-headers $TARGET

    - name: Run metadata validation
      run: |
        ddev validate metadata $TARGET

    - name: Run models validation
      run: |
        ddev validate models $TARGET

    - name: Run package validation
      run: |
        ddev validate package $TARGET

    - name: Run readmes validation
      run: |
        ddev validate readmes $TARGET

    - name: Run recommended monitors validation
      run: |
        ddev validate recommended-monitors $TARGET

    - name: Run saved views validation
      run: |
        ddev validate saved-views $TARGET

    - name: Run service checks validation
      run: |
        ddev validate service-checks $TARGET

    - name: Comment PR on failure
      if: ${{ failure() && github.event.pull_request.merged != true }}
      uses: actions/github-script@0.3.0
      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { issue: { number: issue_number }, repo: { owner, repo }  } = context;
          github.issues.createComment({ issue_number, owner, repo, body: "The `validations` job has failed; please review the `Files changed` tab for possible suggestions to resolve." });
