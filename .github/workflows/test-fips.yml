name: Test FIPS

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string
      runner:
        required: true
        type: string

defaults:
  run:
    shell: bash

jobs:
  run:
    name: FIPS test on "${{ inputs.platform }}"
    runs-on: ${{ fromJson(inputs.runner) }}

    env:
      FORCE_COLOR: "1"
      DEBIAN_FRONTEND: "noninteractive"
      LD_LIBRARY_PATH: /usr/local/lib
      OPENSSL_CONF: /usr/local/ssl/openssl.cnf
      OPENSSL_FIPS: 1
      PYTHON_VERSION: "3.12"
      OPENSSL_VERSION: "3.0.15"
      FIPS_MODULE_VERSION:  "3.0.9"


    steps:

    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: "${{ env.PYTHON_VERSION }}"
        cache: 'pip'

    - name: Install System Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt update && \
        sudo apt install -y --no-install-recommends \
          wget \
          build-essential \
          gcc \
          make \
          perl \
          libc6-dev && \
        sudo apt-get clean && \
        sudo rm -rf /var/lib/apt/lists/*

    - name: Install OpenSSL
      if: runner.os == 'Linux'
      run: |
        wget https://www.openssl.org/source/openssl-3.0.9.tar.gz \
        && tar -xvzf openssl-3.0.9.tar.gz \
        && cd openssl-3.0.9 \
        && ./Configure enable-fips \
        && make \
        && sudo make install

    - name: Install NASM (Required for OpenSSL)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # Install NASM if not already available
        if (-Not (Get-Command nasm -ErrorAction SilentlyContinue)) {
          choco install nasm -y
        }
        $env:PATH += ";C:\Program Files\NASM"
        Add-Content -Path $env:GITHUB_ENV -Value "PATH=$($env:PATH)"


    - name: Cache FIPS Module
      uses: actions/cache@v3
      with:
        path: openssl-${{ env.FIPS_MODULE_VERSION }}
        key: ${{ runner.os }}-openssl-${{ env.FIPS_MODULE_VERSION }}-${{ hashFiles('**/Configure') }}
        restore-keys: |
          ${{ runner.os }}-openssl-${{ env.FIPS_MODULE_VERSION }}-

    - name: Cache OpenSSL
      uses: actions/cache@v3
      with:
        path: openssl-${{ env.OPENSSL_VERSION }}
        key: ${{ runner.os }}-openssl-${{ env.OPENSSL_VERSION }}-${{ hashFiles('**/Configure') }}
        restore-keys: |
          ${{ runner.os }}-openssl-${{ env.OPENSSL_VERSION }}-

    - name: Download OpenSSL and FIPS Provider
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Invoke-WebRequest -Uri "https://github.com/openssl/openssl/releases/download/openssl-${{ env.OPENSSL_VERSION }}/openssl-${{ env.OPENSSL_VERSION }}.tar.gz" -OutFile openssl.tar.gz
        Invoke-WebRequest -Uri "https://github.com/openssl/openssl/releases/download/openssl-${{ env.FIPS_MODULE_VERSION }}/openssl-${{ env.FIPS_MODULE_VERSION }}.tar.gz" -OutFile fipsmodule.tar.gz

    - name: Configure Environment and Build FIPS Module
      shell: cmd
      run: |
        REM Locate Visual Studio installation path
        FOR /F "tokens=*" %%I IN ('"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.Component.MSBuild -property installationPath') DO SET VSINSTALLPATH=%%I

        REM Run vcvarsall.bat for the amd64 architecture
        CALL "%VSINSTALLPATH%\VC\Auxiliary\Build\vcvarsall.bat" amd64

        REM Build FIPS Module
        tar -xzf fipsmodule.tar.gz
        cd openssl-${{ env.FIPS_MODULE_VERSION }}
        perl Configure VC-WIN64A enable-fips
        nmake
        nmake install

    - name: Configure Environment and Build OpenSSL
      shell: cmd
      run: |
        REM Locate Visual Studio installation path
        FOR /F "tokens=*" %%I IN ('"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.Component.MSBuild -property installationPath') DO SET VSINSTALLPATH=%%I

        REM Run vcvarsall.bat for the amd64 architecture
        CALL "%VSINSTALLPATH%\VC\Auxiliary\Build\vcvarsall.bat" amd64

        REM Build OpenSSL
        tar -xzf openssl.tar.gz
        cd openssl-${{ env.OPENSSL_VERSION }}
        perl Configure VC-WIN64A enable-fips
        nmake
        nmake install

    - name: Run openssl fipsinstall
      shell: powershell
      run: |
        cd openssl-${{ env.FIPS_MODULE_VERSION }}
        .\openssl.exe fipsinstall -module providers\fips.dll -out ..\openssl-${{ env.OPENSSL_VERSION }}\apps\fipsmodule.cnf

    - name: Configure OpenSSL for FIPS
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # Create openssl.cnf to enable FIPS mode
        $OpenSSLConf = @"
        config_diagnostics = 1
        openssl_conf = openssl_init

        .include fipsmodule.cnf

        [openssl_init]
        providers = provider_sect
        alg_section = algorithm_sect

        [provider_sect]
        fips = fips_sect
        base = base_sect

        [base_sect]
        activate = 1

        [algorithm_sect]
        default_properties = fips=yes
        "@
        $OpenSSLConf | Set-Content -Path "openssl-${{ env.openssl_version }}\apps\openssl.cnf"

    - name: Verify OpenSSL with FIPS
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # Set environment variables
        [Environment]::SetEnvironmentVariable("OPENSSL_CONF", "openssl-${{ env.openssl_version }}\apps\openssl.cnf", "Process")
        [Environment]::SetEnvironmentVariable("OPENSSL_FIPS", "1", "Process")
        
        # Verify OpenSSL installation and FIPS mode
        & "openssl-${{ env.OPENSSL_VERSION }}\openssl.exe" version -a
        & "openssl-${{ env.OPENSSL_VERSION }}\openssl.exe" list -providers
        & "openssl-${{ env.OPENSSL_VERSION }}\openssl.exe" list -properties

    - name: Install Cryptography
      run: pip install cryptography

    - name: Test Cryptography without FIPS
      run: python -c "from cryptography.hazmat.primitives import hashes; hashes.Hash(hashes.MD5())"

    - name: Test Cryptography with FIPS
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        [Environment]::SetEnvironmentVariable("OPENSSL_CONF", ".\openssl-${{ env.OPENSSL_VERSION }}\apps\openssl.cnf", "Process")
        [Environment]::SetEnvironmentVariable("OPENSSL_MODULES", ".\openssl-${{ env.FIPS_MODULE_VERSION }}\providers", "Process")
        python -c "from cryptography.hazmat.primitives import hashes; hashes.Hash(hashes.MD5())"

    # Verify OpenSSL Installation
    - name: Verify OpenSSL and FIPS Provider
      run: |
        cd openssl-${{ env.OPENSSL_VERSION }}
        .\openssl.exe version -a
        .\openssl.exe list -providers

    # Verify OpenSSL Installation
    - name: Verify OpenSSL after ENV vars
      if: runner.os == 'Windows'
      run: |
        [Environment]::SetEnvironmentVariable("OPENSSL_CONF", ".\openssl-${{ env.OPENSSL_VERSION }}\apps\openssl.cnf", "Process")
        [Environment]::SetEnvironmentVariable("OPENSSL_MODULES", ".\openssl-${{ env.FIPS_MODULE_VERSION }}\providers", "Process")
        .\openssl.exe list -providers
