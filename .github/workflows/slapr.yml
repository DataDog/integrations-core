# https://github.com/DataDog/slapr

name: Slack emoji PR updates
on:
  pull_request_review:
    types: [submitted]
  pull_request:
    types: [closed]

jobs:
  run_slapr_agent_integrations:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        slack_channels: [ { channel_id: SLACK_CHANNEL_ID, team_name: "fake"}, { channel_id: SLACK_CHANNEL_ID_AGENT_INTEGRATIONS_REVIEWS, team_name: "agent-integrations"}, { channel_id: SLACK_CHANNEL_ID_INFRA_INTEGRATIONS, team_name: "Network Device Monitoring"} ]
    steps:
    - name: Create token
      uses: actions/create-github-app-token@v1
      id: token-generator
      with:
        app-id: ${{ secrets.DD_AGENT_INTEGRATIONS_BOT_APP_ID }}
        private-key: ${{ secrets.DD_AGENT_INTEGRATIONS_BOT_PRIVATE_KEY }}
        repositories: integrations-core
    - name: Get reviewer's team
      id: teams
      run: |
        gh api graphql --paginate -f query='{organization(login: "DataDog") {teams(first: 100, userLogins: ["$REVIEWER_ID"]) { edges {node {name}}}}}' | jq -r '[.data.organization.teams.edges[].node.name] | join(",")'
      env:
        GITHUB_TOKEN: "${{ steps.token-generator.outputs.token }}"
    - uses: DataDog/slapr@master
#      if: contains(steps.teams.outputs.teams, matrix.slack_channels.team_name)
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        SLACK_CHANNEL_ID: "${{ secrets[matrix.slack_channels.channel_id] }}"
        SLACK_API_TOKEN: "${{ secrets.SLACK_API_TOKEN }}"
        SLAPR_BOT_USER_ID: "${{ secrets.SLAPR_BOT_USER_ID }}"
        SLAPR_EMOJI_REVIEW_STARTED: "review_started"
        SLAPR_EMOJI_APPROVED: "approved2"
        SLAPR_EMOJI_CHANGES_REQUESTED: "changes_requested"
        SLAPR_EMOJI_MERGED: "merged"
        SLAPR_EMOJI_CLOSED: "closed"
