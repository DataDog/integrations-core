# .github/workflows/check-all-approvals.yml

name: Check All Approvals

on:
  # Triggers when a PR is opened, updated, a reviewer is added, or a review is submitted.
  pull_request_target:
    types:
      - opened
      - synchronize
      - ready_for_review
      - review_requested
      - review_request_removed
  pull_request_review:
    types:
      - submitted
 
permissions:
  contents: read
  pull-requests: read

jobs:
  approvals-gate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Check approvals
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
            set -euo pipefail

            # === Step 1: Get All Requested Reviewers (Users and Teams) ===
            echo "Fetching requested reviewers..."
            REQUESTED_REVIEWERS_JSON="$(gh api "repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER/requested_reviewers")"

            # Extract users who were requested directly
            DIRECT_USERS="$(jq -r '.users[].login' <<< "$REQUESTED_REVIEWERS_JSON")"

            # Extract the slugs of all requested teams
            REQUESTED_TEAMS="$(jq -r '.teams[].slug' <<< "$REQUESTED_REVIEWERS_JSON")"


            # === Step 2: Expand Teams to Get a List of All Members ===
            TEAM_MEMBERS=""
            if [[ -n "$REQUESTED_TEAMS" ]]; then
            echo "Expanding teams: $REQUESTED_TEAMS"
            ORG_NAME="${GITHUB_REPOSITORY%/*}" # Extracts 'owner' from 'owner/repo'
            while IFS= read -r team_slug; do
                # Append members from each team to the list using the API
                TEAM_MEMBERS+=$'\n' # Add a newline to separate member lists
                TEAM_MEMBERS+=$(gh api "orgs/$ORG_NAME/teams/$team_slug/members" --jq '.[].login')
            done <<< "$REQUESTED_TEAMS"
            fi


            # === Step 3: Combine and Finalize the List of Requested Users ===
            REQUESTED_USERS="$(
            (echo "${DIRECT_USERS}"; echo "${TEAM_MEMBERS}") | grep -v '^$' | sort -u
            )"


            # === Step 4: Get All Users Who Have Approved ===
            echo "Fetching submitted reviews to find approvals..."
            REVIEWS_JSON="$(gh api "repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER/reviews")"

            # Use jq to find the latest review for each user and filter for "APPROVED"
            APPROVED_USERS="$(
            jq -r '
                group_by(.user.login)
                | map(sort_by(.submitted_at) | last)
                | map(select(.state == "APPROVED"))
                | .[].user.login
            ' <<<"$REVIEWS_JSON" | sort -u
            )"


            # === Step 5: Generate Summary and Check for Missing Approvals ===
            # This part of the logic remains the same as your original script.

            # Nice summary in the job summary pane
            {
            echo "### All-Approvals Gate"
            echo ""
            echo "**Requested reviewers (users & team members):**"
            if [[ -z "${REQUESTED_USERS}" ]]; then
                echo "- <none>"
            else
                echo "${REQUESTED_USERS}" | sed 's/^/- /'
            fi
            echo ""
            echo "**Approving reviewers (latest state = APPROVED):**"
            if [[ -z "${APPROVED_USERS}" ]]; then
                echo "- <none>"
            else
                echo "${APPROVED_USERS}" | sed 's/^/- /'
            fi
            echo ""
            } >> "$GITHUB_STEP_SUMMARY"

            # If no user reviewers were requested, pass
            if [[ -z "${REQUESTED_USERS}" ]]; then
            echo "No user reviewers requested; passing."
            exit 0
            fi

            # Compare sets and collect missing
            MISSING=()
            while IFS= read -r reviewer; do
            [[ -z "$reviewer" ]] && continue
            if ! grep -qx "$reviewer" <<<"$APPROVED_USERS"; then
                echo "❌ MISSING APPROVAL: $reviewer"
                MISSING+=("$reviewer")
            fi
            done <<<"$REQUESTED_USERS"

            # Add missing list to job summary and fail if any
            if (( ${#MISSING[@]} > 0 )); then
            {
                echo "**Missing approvals:**"
                for r in "${MISSING[@]}"; do
                echo "- $r"
                done
            } >> "$GITHUB_STEP_SUMMARY"
            echo "Still waiting for ${#MISSING[@]} reviewer(s) to approve."
            exit 1
            else
            echo "✅ All requested reviewers have approved."
            echo "✅ All requested reviewers have approved." >> "$GITHUB_STEP_SUMMARY"
            fi