
name: Check All Approvals

on:
  # Triggers when a PR is opened, updated, a reviewer is added, or a review is submitted.
  pull_request_target:
    types:
      - opened
      - synchronize
      - ready_for_review
      - review_requested
      - review_request_removed
  pull_request_review:
    types:
      - submitted
 
permissions:
  contents: read
  pull-requests: read

jobs:
  approvals-gate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Check approvals
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail

          # Pull all needed PR data in a single call (no REST API)
          PR_JSON="$(gh pr view "$PR_NUMBER" --json "reviewRequests{login,members{nodes{login}}}")"

          # Requested user reviewers (teams ignored)
          REQUESTED_USERS="$(
            jq -r '.reviewRequests | .. | .login? // empty' <<<"$PR_JSON" | sort -u
          )"

          # Users whose LATEST review is APPROVED
          APPROVED_USERS="$(
            jq -r '
              .reviews
              | group_by(.author.login)
              | map(sort_by(.submittedAt) | last)
              | map(select(.state == "APPROVED"))
              | .[].author.login
            ' <<<"$PR_JSON" | sort -u
          )"

          # Nice summary in the job summary pane
          {
            echo "### All-Approvals Gate"
            echo ""
            echo "**Requested reviewers (users):**"
            if [[ -z "${REQUESTED_USERS}" ]]; then
              echo "- <none>"
            else
              echo "${REQUESTED_USERS}" | sed 's/^/- /'
            fi
            echo ""
            echo "**Approving reviewers (latest state = APPROVED):**"
            if [[ -z "${APPROVED_USERS}" ]]; then
              echo "- <none>"
            else
              echo "${APPROVED_USERS}" | sed 's/^/- /'
            fi
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"

          # If no user reviewers were requested, pass
          if [[ -z "${REQUESTED_USERS}" ]]; then
            echo "No user reviewers requested; passing."
            exit 0
          fi

          # Compare sets and collect missing
          MISSING=()
          while IFS= read -r reviewer; do
            [[ -z "$reviewer" ]] && continue
            if ! grep -qx "$reviewer" <<<"$APPROVED_USERS"; then
              echo "❌ MISSING APPROVAL: $reviewer"
              MISSING+=("$reviewer")
            fi
          done <<<"$REQUESTED_USERS"

          # Add missing list to job summary and fail if any
          if (( ${#MISSING[@]} > 0 )); then
            {
              echo "**Missing approvals:**"
              for r in "${MISSING[@]}"; do
                echo "- $r"
              done
            } >> "$GITHUB_STEP_SUMMARY"
            echo "Still waiting for ${#MISSING[@]} reviewer(s) to approve."
            exit 1
          else
            echo "✅ All requested reviewers have approved."
            echo "✅ All requested reviewers have approved." >> "$GITHUB_STEP_SUMMARY"
          fi