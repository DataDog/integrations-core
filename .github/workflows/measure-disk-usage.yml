name: Measure Disk Usage

on:
  pull_request:
    branches:
    - master 
env:
  PYTHON_VERSION: "3.12"
permissions:
  contents: read
  pull-requests: write

jobs:
  measure-disk-usage:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0

    - name: Add justification section
      if: false 
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        PR_BODY: ${{ github.event.pull_request.body }}
      run: |
        # The new section to add. You can use \n for new lines.
        section_title="New Dependency Motivation"
        new_section="### $section_title
        
        <!-- Please explain why this new dependency is necessary and why similar existing libraries are not suitable. -->
        
        "
          
        # The text to insert the section before.
        landmark_text="### Review checklist"

        # Only add the section if it doesn't already exist
        if [[ "$PR_BODY" != *"$section_title"* ]]; then
          echo "Dependency file changed and justification section not found. Adding it now."
          
          # Split the body at the landmark text and insert the new section
          body_before_landmark="${PR_BODY%%"$landmark_text"*}"
          body_after_landmark="${PR_BODY#"$body_before_landmark"}"
          
          new_body="$body_before_landmark$new_section$body_after_landmark"

          gh pr edit $PR_NUMBER --body "$new_body"
        else
          echo "$section_title section already exists. No changes made."
        fi
  # require-approval:
  #   runs-on: ubuntu-22.04
  #   environment: quality-gates
  #   steps:
  #     - name: Request review from manager
  #       run: |
  #         echo "Requesting review from manager"

  # Step 2: Extract the old and new commit hashes from the diff
    # - name: Extract Commit Hashes from File Content
    #   id: extract
    #   run: |
    #     # IMPORTANT: Replace this path with the actual path to your file
    #     FILE_PATH="path/to/your/file.json"

    #     # Get the full diff for the specific file between the base and head of the PR
    #     FULL_DIFF=$(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- $FILE_PATH)

    #     # Extract the line that was removed (starts with '-') and contains the key
    #     OLD_LINE=$(echo "$FULL_DIFF" | grep '^-.*"INTEGRATIONS_CORE_VERSION"')

    #     # Extract the line that was added (starts with '+') and contains the key
    #     NEW_LINE=$(echo "$FULL_DIFF" | grep '^+.*"INTEGRATIONS_CORE_VERSION"')

    #     # From each line, parse out just the commit hash value
    #     # The 'sed' command captures the alphanumeric string inside the second set of quotes
    #     OLD_COMMIT_HASH=$(echo "$OLD_LINE" | sed -n 's/.*: "\(.*\)".*/\1/p')
    #     NEW_COMMIT_HASH=$(echo "$NEW_LINE" | sed -n 's/.*: "\(.*\)".*/\1/p')

    #     echo "Old Commit Hash (from file): $OLD_COMMIT_HASH"
    #     echo "New Commit Hash (from file): $NEW_COMMIT_HASH"

    #     # Set the hashes as outputs for other steps to use
    #     echo "old_hash=$OLD_COMMIT_HASH" >> "$GITHUB_OUTPUT"
    #     echo "new_hash=$NEW_COMMIT_HASH" >> "$GITHUB_OUTPUT"

