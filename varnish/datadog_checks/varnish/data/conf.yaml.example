init_config:

instances:

    ## @param varnishstat - string - required
    ## The full path to the varnishstat binary and can contain additional arguments.
    ## In order to support monitoring a Varnish instance which is running as a Docker
    ## container you need to wrap commands (varnishstat) with scripts which
    ## perform a docker exec on the running container.  Passing along template variables
    ## (%%host%%, %%port%%) allow for targeting the proper container via service discovery.
    #
  - varnishstat: /usr/bin/varnishstat

    ## @param metrics_filter - list of strings - optional
    ## List of field inclusion blobs that are passed to varnishstat with the
    ## -f options to filter which metrics to collect.
    ##
    ## See https://www.varnish-cache.org/docs/4.1/reference/varnishstat.html#options.
    ## The exclusion filter with '^' is broken with 'varnishstat' version 4.0 to 4.1.6 and 5.0 to 5.1.2.
    ## See https://github.com/varnishcache/varnish-cache/issues/2320
    ## Version 4.1.7 has been released and includes a fix for this.
    ## Using the exclusion blob with a broken version silences the integration.
    ## However, you can still use the inclusion blob with those versions.
    #
    # metrics_filter:
    #   - <FIELD_INCLUSION>

    ## @param name - string - optional
    ## The name used in the varnishstat command for the
    ## -n argument which will add a name:<INSTANCE_NAME> tag to all metrics.
    #
    # name: <INSTANCE_NAME>

    ## @param tags  - list of key:value elements - optional
    ## List of tags to attach to every metric, event, and service check emitted by this Integration.
    ##
    ## Learn more about tagging: https://docs.datadoghq.com/tagging/
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param varnishadm - string - optional
    ## The path to the varnishadm binary signals the check to
    ## emit a service check status on backend health using `debug.health`.
    ## Similar to the varnishstat command this path can contain additional arguments
    ## in order to support service discovery.
    ##
    ## The service check is tagged by backend.
    #
    # varnishadm: /usr/bin/varnishadm

    ## @param secretfile - string - optional
    ## The path to the varnish secretfile used in the varnishadm command, if enabled.
    #
    # secretfile: /etc/varnish/secret

    ## @param daemon_host - string - optional - default: localhost
    ## The parameters for specifying the host to connect to varnishadm.
    ## Used in version 4.1.0 and above.
    #
    # daemon_host: localhost

    ## @param daemon_port - integer - optional - default: 6082
    ## The parameters for specifying the port to connect to varnishadm.
    ## Used in version 4.1.0 and above.
    #
    # daemon_port: 6082

## Log Section (Available for Agent >=6.0)
##
## type - mandatory - Type of log input source (tcp / udp / file / windows_event)
## port / path / channel_path - mandatory - Set port if type is tcp or udp. Set path if type is file. Set channel_path if type is windows_event
## service - mandatory - Name of the service that generated the log
## source  - mandatory - Attribute that defines which Integration sent the logs
## sourcecategory - optional - Multiple value attribute. Used to refine the source attribute
## tags: - optional - Add tags to the collected logs
##
## Discover Datadog log collection: https://docs.datadoghq.com/logs/log_collection/
#
# logs:
#   - type: file
#     path: /var/log/varnish/varnishncsa.log
#     source: varnish
#     sourcecategory: http_web_access
#     service: varnish
