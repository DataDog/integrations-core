## All options defined here are available to all instances.
#
init_config:

    ## @param service - string - optional
    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.
    ##
    ## Additionally, this sets the default `service` for every log source.
    #
    # service: <SERVICE>

## Every instance is scheduled independent of the others.
#
instances:

    ## @param varnishstat - string - required
    ## The full path to the varnishstat binary and can contain additional arguments.
    ## In order to support monitoring a Varnish instance which is running as a Docker
    ## container you need to wrap commands (varnishstat) with scripts which
    ## perform a docker exec on the running container.  Passing along template variables
    ## (%%host%%, %%port%%) allows for targeting the proper container via service discovery.
    #
  - varnishstat: /usr/bin/varnishstat

    ## @param metrics_filter - list of strings - optional
    ## List of field inclusion blobs that are passed to varnishstat with the
    ## -f options to filter which metrics to collect.
    ##
    ## See https://www.varnish-cache.org/docs/4.1/reference/varnishstat.html#options.
    ## The exclusion filter with '^' is broken with 'varnishstat' version 4.0 to 4.1.6 and 5.0 to 5.1.2.
    ## See https://github.com/varnishcache/varnish-cache/issues/2320
    ## Version 4.1.7 has been released and includes a fix for this.
    ## Using the exclusion blob with a broken version silences the integration.
    ## However, you can still use the inclusion blob with those versions.
    #
    # metrics_filter:
    #   - <FIELD_INCLUSION>

    ## @param name - string - optional
    ## The name used in the varnishstat command for the
    ## -n argument which will add a name:<INSTANCE_NAME> tag to all metrics.
    #
    # name: <INSTANCE_NAME>

    ## @param varnishadm - string - optional
    ## The path to the varnishadm binary signals the check to
    ## emit a service check status on backend health using `debug.health`.
    ## Similar to the varnishstat command this path can contain additional arguments
    ## in order to support service discovery.
    ##
    ## The service check is tagged by backend.
    #
    # varnishadm: /usr/bin/varnishadm

    ## @param secretfile - string - optional - default: /etc/varnish/secret
    ## The path to the varnish secretfile used in the varnishadm command, if enabled.
    #
    # secretfile: /etc/varnish/secret

    ## @param daemon_host - string - optional - default: localhost
    ## The parameters for specifying the host to connect to varnishadm.
    ## Used in version 4.1.0 and above.
    #
    # daemon_host: localhost

    ## @param daemon_port - integer - optional - default: 6082
    ## The parameters for specifying the port to connect to varnishadm.
    ## Used in version 4.1.0 and above.
    #
    # daemon_port: 6082

    ## @param tags - list of strings - optional
    ## A list of tags to attach to every metric and service check emitted by this instance.
    ##
    ## Learn more about tagging at https://docs.datadoghq.com/tagging
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param service - string - optional
    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.
    ##
    ## Overrides any `service` defined in the `init_config` section.
    #
    # service: <SERVICE>

    ## @param min_collection_interval - number - optional - default: 15
    ## This changes the collection interval of the check. For more information, see:
    ## https://docs.datadoghq.com/developers/write_agent_check/#collection-interval
    #
    # min_collection_interval: 15

    ## @param empty_default_hostname - boolean - optional - default: false
    ## This forces the check to send metrics with no hostname.
    ##
    ## This is useful for cluster-level checks.
    #
    # empty_default_hostname: false

## Log Section
##
## type - required - Type of log input source (tcp / udp / file / windows_event)
## port / path / channel_path - required - Set port if type is tcp or udp.
##                                         Set path if type is file.
##                                         Set channel_path if type is windows_event.
## source  - required - Attribute that defines which integration sent the logs.
## encoding - optional - For file specifies the file encoding, default is utf-8, other
##                       possible values are utf-16-le and utf-16-be.
## service - optional - The name of the service that generates the log.
##                      Overrides any `service` defined in the `init_config` section.
## tags - optional - Add tags to the collected logs.
##
## Discover Datadog log collection: https://docs.datadoghq.com/logs/log_collection/
#
# logs:
#   - type: file
#     path: /var/log/varnish/varnishncsa.log
#     source: varnish
