metric_name,metric_type,interval,unit_name,per_unit_name,description,orientation,integration,short_name,curated_metric
airflow.can_connect,count,,,,"1 if can connect to Airflow, otherwise 0",0,airflow,can_connect,
airflow.collect_db_dags,gauge,,millisecond,,Milliseconds taken for fetching all Serialized Dags from DB,0,airflow,collect_db_dags,
airflow.healthy,count,,,,"1 if Airflow is healthy, otherwise 0",0,airflow,healthy,
airflow.job.start,count,,job,,"Number of started `<job_name>` job, ex. `SchedulerJob`, `LocalTaskJob`",0,airflow,job.start,
airflow.job.end,count,,job,,"Number of ended `<job_name>` job, ex. `SchedulerJob`, `LocalTaskJob`",0,airflow,job.end,
airflow.job.heartbeat.failure,count,,error,,"Number of failed Heartbeats for a `<job_name>` job, ex. `SchedulerJob`, `LocalTaskJob`",0,airflow,job heartbeat failure,
airflow.operator_failures,count,,,,Operator `<operator_name>` failures,-1,airflow,operator_failures,
airflow.operator_successes,count,,,,Operator `<operator_name>` successes,1,airflow,operator_successes,
airflow.ti_failures,count,,task,,Overall task instances failures,-1,airflow,ti_failures,
airflow.ti_successes,count,,task,,Overall task instances successes,1,airflow,ti_successes,
airflow.previously_succeeded,count,,task,,Number of previously succeeded task instances,1,airflow,previously_succeeded,
airflow.zombies_killed,count,,task,,Zombie tasks killed,0,airflow,zombies_killed,
airflow.scheduler_heartbeat,count,,,,Scheduler heartbeats,0,airflow,scheduler_heartbeat,
airflow.dag_processing.processes,count,,,,Number of currently running DAG parsing processes,0,airflow,dag_proc.processes,
airflow.dag_processing.manager_stalls,count,,,,Number of stalled `DagFileProcessorManager`,0,airflow,dag_proc.manager_stalls,
airflow.dag_file_refresh_error,count,,error,,Number of failures loading any DAG files,0,airflow,dag_file_refresh_error,
airflow.scheduler.critical_section_duration,gauge,,millisecond,,Milliseconds spent in the critical section of scheduler loop -- only a single scheduler can enter this loop at a time,0,airflow,critical_section_duration,
airflow.scheduler.tasks.killed_externally,count,,task,,Number of tasks killed externally,-1,airflow,scheduler.tasks.killed_externally,
airflow.scheduler.orphaned_tasks.cleared,count,,task,,Number of Orphaned tasks cleared by the Scheduler,0,airflow,scheduler.orphaned_tasks.cleared,
airflow.scheduler.orphaned_tasks.adopted,count,,task,,Number of Orphaned tasks adopted by the Scheduler,0,airflow,cheduler.orphaned_tasks.adopted,
airflow.scheduler.critical_section_busy,count,,operation,,Count of times a scheduler process tried to get a lock on the critical section (needed to send tasks to the executor) and found it locked by another process.,0,airflow,scheduler.critical_section_busy,
airflow.scheduler.tasks.running,count,,task,,Number of tasks running in executor,0,airflow,scheduler.tasks.running,
airflow.scheduler.tasks.starving,count,,task,,Number of tasks that cannot be scheduled because of no open slot in pool,0,airflow,scheduler.tasks.starving,
airflow.dagbag_size,gauge,,,,DAG bag size,0,airflow,dagbag_size,
airflow.dag_processing.import_errors,gauge,,error,,Number of errors from trying to parse DAG files,-1,airflow,dag_proc.import_errors,
airflow.dag_processing.total_parse_time,gauge,,second,,Seconds taken to scan and import all DAG files once,-1,airflow,dag_proc.total_parse_time,
airflow.dag_processing.last_runtime,gauge,,second,,Seconds spent processing `<dag_file>` (in most recent iteration),-1,airflow,dag_proc.last_runtime,
airflow.dag_processing.last_run.seconds_ago,gauge,,second,,Seconds since `<dag_file>` was last processed,-1,airflow,dag_proc.last_run.sec_ago,
airflow.dag_processing.processor_timeouts,gauge,,,,Number of file processors that have been killed due to taking too long,-1,airflow,dag_proc.processor_timeouts,
airflow.executor.open_slots,gauge,,,,Number of open slots on executor,0,airflow,executor.open_slots,
airflow.executor.queued_tasks,gauge,,task,,Number of queued tasks on executor,-1,airflow,executor.queued_tasks,
airflow.executor.running_tasks,gauge,,task,,Number of running tasks on executor,0,airflow,executor.running_tasks,
airflow.pool.open_slots,gauge,,,,Number of open slots in the pool,0,airflow,pool.open_slots,
airflow.pool.queued_slots,gauge,,,,Number of queued slots in the pool,0,airflow,pool.queued_slots,
airflow.pool.used_slots,gauge,,,,Number of used slots in the pool,0,airflow,pool.used_slots,
airflow.pool.running_slots,gauge,,,,Number of running slots in the pool,0,airflow,pool.running_slots,
airflow.pool.starving_tasks,gauge,,task,,Number of starving tasks in the pool,-1,airflow,pool.starving_tasks,
airflow.dagrun.dependency_check,gauge,,millisecond,,Milliseconds taken to check DAG dependencies,-1,airflow,dagrun.dep_check,
airflow.dag.task.duration,gauge,,millisecond,,Milliseconds taken to finish a task,-1,airflow,dag.task.duration,
airflow.dag_processing.last_duration,gauge,,millisecond,,Milliseconds taken to load the given DAG file,-1,airflow,dag_proc.last_duration,
airflow.dagrun.duration.success,gauge,,millisecond,,Milliseconds taken for a DagRun to reach success state,-1,airflow,dagrun.duration.success,
airflow.dagrun.duration.failed,gauge,,millisecond,,Milliseconds taken for a DagRun to reach failed state,-1,airflow,dagrun.duration.failed,
airflow.dagrun.schedule_delay,gauge,,millisecond,,Milliseconds of delay between the scheduled DagRun start date and the actual DagRun start date,-1,airflow,dagrun.schedule_delay,
airflow.dagrun.first_task_scheduling_delay,gauge,,millisecond,,Milliseconds elapsed between first task start_date and dagrun expected start,0,airflow,first_task_scheduling_delay,
airflow.dag.loading_duration,gauge,,second,,DAG loading duration in seconds (deprecated),-1,airflow,dag.loading_duration,
airflow.dag.task_removed,gauge,,second,,Tasks removed from DAG,0,airflow,dag.task_removed,
airflow.dag.task_restored,gauge,,second,,Tasks restored to DAG,0,airflow,dag.task_restored,
airflow.sla_email_notification_failure,count,,task,,Number of failed SLA miss email notification attempts,0,airflow,sla_email_notification_failure,
airflow.task.instance_created,gauge,,second,,Task instances created,0,airflow,task.instance_created,
airflow.ti.start,count,,task,,Number of started task in a given dag.,0,airflow,ti.start,
airflow.ti.finish,count,,task,,Number of completed task in a given dag.,0,airflow,ti.finish,
airflow.dag.callback_exceptions,count,,error,,"Number of exceptions raised from DAG callbacks. When this happens, it means DAG callback is not working",0,airflow,dag.callback_exceptions,
airflow.celery.task_timeout_error,count,,error,,Number of `AirflowTaskTimeout` errors raised when publishing Task to Celery Broker.,0,airflow,celery.task_timeout_error,
airflow.task_removed_from_dag,count,,task,,Number of tasks removed for a given dag (i.e. task no longer exists in DAG),0,airflow,task_removed_from_dag,
airflow.task_restored_to_dag,count,,task,,Number of tasks restored for a given dag (i.e. task instance which was previously in REMOVED state in the DB is added to DAG file),0,airflow,ask_restored_to_dag,
airflow.task_instance_created,count,,task,,Number of tasks instances created for a given Operator,0,airflow,task_instance_created,
airflow.scheduler.tasks.without_dagrun,count,,task,,Number of tasks without DagRuns or with DagRuns not in Running state,0,airflow,scheduler.tasks.without_dagrun,
airflow.scheduler.tasks.executable,count,,task,,"Number of tasks that are ready for execution (set to queued) with respect to pool limits, dag concurrency, executor state, and priority.",0,airflow,scheduler.tasks.executable,
airflow.smart_sensor_operator.poked_tasks,count,,task,,Number of tasks poked by the smart sensor in the previous poking loop,0,airflow,smart_sensor_operator.poked_tasks,
airflow.smart_sensor_operator.poked_success,count,,task,,Number of newly succeeded tasks poked by the smart sensor in the previous poking loop,0,airflow,smart_sensor_operator.poked_success,
airflow.smart_sensor_operator.poked_exception,count,,error,,Number of exceptions in the previous smart sensor poking loop,0,airflow,smart_sensor_operator.poked_exception,
airflow.smart_sensor_operator.exception_failures,count,,error,,Number of failures caused by exception in the previous smart sensor poking loop,0,airflow,smart_sensor_operator.exception_failures,
airflow.smart_sensor_operator.infra_failures,count,,error,,Number of infrastructure failures in the previous smart sensor poking loop,0,airflow,smart_sensor_operator.infra_failures,
