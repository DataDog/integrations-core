init_config:

instances:

    ## @param server - string - required
    ## Specify the MongoDB URI, with database to use for reporting (defaults to "admin")
    ## E.g. mongodb://datadog:LnCbkX4uhpuLHSUrcayEoAZA@localhost:27016/admin
    #
  - server: mongodb://<USER>:<PASSWORD>@<HOST>:<PORT>/<DB_NAME>

    ## @param replica_check - boolean - required - default: true
    ## Whether or not to read from available replicas.
    ## Disable this if any replicas are inaccessible to the agent.
    #
    replica_check: true

    ## @param timeout - integer - optional - default: 30
    ## Controls connectTimeoutMS, serverSelectionTimeoutMS and socketTimeoutMS
    ## see http://api.mongodb.com/python/3.4.0/api/pymongo/mongo_client.html
    #
    # timeout: 30

    ## @param tags - list of key:value elements - optional
    ## List of tags to attach to every metric, event and service check emitted by this integration.
    ##
    ## Learn more about tagging: https://docs.datadoghq.com/tagging/
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param ssl - boolean - optional - default: false
    ## Optional SSL parameters, see
    ## https://github.com/mongodb/mongo-python-driver/blob/2.6.3/pymongo/mongo_client.py#L193-L212
    ## for more details
    #
    # ssl: false

    ## @param ssl_keyfile - string - optional
    ## Path to the private key file used to identify the local connection against Mongodb.
    #
    # ssl_keyfile: <SSL_KEY_FILE_PATH>

    ## @param ssl_certfile - string - optional
    ## Path to the certificate file used to identify the local connection against Mongodb.
    #
    # ssl_certfile: <CERT_FILE_PATH>

    ## @param ssl_cert_reqs - integer - optional
    ## Specifies whether a certificate is required from the other side of the connection, and whether it will be
    ## validated if provided.
    ## Possible values:
    ##   * 0 for ssl.CERT_NONE (certificates ignored)
    ##   * 1 for ssl.CERT_OPTIONAL (not required, but validated if provided)
    ##   * 2 for ssl.CERT_REQUIRED (required and validated)
    #
    # ssl_cert_reqs: <SSL_CERT_REQ_VALUE>

    ## @param ssl_ca_certs - string - optional
    ## Path to the ca_certs file.
    #
    # ssl_ca_certs: <CA_CERT_FILE_PATH>

    ## @param additional_metrics - list of strings - optional
    ## By default, the check collects a sample of metrics from MongoDB.
    ## This  parameter instructs the check to collect additional metrics on specific topics.
    ## Available options are:
    ##   * `metrics.commands` - Use of database commands
    ##   * `tcmalloc` -  TCMalloc memory allocator
    ##   * `top` - Usage statistics for each collection
    ##   * `collection` - Metrics of the specified collections
    #
    # additional_metrics:
    #   - metrics.commands
    #   - tcmalloc
    #   - top
    #   - collection

    ## @param collections - list of strings - optional
    ## Collect metrics on specific collections from the database specified
    ## IT Requires `additional_metrics.collection` to be present.
    ## Metrics such as `mongodb.collection.count` are collected for each named collection and tagged as follows:
    ##  * `db:<DB_NAME>` e.g. `db:<DB_NAME>`
    ##  * `collection:<COLLECTION_NAME>` e.g. `collection:<COLLECTION_NAME>`
    ## Each collection generates many metrics, up to 8 + the number of indices on the collection for each collection.
    #
    # collections:
    #   - <COLLECTION_NAME>

    ## @param collections_indexes_stats - boolean - optional - default: false
    ## Collect indexes access metrics for every index in every collections in
    ## the 'collections' list. This is available starting MongoDB 3.2.
    #
    # collections_indexes_stats: false

    ## @param custom_queries - list - optional
    ## Each query must have 3 fields:
    ##
    ## 1. metric_prefix - This is what each metric will start with.
    ## 2. query  - This is the Mongo query to execute. The query needs to be written in a format compatible with
    ##             the Mongo runCommand https://docs.mongodb.com/manual/reference/command/. Note that the agent
    ##             only supports count, find and aggregates queries.
    ## 3. fields - Ignored for `count` queries. This is a list representing each field with no specific order.
    ##             Unspecified and missing fields will be ignored.
    ##             There are 3 required pieces of data:
    ##               a. field_name - This is the name of the field from which to fetch the data.
    ##               b. name       - This is the suffix to append to the metric_prefix
    ##                               in order to form the full metric name. If `type` is
    ##                               `tag`, this column will instead be considered a tag
    ##                               and will be applied to every metric collected by
    ##                               this particular query.
    ##               c. type       - This is the submission method (gauge, count, rate, etc.).
    ##                               This can also be set to `tag` to tag each metric in the row
    ##                               with the name and value of the item in this column. You can
    ##                               use the `count` type to perform aggregation for queries that
    ##                               return multiple rows with the same or no tags.
    ## 4. tags (optional) - A list of tags to apply to each metric.
    ## 5. count_type (optional) - For count queries only, this is the submission method (gauge, count, rate, etc.) of
    ##                            the count result. Ignored for non count queries.
    #
    # custom_queries:
    #   - metric_prefix: mongo.example1
    #     query: # Same object as the one used in Mongo db.runCommand(<QUERY>)
    #       aggregate: <COLLECTION_NAME>
    #       pipeline:
    #         - $match:
    #             <FIELD_NAME>: <FIELD_VALUE>
    #         - $group:
    #             _id: <FIELD_NAME>
    #       cursor: {} # Cursor is required for aggregate, can be an empty object
    #     fields:
    #       - field_name: <FIELD_NAME>
    #         name: <METRIC_SUFFIX>
    #         type: <gauge|count|rate|monotonic_count>
    #       - field_name: _id
    #         name: cluster_id
    #         type: tag
    #     tags:
    #       - test:mongodb
    #   - metric_prefix: mongo.example2
    #     query: # Same object as the one used in Mongo db.runCommand(<QUERY>)
    #         find: <COLLECTION_NAME>
    #         filter:
    #             qty:
    #               "$gt": 30
    #         sort:
    #             qty: -1
    #     fields:
    #       - field_name: status
    #         name: status_tag
    #         type: tag
    #       - field_name: qty
    #         name: qty
    #         type: gauge
    #     tags:
    #       - tag1:val1
    #       - tag2:val2
    #   - metric_prefix: mongo.example3
    #     query: # Same object as the one used in Mongo db.runCommand(<QUERY>)
    #       count: <COLLECTION_NAME>
    #       query:
    #         '1':
    #           "$type": 16
    #     count_type: gauge
    #     tags:
    #       - tag1:val1
    #       - tag2:val2

## Log Section (Available for Agent >=6.0)
##
## type - mandatory - Type of log input source (tcp / udp / file / windows_event)
## port / path / channel_path - mandatory - Set port if type is tcp or udp. Set path if type is file. Set channel_path if type is windows_event
## service - mandatory - Name of the service that generated the log
## source  - mandatory - Attribute that defines which Integration sent the logs
## sourcecategory - optional - Multiple value attribute. Used to refine the source attribute
## tags: - optional - Add tags to the collected logs
##
## Discover Datadog log collection: https://docs.datadoghq.com/logs/log_collection/
#
# logs:
#   - type: file
#     path: /var/log/mongodb/mongodb.log
#     service: mongo
#     source: mongodb
