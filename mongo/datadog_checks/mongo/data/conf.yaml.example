## All options defined here are available to all instances.
#
init_config:

    ## @param service - string - optional
    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.
    ##
    ## Additionally, this sets the default `service` for every log source.
    #
    # service: <SERVICE>

## Every instance is scheduled independently of the others.
#
instances:

    ## @param hosts - string or list of strings - optional
    ## The host (and optional port number) where the mongod instance (or mongos instances for
    ## a sharded cluster) is running. You can specify a hostname, IP address, or UNIX domain
    ## socket. Specify as many hosts as appropriate for your deployment topology:
    ##
    ##   - For a standalone, specify the hostname of the standalone mongod instance.
    ##   - For a replica set, specify the hostname of a mongod instance as listed in
    ##     the replica set configuration. You need one check instance per mongod instance
    ##     in order to collect replication metrics and events.
    ##   - For a sharded cluster, you need one check instance for each mongod instance in
    ##     each shard (including the configsvr shard) as well as one additional check instance
    ##     that connects to one (or more) mongos node.
    ##
    ## If the port number is not specified, the default port 27017 is used.
    ##
    ## Even if the host is an arbiter node, you still need to provide authentication credentials
    ## as the check will create an additional connection to the primary in this specific case.
    ##
    ## Do not specify more than one host here unless you are connecting to a mongos instance
    ## and you want to balance requests performed by the agent to multiple mongos instances.
    ##
    ## If you need to monitor multiple mongos instances and are using version 7.39 or later of the Agent, 
    ## configure the integration to disable directConnection, which is enabled by default starting in 4.0.2. 
    ## This can be done by setting options.directConnection to 'false'.
    #
  - hosts:
      - <HOST>:<PORT>

    ## @param username - string - optional
    ## The username to use for authentication.
    #
    # username: <USERNAME>

    ## @param password - string - optional
    ## The password to use for authentication.
    #
    # password: <PASSWORD>

    ## @param connection_scheme - string - optional - default: mongodb
    ## Use `mongodb` to identify that this is a string in the standard connection format. This is the default value.
    ## In order to leverage the DNS seed list, use a connection_scheme of `mongodb+srv` rather than the standard
    ## `mongodb`.
    ## For more information, see: https://www.mongodb.com/docs/manual/reference/connection-string/
    #
    # connection_scheme: mongodb

    ## @param database - string - optional
    ## The database to collect metrics from.
    ## This is also the authentication database to use if a `username` and `password` is set but the `authSource` is not
    ## specified in `options`. If `database` is not set and the `authSource` is not specified in `options`,
    ## the check will attempt to authenticate `username` to the admin database.
    #
    # database: <DATABASE>

    ## @param options - mapping - optional
    ## For a complete list of available connection options, see:
    ## https://docs.mongodb.com/manual/reference/connection-string/#connections-connection-options
    ##
    ## NOTE: For monitoring replica set, do not use the replicaSet parameter as the Agent expects to always
    ## connect to the same host. Instead configure one check instance for each node.
    #
    # options: {}

    ## @param dbnames - list of strings - optional
    ## Set a list of the names of all databases to collect dbstats metrics from.
    ## If this key does not exist, all dbstats metrics from all databases on the server will be collected.
    ##
    ##
    ## <<< DEPRECATED >>>
    ##
    ## Agent version: 7.56.0
    ## Migration: dbnames is deprecated. Set database_autodiscovery.enabled to true to enable database autodiscovery.
    ##            Use database_autodiscovery.include or database_autodiscovery.exclude to include or exclude
    ##            specific databases to collect metrics from.
    #
    # dbnames:
    #   - one_database
    #   - other_database

    ## Define the configuration for database autodiscovery.
    ## Complete this section if you want to auto-discover databases on this MongoDB instance.
    #
    # database_autodiscovery:

        ## @param enabled - boolean - optional - default: false
        ## Enable database autodiscovery.
        #
        # enabled: false

        ## @param max_databases - integer - optional - default: 100
        ## The maximum number of databases this host should monitor.
        #
        # max_databases: 100

        ## @param include - list of strings - optional - default: ['.*']
        ## Regular expression for database names to include as part of
        ## database autodiscovery.
        ## Will report metrics for databases that are found in this instance,
        ## ignores databases listed but not found.
        ## Character casing is ignored. The regular expressions start matching from
        ## the beginning, so to match anywhere, prepend `.*`. For exact matches append `$`.
        ## Defaults to `.*` to include everything.
        #
        # include:
        #   - mydatabase$
        #   - orders.*

        ## @param exclude - list of strings - optional - default: ['admin$', 'config$', 'local$']
        ## Regular expression for database names to exclude as part of `database_autodiscovery`.
        ## Character casing is ignored. The regular expressions start matching from the beginning,
        ## so to match anywhere, prepend `.*`. For exact matches append `$`.
        ## In case of conflicts, database exclusion via `exclude` takes precedence over
        ## those found via `include`
        #
        # exclude:
        #   - admin$
        #   - config$
        #   - local$

        ## @param refresh_interval - integer - optional - default: 600
        ## Frequency in seconds of scans for new databases. Defaults to 10 minutes.
        #
        # refresh_interval: 600

    ## @param dbm - boolean - optional - default: false
    ## Set to `true` enable Database Monitoring.
    ##
    ## NOTE: Database Monitoring for MongoDB is currently in private beta.
    ## If you are interested in participating, please reach out to your Datadog Customer Success Manager.
    #
    # dbm: false

    ## @param cluster_name - string - optional
    ## The name of the cluster to which the monitored MongoDB instance belongs.
    ## Used to group MongoDB instances in a MongoDB cluster.
    ## Please note that the cluster name must be unique for each MongoDB cluster.
    ##
    ## Required when `dbm` is enabled.
    #
    # cluster_name: <CLUSTER_NAME>

    ## @param reported_database_hostname - string - optional
    ## Set the reported database hostname for the connected mongodb instance. This value overrides the mongodb hostname 
    ## detected by the Agent from mongodb admin command serverStatus. It can be useful to set a custom hostname
    ## when connecting to a remote database through a proxy.
    #
    # reported_database_hostname: <REPORTED_DATABASE_HOSTNAME>

    ## Configure collection of MongoDB operation samples and explain plans.
    #
    # operation_samples:

        ## @param enabled - boolean - optional - default: true
        ## Enable collection of operation samples. Requires `dbm: true`.
        #
        # enabled: true

        ## @param collection_interval - number - optional - default: 10
        ## Set the operation samples collection interval in seconds. Each collection involves capturing
        ## current operations with $currentOp aggregation pipeline and explain plans for each operation.
        #
        # collection_interval: 10

    ## @param replica_check - boolean - optional - default: true
    ## Whether or not to read from available replicas.
    ## Disable this if any replicas are inaccessible to the Agent. This option is not supported for sharded clusters.
    #
    # replica_check: true

    ## @param timeout - integer - optional - default: 30
    ## Controls connectTimeoutMS, serverSelectionTimeoutMS and socketTimeoutMS
    ## see http://api.mongodb.com/python/3.4.0/api/pymongo/mongo_client.html
    #
    # timeout: 30

    ## @param tls - boolean - optional - default: false
    ## If `True`, create the connection to the server using transport layer security.
    #
    # tls: false

    ## @param tls_certificate_key_file - string - optional
    ## A file containing the client certificate and private key. Implies tls=True.
    #
    # tls_certificate_key_file: <TLS_CERTIFICATE_KEY_FILE>

    ## @param tls_ca_file - string - optional
    ## A file containing one or a bundle of “certification authority” certificates, 
    ## which are used to validate certificates passed from the other end of the connection. 
    ## Implies tls=True.
    #
    # tls_ca_file: <TLS_CA_FILE>

    ## @param tls_allow_invalid_hostnames - boolean - optional - default: false
    ## If `True`, disables TLS hostname verification. tls_allow_invalid_hostnames=False implies tls=True. 
    ## Think very carefully before setting this to True as that could make your application 
    ## vulnerable to on-path attackers.
    #
    # tls_allow_invalid_hostnames: false

    ## @param tls_allow_invalid_certificates - boolean - optional - default: false
    ## If `True`, continues the TLS handshake regardless of the outcome of the certificate verification process. 
    ## Think very carefully before setting this to True as that could make your application 
    ## vulnerable to on-path attackers.
    #
    # tls_allow_invalid_certificates: false

    ## @param dbstats_tag_dbname - boolean - optional - default: true
    ## Whether or not to include the 'dbname' as a tag for dbstat metrics
    #
    # dbstats_tag_dbname: true

    ## @param additional_metrics - list of strings - optional
    ## By default, the check collects a sample of metrics from MongoDB.
    ## This  parameter instructs the check to collect additional metrics on specific topics.
    ## Available options are:
    ##   * `metrics.commands` - Use of database commands
    ##   * `tcmalloc` -  TCMalloc memory allocator
    ##   * `top` - Usage statistics for each collection
    ##   * `collection` - Metrics of the specified collections
    ##   * `jumbo_chunks` - Count and percentage of jumbo chunks. Ignored on mongod instances.
    #
    # additional_metrics:
    #   - metrics.commands
    #   - tcmalloc
    #   - top
    #   - collection
    #   - jumbo_chunks

    ## @param collections - list of strings - optional
    ## Collect metrics on specific collections from the database specified
    ## IT Requires `additional_metrics.collection` to be present.
    ## Metrics such as `mongodb.collection.count` are collected for each named collection and tagged as follows:
    ##  * `db:<DB_NAME>` e.g. `db:<DB_NAME>`
    ##  * `collection:<COLLECTION_NAME>` e.g. `collection:<COLLECTION_NAME>`
    ## Each collection generates many metrics, up to 8 + the number of indices on the collection for each collection.
    ##
    ## NOTE: This option is ignored when database_autodiscovery is enabled. 
    ## Metrics are collected for all authorized collections on autodiscovered databases.
    #
    # collections:
    #   - <COLLECTION_NAME>

    ## @param collections_indexes_stats - boolean - optional - default: false
    ## Collect indexes access metrics for every index in every collections in
    ## the 'collections' list. This is available starting MongoDB 3.2.
    #
    # collections_indexes_stats: false

    ## @param custom_queries - list of mappings - optional
    ## Define custom queries to collect custom metrics on your Mongo
    ## Note: Custom queries are ignored by default when the mongo node is a secondary of a replica set.
    ## You can add `run_on_secondary: true` for each query that you want to run on both primaries and secondaries.
    ## See https://docs.datadoghq.com/integrations/guide/mongo-custom-query-collection to learn more.
    ## Note: For MongoDB date types you can use functions matching any of these regular expressions:
    ## "ISODate\(\s*\'(.*?)\'\s*\)" (e.g. "ISODate('2022-12-15T08:26:00.969Z')")
    ## "ISODate\(\s*\)|Date\(\s*\)" (e.g. "Date()")
    ## "new\s*Date\(ISODate\(\s*\)\.getTime\(\s*\)((\s*[+\-*\/]\s*(\d+))*)\s*\)" 
    ##   (e.g. "new Date(ISODate().getTime() - 60 * 1000)")
    #
    # custom_queries:
    #   - metric_prefix: mongo
    #     query: <MONGO_COMMAND_QUERY>
    #     database: <MONGO_DATABASE>
    #     fields:
    #     - field_name: <FIELD_NAME>
    #       name: <METRIC_SUFFIX>
    #       type: <METRIC_TYPE>
    #     tags:
    #     - test:mongodb

    ## @param server - string - optional
    ## Specify the MongoDB URI, with database to use for reporting (defaults to "admin")
    ## E.g. mongodb://datadog:LnCbkX4uhpuLHSUrcayEoAZA@localhost:27016/admin
    ##
    ##
    ## <<< DEPRECATED >>>
    ##
    ## Agent version: 8.0.0
    ## Migration: Use the following options instead:
    ##            hosts, username, password, database, options
    #
    # server: mongodb://<USER>:<PASSWORD>@<HOST>:<PORT>/<DB_NAME>

    ## @param tags - list of strings - optional
    ## A list of tags to attach to every metric and service check emitted by this instance.
    ##
    ## Learn more about tagging at https://docs.datadoghq.com/tagging
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param service - string - optional
    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.
    ##
    ## Overrides any `service` defined in the `init_config` section.
    #
    # service: <SERVICE>

    ## @param min_collection_interval - number - optional - default: 15
    ## This changes the collection interval of the check. For more information, see:
    ## https://docs.datadoghq.com/developers/write_agent_check/#collection-interval
    #
    # min_collection_interval: 15

    ## @param empty_default_hostname - boolean - optional - default: false
    ## This forces the check to send metrics with no hostname.
    ##
    ## This is useful for cluster-level checks.
    #
    # empty_default_hostname: false

    ## @param metric_patterns - mapping - optional
    ## A mapping of metrics to include or exclude, with each entry being a regular expression.
    ##
    ## Metrics defined in `exclude` will take precedence in case of overlap.
    #
    # metric_patterns:
    #   include:
    #   - <INCLUDE_REGEX>
    #   exclude:
    #   - <EXCLUDE_REGEX>

## Log Section
##
## type - required - Type of log input source (tcp / udp / file / windows_event).
## port / path / channel_path - required - Set port if type is tcp or udp.
##                                         Set path if type is file.
##                                         Set channel_path if type is windows_event.
## source  - required - Attribute that defines which integration sent the logs.
## encoding - optional - For file specifies the file encoding. Default is utf-8. Other
##                       possible values are utf-16-le and utf-16-be.
## service - optional - The name of the service that generates the log.
##                      Overrides any `service` defined in the `init_config` section.
## tags - optional - Add tags to the collected logs.
##
## Discover Datadog log collection: https://docs.datadoghq.com/logs/log_collection/
#
# logs:
#   - type: file
#     path: /var/log/mongodb/mongodb.log
#     source: mongo
#     service: <SERVICE>
