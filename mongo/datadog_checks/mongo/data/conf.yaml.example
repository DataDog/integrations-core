## All options defined here are available to all instances.
#
init_config:

    ## @param service - string - optional
    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.
    ##
    ## Additionally, this sets the default `service` for every log source.
    #
    # service: <SERVICE>

## Every instance is scheduled independent of the others.
#
instances:

    ## @param server - string - required
    ## Specify the MongoDB URI, with database to use for reporting (defaults to "admin")
    ## E.g. mongodb://datadog:LnCbkX4uhpuLHSUrcayEoAZA@localhost:27016/admin
    #
  - server: mongodb://<USER>:<PASSWORD>@<HOST>:<PORT>/<DB_NAME>

    ## @param replica_check - boolean - optional - default: true
    ## Whether or not to read from available replicas.
    ## Disable this if any replicas are inaccessible to the agent.
    #
    # replica_check: true

    ## @param timeout - integer - optional - default: 30
    ## Controls connectTimeoutMS, serverSelectionTimeoutMS and socketTimeoutMS
    ## see http://api.mongodb.com/python/3.4.0/api/pymongo/mongo_client.html
    #
    # timeout: 30

    ## @param ssl - boolean - optional - default: false
    ## If `True`, create the connection to the server using SSL.
    #
    # ssl: false

    ## @param ssl_keyfile - string - optional
    ## Path to the private key file used to identify the local connection against Mongodb.
    #
    # ssl_keyfile: <SSL_KEYFILE>

    ## @param ssl_certfile - string - optional
    ## Path to the certificate file used to identify the local connection against Mongodb.
    #
    # ssl_certfile: <SSL_CERTFILE>

    ## @param ssl_cert_reqs - integer - optional
    ## Specifies whether a certificate is required from the other side of the connection, and whether it will be
    ## validated if provided.
    ## Possible values:
    ##   * 0 for ssl.CERT_NONE (certificates ignored)
    ##   * 1 for ssl.CERT_OPTIONAL (not required, but validated if provided)
    ##   * 2 for ssl.CERT_REQUIRED (required and validated)
    #
    # ssl_cert_reqs: <SSL_CERT_REQS>

    ## @param ssl_ca_certs - string - optional
    ## Path to the ca_certs file.
    #
    # ssl_ca_certs: <SSL_CA_CERTS>

    ## @param additional_metrics - list of strings - optional
    ## By default, the check collects a sample of metrics from MongoDB.
    ## This  parameter instructs the check to collect additional metrics on specific topics.
    ## Available options are:
    ##   * `metrics.commands` - Use of database commands
    ##   * `tcmalloc` -  TCMalloc memory allocator
    ##   * `top` - Usage statistics for each collection
    ##   * `collection` - Metrics of the specified collections
    #
    # additional_metrics:
    #   - metrics.commands
    #   - tcmalloc
    #   - top
    #   - collection

    ## @param collections - list of strings - optional
    ## Collect metrics on specific collections from the database specified
    ## IT Requires `additional_metrics.collection` to be present.
    ## Metrics such as `mongodb.collection.count` are collected for each named collection and tagged as follows:
    ##  * `db:<DB_NAME>` e.g. `db:<DB_NAME>`
    ##  * `collection:<COLLECTION_NAME>` e.g. `collection:<COLLECTION_NAME>`
    ## Each collection generates many metrics, up to 8 + the number of indices on the collection for each collection.
    #
    # collections:
    #   - <COLLECTION_NAME>

    ## @param collections_indexes_stats - boolean - optional - default: false
    ## Collect indexes access metrics for every index in every collections in
    ## the 'collections' list. This is available starting MongoDB 3.2.
    #
    # collections_indexes_stats: false

    ## @param custom_queries - list of mappings - optional
    ## Define custom queries to collect custom metrics on your Mongo
    ## See https://docs.datadoghq.com/integrations/guide/mongo-custom-query-collection to learn more.
    #
    # custom_queries:
    #   - metric_prefix: mongo
    #     query: <MONGO_COMMAND_QUERY>
    #     fields:
    #     - field_name: <FIELD_NAME>
    #       name: <METRIC_SUFFIX>
    #       type: <METRIC_TYPE>
    #     tags:
    #     - test:mongodb

    ## @param tags - list of strings - optional
    ## A list of tags to attach to every metric and service check emitted by this instance.
    ##
    ## Learn more about tagging at https://docs.datadoghq.com/tagging
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param service - string - optional
    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.
    ##
    ## Overrides any `service` defined in the `init_config` section.
    #
    # service: <SERVICE>

    ## @param min_collection_interval - number - optional - default: 15
    ## This changes the collection interval of the check. For more information, see:
    ## https://docs.datadoghq.com/developers/write_agent_check/#collection-interval
    #
    # min_collection_interval: 15

    ## @param empty_default_hostname - boolean - optional - default: false
    ## This forces the check to send metrics with no hostname.
    ##
    ## This is useful for cluster-level checks.
    #
    # empty_default_hostname: false

## Log Section
##
## type - required - Type of log input source (tcp / udp / file / windows_event)
## port / path / channel_path - required - Set port if type is tcp or udp.
##                                         Set path if type is file.
##                                         Set channel_path if type is windows_event.
## source  - required - Attribute that defines which Integration sent the logs
## service - required - The name of the service that generates the log.
##                      Overrides any `service` defined in the `init_config` section.
## tags - optional - Add tags to the collected logs
##
## Discover Datadog log collection: https://docs.datadoghq.com/logs/log_collection/
#
# logs:
#   - type: file
#     path: /var/log/mongodb/mongodb.log
#     source: mongo
#     service: <SERVICE>
