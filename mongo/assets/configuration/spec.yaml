name: MongoDB
files:
- name: mongo.yaml
  options:
  - template: init_config
    options:
    - template: init_config/default
  - template: instances
    options:
    - name: hosts
      enabled: true
      description: |
        The host (and optional port number) where the mongod instance (or mongos instances for
        a sharded cluster) is running. You can specify a hostname, IP address, or UNIX domain
        socket. Specify as many hosts as appropriate for your deployment topology:

          - For a standalone, specify the hostname of the standalone mongod instance.
          - For a replica set, specify the hostname of a mongod instance as listed in
            the replica set configuration. You need one check instance per mongod instance
            in order to collect replication metrics and events.
          - For a sharded cluster, you need one check instance for each mongod instance in
            each shard (including the configsvr shard) as well as one additional check instance
            that connects to one (or more) mongos node.

        If the port number is not specified, the default port 27017 is used.

        Even if the host is an arbiter node, you still need to provide authentication credentials
        as the check will create an additional connection to the primary in this specific case.

        Do not specify more than one host here unless you are connecting to a mongos instance
        and you want to balance requests performed by the agent to multiple mongos instances.
      value:
        example:
        - <HOST>:<PORT>
        anyOf:
          - type: string
          - type: array
            items:
              type: string
    - name: username
      description: |
        The username to use for authentication.
      value:
        type: string
    - name: password
      description: |
        The password to use for authentication.
      value:
        type: string
    - name: connection_scheme
      description: |
        Use `mongodb` to identify that this is a string in the standard connection format. This is the default value.
        In order to leverage the DNS seed list, use a connection_scheme of `mongodb+srv` rather than the standard
        `mongodb`.
        For more information, see: https://www.mongodb.com/docs/manual/reference/connection-string/
      value:
        type: string
        example: mongodb
    - name: database
      description: |
        The database to collect metrics from.
        This is also the authentication database to use if a `username` and `password` is set but the `authSource` is not
        specified in `options`. If `database` is not set and the `authSource` is not specified in `options`,
        the check will attempt to authenticate `username` to the admin database.
      value:
        type: string
    - name: options
      description: |
        For a complete list of available connection options, see:
        https://docs.mongodb.com/manual/reference/connection-string/#connections-connection-options

        NOTE: For monitoring replica set, do not use the replSet parameter as the Agent expects to always
        connect to the same host. Instead configure one check instance for each node.
      value:
        type: object
        properties: []
    - name: dbnames
      description: |
        Set a list of the names of all databases to collect metrics from.
        If this key does not exist, all metrics from all databases on the server will be collected.
      value:
        type: array
        items:
          type: string
        example:
          [ one_database, other_database ]
    - name: replica_check
      description: |
        Whether or not to read from available replicas.
        Disable this if any replicas are inaccessible to the Agent. This option is not supported for sharded clusters.
      value:
        type: boolean
        example: true
    - name: timeout
      description: |
        Controls connectTimeoutMS, serverSelectionTimeoutMS and socketTimeoutMS
        see http://api.mongodb.com/python/3.4.0/api/pymongo/mongo_client.html
      value:
        type: integer
        example: 30
    - name: tls
      description: If `True`, create the connection to the server using transport layer security.
      value:
        type: boolean
        example: false
    - name: tls_certificate_key_file
      description: A file containing the client certificate and private key. Implies tls=True.
      value:
        type: string
    - name: tls_ca_file
      description: |
        A file containing one or a bundle of “certification authority” certificates, 
        which are used to validate certificates passed from the other end of the connection. 
        Implies tls=True.
      value:
        type: string
    - name: tls_allow_invalid_hostnames
      description: |
        If `True`, disables TLS hostname verification. tls_allow_invalid_hostnames=False implies tls=True. 
        Think very carefully before setting this to True as that could make your application 
        vulnerable to on-path attackers.
      value:
        type: boolean
        example: false
    - name: tls_allow_invalid_certificates
      description: |
        If `True`, continues the TLS handshake regardless of the outcome of the certificate verification process. 
        Think very carefully before setting this to True as that could make your application 
        vulnerable to on-path attackers.
      value:
        type: boolean
        example: false
    - name: additional_metrics
      description: |
        By default, the check collects a sample of metrics from MongoDB.
        This  parameter instructs the check to collect additional metrics on specific topics.
        Available options are:
          * `metrics.commands` - Use of database commands
          * `tcmalloc` -  TCMalloc memory allocator
          * `top` - Usage statistics for each collection
          * `collection` - Metrics of the specified collections
          * `jumbo_chunks` - Count and percentage of jumbo chunks. Ignored on mongod instances.
      value:
        type: array
        items:
          type: string
        example:
          [metrics.commands, tcmalloc, top, collection, jumbo_chunks]
    - name: collections
      description: |
        Collect metrics on specific collections from the database specified
        IT Requires `additional_metrics.collection` to be present.
        Metrics such as `mongodb.collection.count` are collected for each named collection and tagged as follows:
         * `db:<DB_NAME>` e.g. `db:<DB_NAME>`
         * `collection:<COLLECTION_NAME>` e.g. `collection:<COLLECTION_NAME>`
        Each collection generates many metrics, up to 8 + the number of indices on the collection for each collection.
      value:
        type: array
        items:
          type: string
        example:
          - <COLLECTION_NAME>
    - name: collections_indexes_stats
      description: |
        Collect indexes access metrics for every index in every collections in
        the 'collections' list. This is available starting MongoDB 3.2.
      value:
        type: boolean
        example: false
    - name: custom_queries
      description: |
        Define custom queries to collect custom metrics on your Mongo
        Note: Custom queries are ignored by default when the mongo node is a secondary of a replica set.
        You can add `run_on_secondary: true` for each query that you want to run on both primaries and secondaries.
        See https://docs.datadoghq.com/integrations/guide/mongo-custom-query-collection to learn more.
        Note: For MongoDB date types you can use functions matching any of these regular expressions:
        "ISODate\(\s*\'(.*?)\'\s*\)" (e.g. "ISODate('2022-12-15T08:26:00.969Z')")
        "ISODate\(\s*\)|Date\(\s*\)" (e.g. "Date()")
        "new\s*Date\(ISODate\(\s*\)\.getTime\(\s*\)((\s*[+\-*\/]\s*(\d+))*)\s*\)" 
          (e.g. "new Date(ISODate().getTime() - 60 * 1000)")
      value:
        type: array
        items:
          type: object
          properties:
            - name: metric_prefix
              type: string
            - name: database
              type: string
            - name: query
              type: object
            - name: fields
              type: array
              items:
                type: object
                properties:
                  - name: field_name
                    type: string
                  - name: name
                    type: string
                  - name: type
                    type: string
            - name: tags
              type: array
              items:
                type: string
        example:
          - metric_prefix: mongo
            query: <MONGO_COMMAND_QUERY>
            database: <MONGO_DATABASE>
            fields:
              - field_name: <FIELD_NAME>
                name: <METRIC_SUFFIX>
                type: <METRIC_TYPE>
            tags:
              - test:mongodb
    - name: server
      deprecation:
        Agent version: "8.0.0"
        Migration: |
          Use the following options instead:
          hosts, username, password, database, options
      description: |
        Specify the MongoDB URI, with database to use for reporting (defaults to "admin")
        E.g. mongodb://datadog:LnCbkX4uhpuLHSUrcayEoAZA@localhost:27016/admin
      value:
        example: mongodb://<USER>:<PASSWORD>@<HOST>:<PORT>/<DB_NAME>
        display_default: null
        type: string
    - template: instances/default
  - template: logs
    example:
    - type: file
      path: /var/log/mongodb/mongodb.log
      source: mongo
      service: <SERVICE>