id: singlestore
metric_id: singlestore
backend_only: false
facets:
pipeline:
  type: pipeline
  name: SingleStore
  enabled: true
  filter:
    query: source:singlestore
  processors:
    - type: grok-parser
      name: Parsing SingleStore logs
      enabled: true
      source: message
      samples:
        - "2021-09-13 09:25:04.266   INFO: Query information_schema.'SELECT WITH(binary_serialization=1, binary_serialization_internal=1) `remote_0`.`NODE_ID` AS `NODE_ID`, `remote_0`.`INTERFACE` AS `INTERFACE`, `remote_0`.`RECEIVED_CUMULATIVE_B` AS `RECEIVED_CUMULATIVE_B`, `remote_0`.`TRANSMITTED_CUMULATIVE_B` AS `TRANSMITTED_CUMULATIVE_B` FROM `_MV_SYSINFO_NET` as `remote_0`  /*!90623 OPTION(NO_QUERY_REWRITE=1, INTERPRETER_MODE=INTERPRET_FIRST)*/' submitted 222 milliseconds ago, queued for 16 milliseconds, compiled asynchronously in 206 milliseconds"
        - '2021-09-13 12:15:02.159   INFO: Found 8 incomplete .ver files (generated by an old server version). These are treated as stale plans.'
        - '12345678 2021-09-12 12:25:13.538  ERROR: `main_1` log: Disconnecting slave at node 5 because of connection error.'
        - '2021-09-12 12:25:13.500   INFO: Thread 114994: AddInstance: Adding new partition instance (partition main:2, instance id 11, site id 1) on node [5] node-memsql-cluster-leaf-ag2-0.svc-memsql-cluster:3306 on site 1.  It is a master, database replication type: sync, slave state: async, term 32, and is online.'
        - '2021-09-13 12:55:07.664   WARN: socket (107) ETIMEDOUT in recv'
      grok:
        supportRules: |
          _date %{date("yyyy-MM-dd HH:mm:ss.SSS"):date}
        matchRules: |
          query (%{number}\s+)?%{_date}\s+%{word:level}:\s+Query %{word:db.database}\.'%{data:db.statement}' submitted (%{number:duration:scale(1000000)} milliseconds|%{number:duration:scale(1000000000)} seconds).* queued for (%{number:db.time_in_queue:scale(1000000)} milliseconds|%{number:db.time_in_queue:scale(1000000000)} seconds), compiled[\w ]*? in (%{number:db.compilation_time:scale(1000000)} milliseconds|%{number:db.compilation_time:scale(1000000000)} seconds).*
          thread_id (%{number}\s+)?%{_date}\s+%{word:level}:\s+Thread %{notSpace:thread_id}:\s+%{data:message}
          catch_all (%{number}\s+)?%{_date}\s+%{word:level}:\s+%{data:message}
    - type: status-remapper
      name: Define `level` as the official status of the log
      enabled: true
      sources:
        - level
    - type: date-remapper
      name: Define `date` as the official date of the log
      enabled: true
      sources:
        - date
    - type: message-remapper
      name: Define `message` as the official message of the log
      enabled: true
      sources:
        - message
