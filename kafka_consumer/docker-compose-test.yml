version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: kafka-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'srvr' | nc localhost 2181 | grep -q 'Mode:'"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka-broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9999:9999"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_NUM_PARTITIONS: 3
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: kafka-schema-registry
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka initialization - creates topics and registers schemas
  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    command: >
      bash -c "
        echo '=== Kafka Initialization Starting ==='
        
        echo 'Creating topics...'
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic orders
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 5 --replication-factor 1 --topic users
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 2 --replication-factor 1 --topic events
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic payments
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 10 --replication-factor 1 --topic analytics
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 4 --replication-factor 1 --topic notifications
        
        echo 'Registering schemas in Schema Registry...'
        
        # Register User schema
        curl -X POST -H Content-Type:application/vnd.schemaregistry.v1+json --data '{\"schema\":\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"User\\\",\\\"fields\\\":[{\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"int\\\"},{\\\"name\\\":\\\"username\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"email\\\",\\\"type\\\":\\\"string\\\"}]}\"}' http://schema-registry:8081/subjects/users-value/versions
        
        # Register Order schema
        curl -X POST -H Content-Type:application/vnd.schemaregistry.v1+json --data '{\"schema\":\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"Order\\\",\\\"fields\\\":[{\\\"name\\\":\\\"order_id\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"user_id\\\",\\\"type\\\":\\\"int\\\"},{\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"double\\\"},{\\\"name\\\":\\\"timestamp\\\",\\\"type\\\":\\\"long\\\"}]}\"}' http://schema-registry:8081/subjects/orders-value/versions
        
        # Register Payment schema
        curl -X POST -H Content-Type:application/vnd.schemaregistry.v1+json --data '{\"schema\":\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"Payment\\\",\\\"fields\\\":[{\\\"name\\\":\\\"payment_id\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"order_id\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"double\\\"},{\\\"name\\\":\\\"status\\\",\\\"type\\\":\\\"string\\\"}]}\"}' http://schema-registry:8081/subjects/payments-value/versions
        
        # Register Event schema
        curl -X POST -H Content-Type:application/vnd.schemaregistry.v1+json --data '{\"schema\":\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"Event\\\",\\\"fields\\\":[{\\\"name\\\":\\\"event_id\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"event_type\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"user_id\\\",\\\"type\\\":[\\\"null\\\",\\\"int\\\"]},{\\\"name\\\":\\\"timestamp\\\",\\\"type\\\":\\\"long\\\"}]}\"}' http://schema-registry:8081/subjects/events-value/versions
        
        # Register Notification schema
        curl -X POST -H Content-Type:application/vnd.schemaregistry.v1+json --data '{\"schema\":\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"Notification\\\",\\\"fields\\\":[{\\\"name\\\":\\\"notification_id\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"user_id\\\",\\\"type\\\":\\\"int\\\"},{\\\"name\\\":\\\"message\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"sent_at\\\",\\\"type\\\":\\\"long\\\"}]}\"}' http://schema-registry:8081/subjects/notifications-value/versions
        
        echo '=== Kafka Initialization Complete! ==='
      "
  
  # Continuous producer - sends messages to multiple topics
  kafka-producer:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-producer
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    command: >
      bash -c "
        echo '=== Starting Kafka Producer ==='
        while true; do
          # Produce to orders topic
          for i in {1..10}; do
            echo \"{\\\"order_id\\\":\\\"\$$RANDOM\\\",\\\"user_id\\\":\$$((RANDOM % 100)),\\\"amount\\\":\$$((RANDOM % 1000)).\$$((RANDOM % 100)),\\\"timestamp\\\":\$$(date +%s)}\" | \
            kafka-console-producer --bootstrap-server kafka:29092 --topic orders 2>/dev/null
          done
          
          # Produce to users topic
          for i in {1..5}; do
            echo \"{\\\"id\\\":\$$((RANDOM % 1000)),\\\"username\\\":\\\"user\$$RANDOM\\\",\\\"email\\\":\\\"user\$$RANDOM@example.com\\\"}\" | \
            kafka-console-producer --bootstrap-server kafka:29092 --topic users 2>/dev/null
          done
          
          # Produce to events topic
          for i in {1..20}; do
            echo \"{\\\"event_id\\\":\\\"\$$RANDOM\\\",\\\"event_type\\\":\\\"click\\\",\\\"user_id\\\":\$$((RANDOM % 100)),\\\"timestamp\\\":\$$(date +%s)}\" | \
            kafka-console-producer --bootstrap-server kafka:29092 --topic events 2>/dev/null
          done
          
          # Produce to payments topic
          for i in {1..3}; do
            echo \"{\\\"payment_id\\\":\\\"\$$RANDOM\\\",\\\"order_id\\\":\\\"\$$RANDOM\\\",\\\"amount\\\":\$$((RANDOM % 500)).\$$((RANDOM % 100)),\\\"status\\\":\\\"completed\\\"}\" | \
            kafka-console-producer --bootstrap-server kafka:29092 --topic payments 2>/dev/null
          done
          
          # Produce to analytics topic
          for i in {1..50}; do
            echo \"analytics-event-\$$RANDOM-\$$(date +%s)\" | \
            kafka-console-producer --bootstrap-server kafka:29092 --topic analytics 2>/dev/null
          done
          
          # Produce to notifications topic
          for i in {1..8}; do
            echo \"{\\\"notification_id\\\":\\\"\$$RANDOM\\\",\\\"user_id\\\":\$$((RANDOM % 100)),\\\"message\\\":\\\"You have a new message\\\",\\\"sent_at\\\":\$$(date +%s)}\" | \
            kafka-console-producer --bootstrap-server kafka:29092 --topic notifications 2>/dev/null
          done
          
          echo \"[Producer] Produced batch at \$$(date)\"
          sleep 10
        done
      "
  
  # Consumer group 1 - Order processors
  kafka-consumer-orders:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-consumer-orders
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    command: >
      bash -c "
        echo '=== Starting Order Processor Consumer ==='
        sleep 5
        kafka-console-consumer --bootstrap-server kafka:29092 --topic orders --group order-processors --from-beginning 2>&1 | \
        while read line; do echo \"[OrderProcessor] \$$line\"; sleep 0.5; done
      "
  
  # Consumer group 2 - User service
  kafka-consumer-users:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-consumer-users
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    command: >
      bash -c "
        echo '=== Starting User Service Consumer ==='
        sleep 7
        kafka-console-consumer --bootstrap-server kafka:29092 --topic users --group user-service --from-beginning 2>&1 | \
        while read line; do echo \"[UserService] \$$line\"; sleep 1; done
      "
  
  # Consumer group 3 - Analytics service (slow consumer - creates lag)
  kafka-consumer-analytics:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-consumer-analytics
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    command: >
      bash -c "
        echo '=== Starting Analytics Service Consumer (slow) ==='
        sleep 10
        kafka-console-consumer --bootstrap-server kafka:29092 --topic events --group analytics-service --from-beginning 2>&1 | \
        while read line; do echo \"[AnalyticsService] \$$line\"; sleep 2; done
      "
  
  # Consumer group 4 - Multi-topic consumer
  kafka-consumer-multi:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-consumer-multi
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    command: >
      bash -c "
        echo '=== Starting Multi-Topic Consumer ==='
        sleep 12
        kafka-console-consumer --bootstrap-server kafka:29092 --whitelist 'orders|payments|notifications' --group multi-topic-consumer --from-beginning 2>&1 | \
        while read line; do echo \"[MultiTopicConsumer] \$$line\"; sleep 0.3; done
      "
  
  # Consumer group 5 - Reporting service (events topic)
  kafka-consumer-reporting:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-consumer-reporting
    depends_on:
      kafka-init:
        condition: service_completed_successfully
    command: >
      bash -c "
        echo '=== Starting Reporting Service Consumer ==='
        sleep 15
        kafka-console-consumer --bootstrap-server kafka:29092 --topic events --group reporting-service --from-beginning 2>&1 | \
        while read line; do echo \"[ReportingService] \$$line\"; sleep 1.5; done
      "

  # Datadog Agent with kafka_consumer integration
  datadog-agent:
    image: gcr.io/datadoghq/agent:7
    container_name: datadog-agent
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_SITE=datadoghq.com
      - DD_HOSTNAME=kafka-test-agent
      - DD_LOGS_ENABLED=false
      - DD_AC_EXCLUDE=name:datadog-agent
    volumes:
      # Mount the kafka_consumer configuration
      - ./conf.yaml:/etc/datadog-agent/conf.d/kafka_consumer.d/conf.yaml:ro
      # Mount the development version of the integration
      - ./datadog_checks/kafka_consumer:/opt/datadog-agent/embedded/lib/python3.12/site-packages/datadog_checks/kafka_consumer:ro
    ports:
      - "8126:8126"
    healthcheck:
      test: ["CMD", "agent", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  default:
    name: kafka-network
    external: true

