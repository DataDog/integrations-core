init_config:
    ## @param proxy - object - optional
    ## Set HTTP or HTTPS proxies for all instances. Use the `no_proxy` list
    ## to specify hosts that must bypass proxies.
    ##
    ## The SOCKS protocol is also supported:
    ##
    ## socks5://user:pass@host:port
    ##
    ## Using the scheme `socks5` causes the DNS resolution to happen on the
    ## client, rather than on the proxy server. This is in line with `curl`,
    ## which uses the scheme to decide whether to do the DNS resolution on
    ## the client or proxy. If you want to resolve the domains on the proxy
    ## server, use `socks5h` as the scheme.
    #
    # proxy:
    #   http: http://<PROXY_SERVER_FOR_HTTP>:<PORT>
    #   https: https://<PROXY_SERVER_FOR_HTTPS>:<PORT>
    #   no_proxy:
    #     - <HOSTNAME_1>
    #     - <HOSTNAME_2>

    ## @param skip_proxy - boolean - optional - default: false
    ## If set to `true`, this makes the check bypass any proxy
    ## settings enabled and attempt to reach services directly.
    #
    # skip_proxy: false

instances:

    ## @param name - string - required
    ## Name of your Http check instance
    ## To create multiple http checks, create multiple http check instances
    #
  - name: My first service

    ## @param url - string - required
    ## Url to check
    ## Non-standard ports are supported using http://hostname:port syntax
    #
    url: http://some.url.example.com

    ## @param method - string - optional - default: get
    ## The method parameter allows you to change the HTTP method used in the request.
    #
    # method: get

    ## @param data - list of key:value elements - optional
    ## If any one of the POST, PUT, DELETE, or PATCH method is specified, you can choose to send data in the body of the
    ## request with the data parameter.
    ## SOAP requests are supported if you use the POST method and supply an XML string as the data parameter.
    #
    # data:
    #   <KEY>: <VALUE>

    ## @param content_match - string - optional
    ## The content_match parameter allows the check
    ## to look for a particular string within the response. The check
    ## will report as DOWN if the string is not found.
    ##
    ## content_match uses Python regular expressions which means that
    ## you will have to escape the following "special" characters with
    ## a backslash (\) if you're trying to match them in your content:
    ##  . ^ $ * + ? { } [ ] \ | ( )
    ##
    ## Examples:
    ## content_match: 'In Stock'
    ## content_match: '^(Bread|Apples|Very small rocks|Cider|Gravy|Cherries|Mud|Churches|Lead) float(s)? in water'
    #
    # content_match: '<REGEX>''

    ## @param reverse_content_match - boolean - optional - default: false
    ## The reverse_content_match parameter will allow the content_match
    ## to work the other way around. That means that the check will report
    ## as DOWN if the string is found.
    #
    # reverse_content_match: false

    ## @param http_response_status_code - integer - optional - default: (1|2|3)\d\d
    ## The http_response_status_code parameter will instruct the check
    ## to look for a particular HTTP response status code or a Regex identifying
    ## a set of possible status codes.
    ## The check will report as DOWN if status code returned differs.
    ## This defaults to 1xx, 2xx and 3xx HTTP status code.
    #
    # http_response_status_code: (1|2|3)\d\d

    ## @param include_content - boolean - optional - default: false
    ## The include_content parameter will instruct the check
    ## to include the first 200 characters of the HTTP response body
    ## in notifications sent by this plugin. This is best used with
    ## "healthcheck"-type URLs, where the body contains a brief, human-
    ## readable summary of failure reasons in the case of errors.
    #
    # include_content: false

    ## @param collect_response_time - boolean - optional - default: true
    ## Set collect_response_time parameter to true to instruct the check to
    ## create a metric 'network.http.response_time', tagged with
    ## the url, reporting the response time in seconds.
    #
    # collect_response_time: true

    ## @param check_certificate_expiration - boolean - optional
    ## The check_certificate_expiration will instruct the check
    ## to create a service check that checks the expiration of the
    ## ssl certificate. Allow for a warning to occur when x days are
    ## left in the certificate, and alternatively raise a critical
    ## warning if the certificate is y days from the expiration date.
    ##
    ## When "days" doesn't provide enough granularity (e.g. when a certificate is
    ## expected to expire in less than 24h) "seconds" can be used. Please note
    ## that configuration parameters expressed in seconds take precedence over
    ## the corresponding ones expressed in days.
    ##
    ## The SSL certificate will always be validated for this additional
    ## service check regardless of the value of disable_ssl_validation.
    ## By default, for the expiration check, the Agent validates the SSL certificate
    ## hostname against the host of the provided url.
    #
    # check_certificate_expiration: true

    ## @param days_warning - integer - optional
    ## Express warning threshold for the HTTP check in days
    #
    # days_warning: <THRESHOLD_DAYS>

    ## @param days_critical - integer - optional
    ## Express critical threshold for the HTTP check in days
    #
    # days_critical: <THRESHOLD_DAYS>

    ## @param seconds_warning - integer - optional
    ## Alternatively to days_warning, seconds_warning expresses
    ## the warning threshold for the HTTP check in second
    #
    # seconds_warning: <THRESHOLD_SECONDS>

    ## @param seconds_critical - integer - optional
    ## Alternatively to days_critical, seconds_critical expresses
    ## the critical threshold for the HTTP check in second
    #
    # seconds_critical: <THRESHOLD_SECONDS>

    ## @param check_hostname - boolean - optional - default: true
    ## Set check_hostname to false to disable the verification check for matching hostnames.
    #
    # check_hostname: true

    ## @param ssl_server_name - string - optional
    ## If necessary and check_hostname is set to true,
    ## override the hostname to match with ssl_server_name.
    #
    # ssl_server_name: <HOSTNAME>

    ## @param allow_redirects - boolean - optional - default: true
    ## The allow_redirects parameter can enable redirection for the
    ## HTTP check.
    #
    # allow_redirects: true

    ## @param stream - boolean - optional - default: false
    ## The stream parameter can be used to check the status code and/or
    ## response time of URLs that return an endless stream of data.
    #
    # stream: false

    ## @param include_default_headers - boolean - optional - default: true
    ## The (optional) include_default_headers parameter instructs the check to include the default headers.
    ## Default headers can be found at:
    ## https://github.com/DataDog/integrations-core/blob/master/datadog_checks_base/datadog_checks/utils/headers.py
    #
    # include_default_headers: true

    ## @param tags - list of key:value element - optional
    ## List of tags to attach to every metric, event and service check emitted by this integration.
    ##
    ## Learn more about tagging: https://docs.datadoghq.com/tagging/
    #
    # tags:
    #   - <KEY_1>:<VALUE_1>
    #   - <KEY_2>:<VALUE_2>

    ## @param auth_type - string - optional
    ## The type of authentication to use.
    ## The available values are "basic" and "digest".
    #
    # auth_type: <AUTH_TYPE>

    ## @param username - string - optional
    ## The username to use if services are behind basic auth.
    #
    # username: <USERNAME>

    ## @param ntlm_domain - string - optional
    ## If your services uses NTLM authentication, you can
    ## specify a domain that is used in the check. For NTLM Auth,
    ## append the username to domain, not as the `username` parameter.
    ## Example: <NTLM_DOMAIN>/<USERNAME>
    #
    # ntlm_domain: <DOMAIN>

    ## @param password - string - optional
    ## The password to use if services are behind basic or NTLM auth.
    #
    # password: <PASSWORD>

    ## @param connect_timeout - integer - optional
    ## Overrides the default connection timeout value,
    ## and fails the check if the time to establish the (TCP) connection
    ## exceeds the connect_timeout value (in seconds)
    #
    # connect_timeout: <VALUE_IN_SECOND>

    ## @param read_timeout - integer - optional
    ## Overrides the default received timeout value, and fails the check if the time to receive
    ## the server status from the server exceeds the read_timeout value (in seconds)
    #
    # read_timeout: <VALUE_IN_SECOND>

    ## @param proxy - object - optional
    ## This overrides the `proxy` setting in `init_config`.
    ##
    ## Set HTTP or HTTPS proxies. Use the `no_proxy` list
    ## to specify hosts that must bypass proxies.
    ##
    ## The SOCKS protocol is also supported:
    ##
    ## socks5://user:pass@host:port
    ##
    ## Using the scheme `socks5` causes the DNS resolution to happen on the
    ## client, rather than on the proxy server. This is in line with `curl`,
    ## which uses the scheme to decide whether to do the DNS resolution on
    ## the client or proxy. If you want to resolve the domains on the proxy
    ## server, use `socks5h` as the scheme.
    #
    # proxy:
    #   http: http://<PROXY_SERVER_FOR_HTTP>:<PORT>
    #   https: https://<PROXY_SERVER_FOR_HTTPS>:<PORT>
    #   no_proxy:
    #     - <HOSTNAME_1>
    #     - <HOSTNAME_2>

    ## @param skip_proxy - boolean - optional - default: false
    ## This overrides the `skip_proxy` setting in `init_config`.
    ##
    ## If set to `true`, this makes the check bypass any proxy
    ## settings enabled and attempt to reach services directly.
    #
    # skip_proxy: false

    ## @param kerberos_auth - string - optional - default: disabled
    ## If your service uses Kerberos authentication, you can specify the Kerberos
    ## strategy to use between:
    ##  * required
    ##  * optional
    ##  * disabled
    ##
    ## See https://github.com/requests/requests-kerberos#mutual-authentication
    #
    # kerberos_auth: disabled

    ## @param kerberos_delegate - boolean - optional - default: false
    ## Set to `true` to enable kerberos delegation of credentials to a server that requests delegation.
    ## See https://github.com/requests/requests-kerberos#delegation
    #
    # kerberos_delegate: false

    ## @param kerberos_force_initiate - boolean - optional - default: false
    ## Set to `true` to preemptively initiate the Kerberos GSS exchange and present a Kerberos ticket on the initial
    ## request (and all subsequent requests).
    ## See https://github.com/requests/requests-kerberos#preemptive-authentication
    #
    # kerberos_force_initiate: false

    ## @param kerberos_hostname - string - optional
    ## Override the hostname used for the Kerberos GSS exchange if its DNS name doesn't match its kerberos
    ## hostname (e.g., behind a content switch or load balancer).
    ## See https://github.com/requests/requests-kerberos#hostname-override
    #
    # kerberos_hostname: null

    ## @param kerberos_principal - string - optional
    ## Set an explicit principal, to force Kerberos to look for a matching credential cache for the named user.
    ## See https://github.com/requests/requests-kerberos#explicit-principal
    #
    # kerberos_principal: null

    ## @param kerberos_keytab - string - optional
    ## Set the path to your Kerberos key tab file.
    #
    # kerberos_keytab: <KEYTAB_FILE_PATH>

    ## @param kerberos_cache - string - optional
    ## Sets the KRB5CCNAME environment variable.
    ## It should point to a credential cache with a valid TGT.
    #
    # kerberos_cache: <KRB5CCNAME>

    ## @param tls_verify - boolean - optional - default: false
    ## Instructs the check to validate the TLS certificate of services.
    #
    # tls_verify: false

    ## @param tls_ignore_warning - boolean - optional - default: false
    ## If `tls_verify` is disabled, security warnings are logged by the check.
    ## Disable these by setting `tls_ignore_warning` to true.
    #
    # tls_ignore_warning: false

    ## @param tls_cert - string - optional
    ## The path to a single file in PEM format containing a certificate as well as any
    ## number of CA certificates needed to establish the certificate’s authenticity for
    ## use when connecting to services. It may also contain an unencrypted private key to use.
    #
    # tls_cert: <CERT_PATH>

    ## @param tls_private_key - string - optional
    ## The unencrypted private key to use for `tls_cert` when connecting to services. This is
    ## required if `tls_cert` is set and it does not already contain a private key.
    #
    # tls_private_key: <PRIVATE_KEY_PATH>

    ## @param tls_ca_cert - string - optional
    ## The path to a file of concatenated CA certificates in PEM format or a directory
    ## containing several CA certificates in PEM format. If a directory, the directory
    ## must have been processed using the c_rehash utility supplied with OpenSSL. See:
    ## https://www.openssl.org/docs/manmaster/man3/SSL_CTX_load_verify_locations.html
    #
    # tls_ca_cert: <CA_CERT_PATH>

    ## @param headers - list of key:value elements - optional
    ## The headers parameter allows you to send specific headers with every request.
    ## You can use it for explicitly specifying the host header or adding headers for
    ## authorization purposes.
    ##
    ## This overrides any default headers.
    #
    # headers:
    #   Host: <ALTERNATIVE_HOSTNAME>
    #   X-Auth-Token: <AUTH_TOKEN>

    ## @param timeout - integer - optional - default: 10
    ## The timeout for connecting to services.
    #
    # timeout: 10

    ## @param log_requests - boolean - optional - default: false
    ## Whether or not to debug log the HTTP(S) requests made, including the method and URL.
    #
    # log_requests: false
