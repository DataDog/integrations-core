---
description: 
globs: **/*.py
alwaysApply: false
---
## Generating new code
When generating python code, always add type hinting to the methods. Use modern syntaxis, for example, instead of using `Optional[str]` use `str | None` and instead of using `List[str]` use `list[str]`.

If a method yields a value but we are not returning anything or we do not accept anything sent to the generator, it is better to type the method as Iterator to explicitely expose the API of the method as simply something the caller can iterate over.

## Refactoring code
When refactoring existing code, never add type hints to method that are not type hinted unless asked explicitely.

## The case of AnyStr
AnyStr is normally used to define the type of a variable that can be either a string or bytes. This is soon to be deprecated and, instead, type parameter lits are a better solution. If AnyStr is used as type of several arguments in a given method signature, it is better to use type parameter lists and define the function as a generic function.

```python
# Soon to be deprecated
def func(a: AnySTr, b: AnyStr):
    pass

# Preferred
def func[T: (str, bytes)](a: T, b: T):
    pass
```

This way, whether a and b are either strings or bytes, they cannot be mixed. 

If a single argument is present in the function, `str | bytes` is preferred.